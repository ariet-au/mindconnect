<div class="container is-fluid p-4">
  <div class="box p-6">
    <h1 class="title is-3 has-text-centered has-text-grey-dark mb-5">
      <%= @psychologist_profile.first_name %>'s Availability
    </h1>
    <p class="subtitle is-5 has-text-centered has-text-grey-dark mb-5">
      Times shown in your local timezone: <span id="browser-timezone">Loading...</span>
    </p>

    <% if notice %>
      <div class="notification is-success is-light mb-4">
        <button class="delete" onclick="this.parentElement.remove()"></button>
        <%= notice %>
      </div>
    <% end %>
    <% if alert %>
      <div class="notification is-danger is-light mb-4">
        <button class="delete" onclick="this.parentElement.remove()"></button>
        <%= alert %>
      </div>
    <% end %>

    <%= form_with url: psychologist_profile_psychologist_availabilities_path(@psychologist_profile), local: false, id: 'availability-form', data: { turbo: true } do %>
      <div id="availability-container">
        <% (0..6).each do |day_index| %>
          <div class="day-section" data-day="<%= day_index %>">
            <h2 class="title is-5 has-text-grey-dark mb-4"><%= Date::DAYNAMES[day_index] %></h2>
            <div class="slots">
              <% @availabilities.select { |a| a.day_of_week == day_index }.each_with_index do |availability, slot_index| %>
                <div class="slot" data-id="<%= availability.id %>" 
                     data-start-utc="<%= availability.start_time_of_day&.utc&.iso8601 %>" 
                     data-end-utc="<%= availability.end_time_of_day&.utc&.iso8601 %>">
                  <input type="hidden" name="slots[<%= availability.id %>][id]" value="<%= availability.id %>">
                  <input type="hidden" name="slots[<%= availability.id %>][day_of_week]" value="<%= day_index %>">
                  <div class="field has-addons">
                    <div class="control">
                      <div class="select is-fullwidth">
                        <select name="slots[<%= availability.id %>][start_time]" class="time-input start-time"></select>
                      </div>
                    </div>
                    <div class="control">
                      <div class="select is-fullwidth">
                        <select name="slots[<%= availability.id %>][end_time]" class="time-input end-time"></select>
                      </div>
                    </div>
                    <div class="control">
                      <button type="button" class="button is-danger is-light delete-slot">Delete</button>
                    </div>
                  </div>
                  <p class="help is-danger" style="display: none;">Both times must be selected and end time must be after start time</p>
                </div>
              <% end %>
            </div>
            <button type="button" class="button is-info is-light add-slot mt-3">Add Slot</button>
          </div>
        <% end %>
      </div>
      <div class="field is-grouped is-grouped-right mt-5">
        <div class="control">
          <button type="submit" class="button is-primary" id="submit-button">Save All</button>
        </div>
      </div>
      <input type="hidden" name="browser_timezone" id="browser-timezone-input">
    <% end %>
  </div>
</div>

<style>
  .day-section { margin-bottom: 1.5rem; border: 1px solid #dbdbdb; padding: 1rem; border-radius: 5px; }
  .slot { display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.5rem; background: #f9f9f9; padding: 0.5rem; border-radius: 3px; }
  .slot select, .slot button { padding: 0.25rem; min-width: 120px; font-size: 1rem; }
  .slot .select { width: 100%; }
  .slot .field.has-addons { flex-grow: 1; display: flex; }
  .slot .control { flex-grow: 1; }
  .slot .help.is-danger { display: none; color: red; font-size: 0.8rem; }
  .add-slot { padding: 0.5rem 1rem; }
  .is-loading { position: relative; pointer-events: none; }
  .is-loading::after { animation: spinAround 0.5s infinite linear; border: 2px solid #dbdbdb; border-radius: 50%; border-right-color: transparent; border-top-color: transparent; content: ""; display: block; height: 1em; width: 1em; position: absolute; left: calc(50% - 0.5em); top: calc(50% - 0.5em); }
  @keyframes spinAround { from { transform: rotate(0deg); } to { transform: rotate(359deg); } }
</style>

<script>
  let newSlotCounter = 0;
  const TIME_OPTIONS = [];

  // Generate time options (every 15 minutes)
  for (let h = 0; h < 24; h++) {
    for (let m = 0; m < 60; m += 15) {
      TIME_OPTIONS.push(`${String(h).padStart(2, '0')}:${String(m).padStart(2, '0')}`);
    }
  }

  function formatUtcToLocalTimeDisplay(utcIsoString) {
    if (!utcIsoString) return '';
    try {
      const dbDate = new Date(utcIsoString);
      const utcHour = dbDate.getUTCHours();
      const utcMinute = dbDate.getUTCMinutes();
      const now = new Date();
      now.setUTCHours(utcHour, utcMinute, 0, 0);
      return now.toLocaleTimeString(undefined, {
        hour: '2-digit',
        minute: '2-digit',
        hour12: false,
        timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone
      });
    } catch (error) {
      console.error('formatUtcToLocalTimeDisplay error:', error, 'Input:', utcIsoString);
      return '';
    }
  }

  function populateSelect(select, selectedValue) {
    try {
      select.innerHTML = `<option value="">${select.classList.contains('start-time') ? 'Select Start' : 'Select End'}</option>`;
      TIME_OPTIONS.forEach(opt => {
        const option = document.createElement('option');
        option.value = opt;
        option.textContent = opt;
        if (opt === selectedValue) option.selected = true;
        select.appendChild(option);
      });
    } catch (error) {
      console.error('populateSelect error:', error, 'Select:', select.name);
    }
  }

  function validateSlotTimes(startSelect, endSelect) {
    if (!startSelect.value || !endSelect.value) {
      return { valid: false, message: 'Both times must be selected' };
    }
    
    const [startHour, startMinute] = startSelect.value.split(':').map(Number);
    const [endHour, endMinute] = endSelect.value.split(':').map(Number);
    const startTotal = startHour * 60 + startMinute;
    const endTotal = endHour * 60 + endMinute;

    if (endTotal <= startTotal) {
      return { valid: false, message: 'End time must be after start time' };
    }

    return { valid: true };
  }

  function validateDaySlots(daySection) {
    const slots = daySection.querySelectorAll('.slot:not([data-deleted])');
    let isValid = true;

    slots.forEach(slot => {
      const errorElement = slot.querySelector('.help.is-danger');
      errorElement.style.display = 'none';
      
      const startSelect = slot.querySelector('.start-time');
      const endSelect = slot.querySelector('.end-time');
      
      const validation = validateSlotTimes(startSelect, endSelect);
      if (!validation.valid) {
        errorElement.textContent = validation.message;
        errorElement.style.display = 'block';
        isValid = false;
      }
    });

    return isValid;
  }

  function setupSlot(slot, daySection) {
    const startSelect = slot.querySelector('.start-time');
    const endSelect = slot.querySelector('.end-time');
    const deleteButton = slot.querySelector('.delete-slot');

    // Populate time selects
    if (slot.dataset.startUtc) {
      const startTimeDisplay = formatUtcToLocalTimeDisplay(slot.dataset.startUtc);
      const endTimeDisplay = formatUtcToLocalTimeDisplay(slot.dataset.endUtc);
      populateSelect(startSelect, startTimeDisplay);
      populateSelect(endSelect, endTimeDisplay);
    } else {
      populateSelect(startSelect, '');
      populateSelect(endSelect, '');
    }

    // Setup event listeners if not already set up
    if (!slot.dataset.initialized) {
      const validateHandler = () => validateDaySlots(daySection);
      startSelect.addEventListener('change', validateHandler);
      endSelect.addEventListener('change', validateHandler);

      deleteButton.addEventListener('click', () => {
        if (slot.dataset.id) {
          // For existing slots, mark as deleted but don't remove
          slot.dataset.deleted = 'true';
          slot.style.opacity = '0.5';
          slot.style.pointerEvents = 'none';
          
          // Add hidden input to track deletion
          const hiddenInput = document.createElement('input');
          hiddenInput.type = 'hidden';
          hiddenInput.name = `deleted_slots[${slot.dataset.id}]`;
          hiddenInput.value = 'true';
          document.getElementById('availability-form').appendChild(hiddenInput);
        } else {
          // For new slots, just remove them
          slot.remove();
        }
        validateDaySlots(daySection);
      });

      slot.dataset.initialized = 'true';
    }
  }

  function addNewSlot(daySection) {
    const slotsContainer = daySection.querySelector('.slots');
    const dayIndex = daySection.dataset.day;
    const newId = `new_${newSlotCounter++}`;
    
    const newSlot = document.createElement('div');
    newSlot.className = 'slot';
    newSlot.innerHTML = `
      <input type="hidden" name="slots[${newId}][day_of_week]" value="${dayIndex}">
      <div class="field has-addons">
        <div class="control">
          <div class="select is-fullwidth">
            <select name="slots[${newId}][start_time]" class="time-input start-time"></select>
          </div>
        </div>
        <div class="control">
          <div class="select is-fullwidth">
            <select name="slots[${newId}][end_time]" class="time-input end-time"></select>
          </div>
        </div>
        <div class="control">
          <button type="button" class="button is-danger is-light delete-slot">Delete</button>
        </div>
      </div>
      <p class="help is-danger" style="display: none;">Both times must be selected and end time must be after start time</p>
    `;
    
    slotsContainer.appendChild(newSlot);
    setupSlot(newSlot, daySection);
    validateDaySlots(daySection);
  }

  function initializeForm() {
    // Set browser timezone
    const browserTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
    document.getElementById('browser-timezone').textContent = browserTimezone;
    document.getElementById('browser-timezone-input').value = browserTimezone;

    // Initialize all existing slots
    document.querySelectorAll('.day-section').forEach(daySection => {
      daySection.querySelectorAll('.slot').forEach(slot => {
        setupSlot(slot, daySection);
      });

      // Setup add slot button
      const addButton = daySection.querySelector('.add-slot');
      if (addButton && !addButton.dataset.initialized) {
        addButton.addEventListener('click', () => addNewSlot(daySection));
        addButton.dataset.initialized = 'true';
      }
    });

    // Setup form submission
    const form = document.getElementById('availability-form');
    if (form && !form.dataset.initialized) {
      form.addEventListener('submit', (e) => {
        const submitButton = document.getElementById('submit-button');
        submitButton.classList.add('is-loading');
        submitButton.disabled = true;

        let isValid = true;
        document.querySelectorAll('.day-section').forEach(daySection => {
          if (!validateDaySlots(daySection)) {
            isValid = false;
          }
        });

        if (!isValid) {
          e.preventDefault();
          submitButton.classList.remove('is-loading');
          submitButton.disabled = false;
          
          // Scroll to first error
          const firstError = document.querySelector('.help.is-danger[style="display: block;"]');
          if (firstError) {
            firstError.closest('.slot').scrollIntoView({ behavior: 'smooth', block: 'center' });
          }
        }
      });
      form.dataset.initialized = 'true';
    }
  }

  // Initialize when page loads
  document.addEventListener('turbo:load', initializeForm);
  document.addEventListener('DOMContentLoaded', initializeForm);
</script>