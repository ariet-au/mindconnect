<div class="container is-fluid p-4">
  <div class="box p-6">
    <h1 class="title is-3 has-text-centered has-text-grey-dark mb-5">
      <%= @psychologist_profile.first_name %>'s Availability
    </h1>
    <p class="subtitle is-5 has-text-centered has-text-grey-dark mb-5">
      Times shown in your local timezone: <span id="browser-timezone">Loading...</span>
    </p>

    <% if notice %>
      <div class="notification is-success is-light mb-4">
        <button class="delete" onclick="this.parentElement.remove()"></button>
        <%= notice %>
      </div>
    <% end %>
    <% if alert %>
      <div class="notification is-danger is-light mb-4">
        <button class="delete" onclick="this.parentElement.remove()"></button>
        <%= alert %>
      </div>
    <% end %>

<%= form_with url: update_all_psychologist_profile_psychologist_availabilities_path(@psychologist_profile),
              method: :patch,
              local: false,
              id: 'availability-form',
              data: { turbo: false } do |f| %>
            
      <div id="availability-container">
        <% (0..6).each do |day_index| %>
          <div class="day-section" data-day="<%= day_index %>">
            <h2 class="title is-5 has-text-grey-dark mb-4"><%= Date::DAYNAMES[day_index] %></h2>
            <div class="slots">
              <% @availabilities.select { |a| a.day_of_week == day_index }.each do |availability| %>
                <div class="slot" data-id="<%= availability.id %>">
                  <input type="hidden" name="slots[<%= availability.id %>][id]" value="<%= availability.id %>">
                  <input type="hidden" name="slots[<%= availability.id %>][day_of_week]" value="<%= day_index %>">
                  <div class="field has-addons">
                    <div class="control">
                      <div class="select is-fullwidth">
                        <select name="slots[<%= availability.id %>][start_time]" class="time-input start-time">
                          <option value="">Select Start</option>
                          <% (0..23).each do |hour| %>
                            <% [0, 15, 30, 45].each do |minute| %>
                              <% time = "#{hour.to_s.rjust(2, '0')}:#{minute.to_s.rjust(2, '0')}" %>
                              <% selected = availability.start_time_of_day&.in_time_zone(@psychologist_profile.timezone)&.strftime('%H:%M') == time %>
                              <option value="<%= time %>" <%= 'selected' if selected %>><%= time %></option>
                            <% end %>
                          <% end %>
                        </select>
                      </div>
                    </div>
                    <div class="control">
                      <div class="select is-fullwidth">
                        <select name="slots[<%= availability.id %>][end_time]" class="time-input end-time">
                          <option value="">Select End</option>
                          <% (0..23).each do |hour| %>
                            <% [0, 15, 30, 45].each do |minute| %>
                              <% time = "#{hour.to_s.rjust(2, '0')}:#{minute.to_s.rjust(2, '0')}" %>
                              <% selected = availability.end_time_of_day&.in_time_zone(@psychologist_profile.timezone)&.strftime('%H:%M') == time %>
                              <option value="<%= time %>" <%= 'selected' if selected %>><%= time %></option>
                            <% end %>
                          <% end %>
                        </select>
                      </div>
                    </div>
                    <div class="control">
                      <button type="button" class="button is-danger is-light delete-slot" 
                              data-availability-id="<%= availability.id %>">Delete</button>
                    </div>
                  </div>
                  <p class="help is-danger" style="display: none;"></p>
                </div>
              <% end %>
            </div>
            <button type="button" class="button is-info is-light add-slot mt-3">Add Slot</button>
          </div>
        <% end %>
      </div>
      <div class="field is-grouped is-grouped-right mt-5">
        <div class="control">
          <%= f.submit 'Save All', class: 'button is-primary', id: 'submit-button' %>
        </div>
      </div>
      <input type="hidden" name="browser_timezone" id="browser-timezone-input">
    <% end %>
  </div>
</div>

<style>
  .day-section { 
    margin-bottom: 1.5rem; 
    border: 1px solid #dbdbdb; 
    padding: 1rem; 
    border-radius: 5px; 
  }
  .slot { 
    display: flex; 
    align-items: center; 
    gap: 0.5rem; 
    margin-bottom: 0.5rem; 
    background: #f9f9f9; 
    padding: 0.5rem; 
    border-radius: 3px; 
    transition: opacity 0.3s ease;
  }
  .slot.marked-for-deletion {
    opacity: 0.5;
    pointer-events: none;
  }
  .slot select, .slot button { 
    padding: 0.25rem; 
    min-width: 120px; 
    font-size: 1rem; 
  }
  .slot .select { width: 100%; }
  .slot .field.has-addons { 
    flex-grow: 1; 
    display: flex; 
  }
  .slot .control { flex-grow: 1; }
  .slot .help.is-danger { 
    display: none; 
    color: red; 
    font-size: 0.8rem; 
  }
  .add-slot { padding: 0.5rem 1rem; }
  .is-loading { 
    position: relative; 
    pointer-events: none; 
  }
  .is-loading::after { 
    animation: spinAround 0.5s infinite linear; 
    border: 2px solid #dbdbdb; 
    border-radius: 50%; 
    border-right-color: transparent; 
    border-top-color: transparent; 
    content: ""; 
    display: block; 
    height: 1em; 
    width: 1em; 
    position: absolute; 
    left: calc(50% - 0.5em); 
    top: calc(50% - 0.5em); 
  }
  @keyframes spinAround { 
    from { transform: rotate(0deg); } 
    to { transform: rotate(359deg); } 
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Set browser timezone
    const browserTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
    document.getElementById('browser-timezone').textContent = browserTimezone;
    document.getElementById('browser-timezone-input').value = browserTimezone;

    // Add new slot functionality
    document.querySelectorAll('.add-slot').forEach(button => {
      button.addEventListener('click', function() {
        const dayIndex = this.closest('.day-section').dataset.day;
        const slotsContainer = this.previousElementSibling;
        const newId = `new_${Date.now()}`;
        
        const newSlot = document.createElement('div');
        newSlot.className = 'slot';
        newSlot.innerHTML = `
          <input type="hidden" name="slots[${newId}][day_of_week]" value="${dayIndex}">
          <div class="field has-addons">
            <div class="control">
              <div class="select is-fullwidth">
                <select name="slots[${newId}][start_time]" class="time-input start-time">
                  <option value="">Select Start</option>
                  <% (0..23).each do |hour| %>
                    <% [0, 15, 30, 45].each do |minute| %>
                      <option value="<%= "#{hour.to_s.rjust(2, '0')}:#{minute.to_s.rjust(2, '0')}" %>">
                        <%= "#{hour.to_s.rjust(2, '0')}:#{minute.to_s.rjust(2, '0')}" %>
                      </option>
                    <% end %>
                  <% end %>
                </select>
              </div>
            </div>
            <div class="control">
              <div class="select is-fullwidth">
                <select name="slots[${newId}][end_time]" class="time-input end-time">
                  <option value="">Select End</option>
                  <% (0..23).each do |hour| %>
                    <% [0, 15, 30, 45].each do |minute| %>
                      <option value="<%= "#{hour.to_s.rjust(2, '0')}:#{minute.to_s.rjust(2, '0')}" %>">
                        <%= "#{hour.to_s.rjust(2, '0')}:#{minute.to_s.rjust(2, '0')}" %>
                      </option>
                    <% end %>
                  <% end %>
                </select>
              </div>
            </div>
            <div class="control">
              <button type="button" class="button is-danger is-light delete-slot">Delete</button>
            </div>
          </div>
          <p class="help is-danger" style="display: none;"></p>
        `;
        
        slotsContainer.appendChild(newSlot);
        
        // Add event listener to the new delete button
        newSlot.querySelector('.delete-slot').addEventListener('click', function() {
          this.closest('.slot').remove();
        });
      });
    });

    // Delete slot functionality
    document.querySelectorAll('.delete-slot').forEach(button => {
      button.addEventListener('click', function() {
        const slot = this.closest('.slot');
        const slotId = this.dataset.availabilityId;
        
        if (slotId) {
          // For existing slots - mark for deletion
          slot.classList.add('marked-for-deletion');
          
          // Add hidden input to track deletion
          const hiddenInput = document.createElement('input');
          hiddenInput.type = 'hidden';
          hiddenInput.name = `deleted_slots[${slotId}]`;
          hiddenInput.value = '1';
          document.getElementById('availability-form').appendChild(hiddenInput);
        } else {
          // For new slots - just remove from DOM
          slot.remove();
        }
      });
    });

    // Form validation and submission
    document.getElementById('availability-form').addEventListener('submit', function(e) {
      const submitButton = document.getElementById('submit-button');
      submitButton.classList.add('is-loading');
      submitButton.disabled = true;

      let isValid = true;
      
      // Validate each slot
      document.querySelectorAll('.slot:not(.marked-for-deletion)').forEach(slot => {
        const startSelect = slot.querySelector('.start-time');
        const endSelect = slot.querySelector('.end-time');
        const errorElement = slot.querySelector('.help.is-danger');
        
        errorElement.style.display = 'none';

        if (!startSelect.value || !endSelect.value) {
          errorElement.textContent = 'Both times must be selected';
          errorElement.style.display = 'block';
          isValid = false;
          return;
        }

        const [startHour, startMinute] = startSelect.value.split(':').map(Number);
        const [endHour, endMinute] = endSelect.value.split(':').map(Number);
        
        if (endHour < startHour || (endHour === startHour && endMinute <= startMinute)) {
          errorElement.textContent = 'End time must be after start time';
          errorElement.style.display = 'block';
          isValid = false;
        }
      });

      if (!isValid) {
        e.preventDefault();
        submitButton.classList.remove('is-loading');
        submitButton.disabled = false;
        
        // Scroll to first error
        const firstError = document.querySelector('.help.is-danger[style="display: block;"]');
        if (firstError) {
          firstError.closest('.slot').scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
      }
    });
  });
</script>