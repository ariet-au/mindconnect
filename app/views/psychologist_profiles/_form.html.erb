<%= form_with(model: psychologist_profile, local: true, html: { multipart: true }) do |form| %>
  <% if psychologist_profile.errors.any? %>
    <div class="notification is-danger mb-6">
      <h2 class="subtitle"><%= t('psychologist_profile.errors.header', count: psychologist_profile.errors.count) %></h2>
      <ul>
        <% psychologist_profile.errors.each do |error| %>
          <li><%= error.full_message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="columns is-multiline">

    <!-- Section: Basic Information -->
    <div class="column is-full">
      <div class="box">
        <h3 class="title is-4 has-text-weight-semibold border-bottom pb-4 mb-5">
          <span class="icon-text">
            <span class="icon"><i class="fas fa-user-circle"></i></span>
            <span><%= t('psychologist_profile.sections.basic_information') %></span>
          </span>
        </h3>
        <div class="columns is-multiline">
          <div class="column is-half">
            <div class="field">
            <!-- Preview container -->
            <div id="preview-container-page" style="margin-top: 1rem;">
              <%= image_tag(
                    @psychologist_profile&.profile_img&.attached? ? url_for(@psychologist_profile.profile_img) : asset_path("default-profile.png"),
                    id: "imagePreviewPage",
                    style: "max-width: 200px;"
                  ) %>
            </div>
              <%= form.label :profile_img, t('psychologist_profile.labels.upload_profile_image'), class: "label" %>
              <label class="button is-link is-light">
                <span class="icon"><i class="fas fa-upload"></i></span>
                <span><%= t('psychologist_profile.labels.choose_file') %></span>
                <input type="file" id="imageInput" accept="image/*" hidden>
              </label>
              <input type="file" id="croppedImageInput" name="psychologist_profile[profile_img]" hidden>
            </div>
          </div>
          <div class="column is-half">
            <div class="field">
              <%= form.label :timezone, t('psychologist_profile.labels.timezone'), class: "label" %>
              <div class="control is-expanded">
                 <%= form.select :timezone,
                  TZInfo::Timezone.all_identifiers.map { |id|
                    begin
                      tz = TZInfo::Timezone.get(id)
                      offset = tz.current_period.offset.utc_total_offset / 3600.0
                      formatted_offset = "GMT#{offset >= 0 ? '+' : ''}#{offset.to_i}"
                      ["(#{formatted_offset}) #{id}", id]
                    rescue TZInfo::InvalidTimezoneIdentifier
                      nil
                    end
                  }.compact,
                  { prompt: t('psychologist_profile.prompts.select_timezone') },
                  { id: "timezone_select", class: "input" }
                %>
              </div>
            </div>
          </div>
          <div class="column is-half">
            <div class="field">
              <%= form.label :first_name, t('psychologist_profile.labels.first_name'), class: "label" %>
              <div class="control">
                <%= form.text_field :first_name, class: "input" %>
              </div>
            </div>
          </div>
          <div class="column is-half">
            <div class="field">
              <%= form.label :last_name, t('psychologist_profile.labels.last_name'), class: "label" %>
              <div class="control">
                <%= form.text_field :last_name, class: "input" %>
              </div>
            </div>
          </div>
          <div class="column is-full">
            <div class="field">
              <%= form.label :about_me, t('psychologist_profile.labels.about_me'), class: "label" %>
              <div class="control">
                <%= form.text_area :about_me, class: "textarea" %>
              </div>
            </div>
          </div>
           <div class="column is-full">
            <div class="field">
              <%= form.label :youtube_video_url, t('psychologist_profile.labels.youtube_video_url'), class: "label" %>
              <div class="control">
                <%= form.text_field :youtube_video_url, class: "input", placeholder: "https://www.youtube.com/watch?v=abc123xyz" %>
              </div>
              <% if form.object.errors[:youtube_video_url].any? %>
                <p class="help is-danger"><%= form.object.errors[:youtube_video_url].first %></p>
              <% end %>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Section: Professional Details -->
    <div class="column is-full">
        <div class="box">
            <h3 class="title is-4 has-text-weight-semibold border-bottom pb-4 mb-5">
              <span class="icon-text">
                <span class="icon"><i class="fas fa-briefcase"></i></span>
                <span><%= t('psychologist_profile.sections.professional_details') %></span>
              </span>
            </h3>
            <div class="columns is-multiline">
               <div class="column is-half">
                    <div class="field">
                        <%= form.label :years_of_experience, t('psychologist_profile.labels.years_of_experience'), class: "label" %>
                        <div class="control">
                            <%= form.number_field :years_of_experience, class: "input" %>
                        </div>
                    </div>
                </div>
                <div class="column is-one-quarter">
                    <div class="field">
                        <%= form.label :standard_rate, t('psychologist_profile.labels.standard_rate'), class: "label" %>
                        <div class="control">
                            <%= form.number_field :standard_rate, step: 0.01, min: 0, class: "input", placeholder: t('psychologist_profile.placeholders.standard_rate') %>
                        </div>
                    </div>
                </div>
                <div class="column is-one-quarter">
                    <div class="field">
                        <%= form.label :currency, t('psychologist_profile.labels.currency'), class: "label" %>
                        <div class="control">
                            <div class="select is-fullwidth">
                                <%= form.select :currency, options_for_select(['KGS', 'KZT', 'UZS', 'USD', 'RUB'], selected: @psychologist_profile.currency), { include_blank: t('psychologist_profile.prompts.select_currency') } %>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="columns is-multiline">
              <div class="column is-one-third">
                <div class="field">
                  <input id="is_doctor" type="checkbox" name="psychologist_profile[is_doctor]" class="switch is-success" <%= "checked" if @psychologist_profile.is_doctor %>>
                  <label for="is_doctor"><%= t('psychologist_profile.labels.is_doctor') %></label>
                </div>
              </div>

              <div class="column is-one-third">
                <div class="field">
                  <input id="has_psychology_degree" type="checkbox" name="psychologist_profile[has_psychology_degree]" class="switch is-info" <%= "checked" if @psychologist_profile.has_psychology_degree %>>
                  <label for="has_psychology_degree"><%= t('psychologist_profile.labels.has_psychology_degree') %></label>
                </div>
              </div>
              <div class="column is-one-third">
                <div class="field">
                  <input id="supervision" type="checkbox" name="psychologist_profile[supervision]" class="switch is-info" <%= "checked" if @psychologist_profile.supervision %>>
                  <label for="supervision"><%= t('psychologist_profile.labels.supervision') %></label>
                </div>
              </div>
            </div>
            <div class="column is-full">
          <div class="field">
            <%= form.label :language_ids, t('psychologist_profile.labels.select_languages'), class: "label" %>
            <div class="control">
              <%
                translated_options = Language.all.map do |lang|
                  translation_key = "spoken_languages.#{lang.name}"
                  translated_name = t(translation_key, default: lang.name)
                  [translated_name, lang.id]
                end
              %>
              <%= form.select :language_ids, translated_options, {}, { multiple: true, class: "tom-select-languages" } %>
            </div>
          </div>
        </div>
        </div>
    </div>

    <!-- Section: Education History -->
    <div class="column is-full">
        <div class="box">
            <h3 class="title is-4 has-text-weight-semibold border-bottom pb-4 mb-5">
                <span class="icon-text">
                    <span class="icon"><i class="fas fa-graduation-cap"></i></span>
                    <span><%= t('psychologist_profile.sections.education_history') %></span>
                </span>
            </h3>
            <div id="educations-container">
                <%= form.fields_for :educations do |education_fields| %>
                    <%= render "educations/form", f: education_fields %>
                <% end %>
            </div>
            <button type="button" class="button is-info is-light mt-4" id="add-education-button">
                <span class="icon"><i class="fas fa-plus"></i></span>
                <span><%= t('psychologist_profile.buttons.add_education') %></span>
            </button>
        </div>
    </div>

    <!-- Section: Client & Issue Details -->
    <div class="column is-full">
      <div class="box">
        <h3 class="title is-4 has-text-weight-semibold border-bottom pb-4 mb-5">
          <span class="icon-text">
            <span class="icon"><i class="fas fa-clipboard-list"></i></span>
            <span><%= t('psychologist_profile.sections.client_issue_details') %></span>
          </span>
        </h3>
        <div class="columns is-multiline">
          <div class="column is-full">
            <div class="field">
              <%= form.label :issue_ids, t('psychologist_profile.labels.select_issues'), class: "label" %>
              <div class="control">
                <%= form.collection_select :issue_ids, Issue.all, :id, :name, {}, { multiple: true, class: "tom-select-issues" } %>
              </div>
            </div>
            <div class="field">
              <%= form.label :about_issues, t('psychologist_profile.labels.about_issues'), class: "label" %>
              <div class="control">
                <%= form.text_area :about_issues, class: "textarea" %>
              </div>
            </div>
          </div>
          <div class="column is-full">
            <div class="field">
              <%= form.label :client_type_ids, t('psychologist_profile.labels.select_client_types'), class: "label" %>
              <div class="control">
<%= form.collection_select :client_type_ids, ClientType.all, :id, ->(client_type) { t("client_types.#{client_type.name}") }, {}, { multiple: true, class: "tom-select-client-types" } %>
              </div>
            </div>
             <div class="field">
              <%= form.label :about_clients, t('psychologist_profile.labels.about_clients'), class: "label" %>
              <div class="control">
                <%= form.text_area :about_clients, class: "textarea" %>
              </div>
            </div>
          </div>
          <div class="column is-full">
            <div class="field">
              <%= form.label :specialty_ids, t('psychologist_profile.labels.select_specialties'), class: "label" %>
              <div class="control">
                <%= form.collection_select :specialty_ids, Specialty.all, :id, ->(speciality_name) { t("specialties.#{speciality_name.name}") }, {}, { multiple: true, class: "tom-select-specialties" } %>
              </div>
            </div>
            <div class="field">
              <%= form.label :about_specialties, t('psychologist_profile.labels.about_specialties'), class: "label" %>
              <div class="control">
                <%= form.text_area :about_specialties, class: "textarea" %>
              </div>
            </div>
          </div>

          <div class="column is-half">
            <div class="field">
              <label class="checkbox">
                <%= form.check_box :in_person %>
                <%= t('psychologist_profile.labels.in_person_services') %>
              </label>
            </div>
          </div>
          <div class="column is-half">
            <div class="field">
              <label class="checkbox">
                <%= form.check_box :online %>
                <%= t('psychologist_profile.labels.online_services') %>
              </label>
            </div>
          </div>

        </div>
      </div>
    </div>

    <!-- Section: Contact & Service Details -->
    <div class="column is-full">
      <div class="box">
        <h3 class="title is-4 has-text-weight-semibold border-bottom pb-4 mb-5">
          <span class="icon-text">
            <span class="icon"><i class="fas fa-address-book"></i></span>
            <span><%= t('psychologist_profile.sections.contact_service_details') %></span>
          </span>
        </h3>
        <div class="columns is-multiline">
          <div class="column is-half">
             <div class="field">
              <%= form.label :gender, t('psychologist_profile.labels.gender'), class: "label" %>
              <div class="control">
                <div class="select is-fullwidth">
                  <%= form.select :gender, PsychologistProfile.genders.map { |key, value| [t("psychologist_profile.gender_options.#{key}"), key] }, {}, class: "input" %>
                </div>
              </div>
            </div>
          </div>
          <div class="column is-half">
            <div class="field">
              <%= form.label :profile_url, t('psychologist_profile.labels.profile_url'), class: "label" %>
              <div class="control">
                <%= form.text_field :profile_url, class: "input", id: "profile_url_input", placeholder: "letters, numbers, - or _" %>
              </div>
              <p class="help is-info" id="profile_url_rules">
                <%= t('psychologist_profile.labels.profile_url_rules', default: "3–30 chars, lowercase letters, numbers, hyphens, underscores, слитно буквыы от 3 до 30") %>
              </p>
              <p class="help is-danger" id="profile_url_error" style="display: none;"></p>

              <!-- URL preview always visible -->
              <p class="help is-info mt-2">
                
                <strong>https://aksanaa.com/p/<span id="profile_url_preview"><%= @psychologist_profile&.profile_url.presence || 'your-url-here' %></span></strong>
              </p>
            </div>
          </div>
         <div class="column is-half">
          <div class="field">
            <%= form.label :country, t('psychologist_profile.labels.country'), class: "label" %>
            <div class="control">
              <div class="select is-fullwidth">
                <%
                  translated_countries = countries_with_cities.map do |country|
                    translation_key = "countries.#{country['name'].downcase.parameterize(separator: '_')}"
                    [t(translation_key, default: country['name']), country['name']]
                  end
                %>
                <%= form.select :country, 
                      options_for_select(translated_countries, selected: @psychologist_profile.country), 
                      { include_blank: t('countries') }, 
                      { class: 'input', id: 'country-select' } 
                %>
              </div>
            </div>
          </div>
        </div>
        <div class="column is-half">
          <div class="field">
            <%= form.label :city, t('psychologist_profile.labels.city'), class: "label" %>
            <div class="control">
              <div class="select is-fullwidth">
                <%= form.select :city,
                      [], # empty initially, JS will populate
                      { include_blank: t('cities') },
                      { class: 'input', id: 'city-select', 'data-saved-city': @psychologist_profile.city } %>
              </div>
            </div>
          </div>
        </div>
          <div class="column is-full">
            <div class="field">
              <%= form.label :address, t('psychologist_profile.labels.address'), class: "label" %>
              <div class="control">
                <%= form.text_field :address, class: "input" %>
              </div>
            </div>
          </div>
          <div class="column is-one-third">
            <div class="field">
              <%= form.label :telegram, t('psychologist_profile.labels.telegram'), class: "label" %>
              <div class="control">
                <%= form.text_field :telegram, class: "input", placeholder: t('psychologist_profile.labels.telegram_placeholder') %>
              </div>
            </div>
          </div>
          <div class="column is-one-third">
            <div class="field">
              <%= form.label :whatsapp, t('psychologist_profile.labels.whatsapp'), class: "label" %>
              <div class="control">
                <%= form.text_field :whatsapp, class: "input" %>
              </div>
            </div>
          </div>
          <div class="column ">
            <div class="field">
              <%= form.label :contact_email, t('psychologist_profile.labels.contact_email'), class: "label" %>
              <div class="control">
                <%= form.text_field :contact_email, class: "input" %>
              </div>
            </div>
          </div>
          <div class="column is-one-third">
            <div class="field">
              <%= form.label :instagram, t('psychologist_profile.labels.instagram'), class: "label" %>
              <div class="control">
                <%= form.text_field :instagram, class: "input", placeholder: t('psychologist_profile.labels.instagram_placeholder') %>
              </div>
            </div>
          </div>
          <div class="column is-one-third">
            <div class="field">
              <%= form.label :contact_phone, t('psychologist_profile.labels.contact_phone1'), class: "label" %>
              <div class="control">
                <%= form.text_field :contact_phone, class: "input" %>
              </div>
            </div>
          </div>
          <div class="column is-one-third">
            <div class="field">
              <%= form.label :contact_phone2, t('psychologist_profile.labels.contact_phone2'), class: "label" %>
              <div class="control">
                <%= form.text_field :contact_phone2, class: "input" %>
              </div>
            </div>
          </div>

          <div class="column is-one-third">
            <div class="field">
              <%= form.label :contact_phone3, t('psychologist_profile.labels.contact_phone3'), class: "label" %>
              <div class="control">
                <%= form.text_field :contact_phone3, class: "input" %>
              </div>
            </div>
          </div>

          
          <div class="column is-full">
            <div class="field">
              <%= form.label :primary_contact_method, t('psychologist_profile.labels.primary_contact_method'), class: "label" %>
              <div class="control">
                <div class="select is-fullwidth">
                  <%= form.select :primary_contact_method, options_for_select([
                      [t('psychologist_profile.contact_methods.telegram'), 'telegram'],
                      [t('psychologist_profile.contact_methods.whatsapp'), 'whatsapp'],
                      [t('psychologist_profile.contact_methods.phone1'), 'contact_phone'],
                      [t('psychologist_profile.contact_methods.phone2'), 'contact_phone2'],
                      [t('psychologist_profile.contact_methods.phone3'), 'contact_phone3'],
                      [t('psychologist_profile.contact_methods.contact_email'), 'contact_email'],
                    ], selected: @psychologist_profile.primary_contact_method), { include_blank: t('psychologist_profile.prompts.select_primary_contact') } %>
                </div>
              </div>
            </div>
          </div>
        
          
          
          <div class="column is-full">
            <div class="field">
              <label class="checkbox has-text-danger has-text-weight-bold">
                <%= form.check_box :hidden %>
                <%= t('psychologist_profile.labels.hidden') %>!
                <br>
              </label>
            </div>
          </div>

        </div>
      </div>
    </div>
  </div>

  <!-- Submit Button -->
  <div class="field mt-6">
    <div class="control">
      <%= form.submit t('psychologist_profile.buttons.submit'), class: "button is-primary is-fullwidth is-large" %>
    </div>
  </div>

  <!-- Modal for Image Cropping -->
  <div class="modal" id="cropModal">
    <div class="modal-background"></div>
    <div class="modal-card">
      <header class="modal-card-head">
        <p class="modal-card-title"><%= t('psychologist_profile.modal.crop_image_title') %></p>
        <button class="delete" id="closeModal" aria-label="<%= t('psychologist_profile.modal.close_button_aria') %>"></button>
      </header>
      <section class="modal-card-body">
        <img id="imagePreview" style="max-width: 100%;">
      </section>
      <footer class="modal-card-foot">
        <button type="button" class="button is-primary" id="confirmCrop"><%= t('psychologist_profile.modal.confirm_button') %></button>
        <button type="button" class="button" id="cancelCrop"><%= t('psychologist_profile.modal.cancel_button') %></button>
      </footer>
    </div>
  </div>

  <!-- Template for new education fields -->
  <% education_fields_template_content = capture do %>
    <%= form.fields_for :educations, Education.new, child_index: "NEW_RECORD" do |education_fields| %>
      <%= render "educations/form", f: education_fields %>
    <% end %>
  <% end %>
  <template id="education-fields-template">
    <%= education_fields_template_content %>
  </template>
<% end %>

<%# --- STYLES --- %>
<style>
  .box {
    box-shadow: 0 0.5em 1em -0.125em rgba(10, 10, 10, 0.1), 0 0px 0 1px rgba(10, 10, 10, 0.02);
    border-radius: 8px;
  }
  .border-bottom {
    border-bottom: 1px solid #dbdbdb;
  }
  .pb-4 {
    padding-bottom: 1rem;
  }
  .mb-5 {
    margin-bottom: 1.75rem;
  }

  
  textarea.textarea {
  line-height: 1.3 !important; /* Tighter line spacing */
  padding: 0.75rem !important; /* Less internal padding */
  min-height: calc(1.5em * 10 + 2rem) !important;
}

/* Optional: Slightly smaller font size to fit more text */
textarea.textarea {
  font-size: 0.95rem !important;
}

/* Ensure it wraps text properly */
textarea.textarea {
  white-space: pre-wrap !important;
  word-wrap: break-word !important;
}
  /* Education container styling */
  #educations-container .box {
    position: relative;
    padding: 1.5rem;
    margin-bottom: 1rem;
    background-color: #f8f9fa;
    border: 1px solid #e9ecef;
    border-radius: 6px;
    padding-bottom: 4rem; /* Space for remove button */
  }

  #educations-container .box:last-child {
    margin-bottom: 1rem;
  }

  /* Remove button styling - positioned at bottom right */
  .remove-education-button {
    /* Positioning */
    position: absolute;
    bottom: 1rem;
    right: 1rem;
    
    /* Button appearance */
    background-color: #dc3545;
    color: white;
    border: none;
    border-radius: 4px;
    padding: 0.5rem 1rem;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    min-width: 90px;
    text-align: center;
    line-height: 1.4;
    
    /* Mobile responsiveness */
    touch-action: manipulation;
    -webkit-tap-highlight-color: transparent;
  }

  /* Hover effect */
  .remove-education-button:hover:not(:disabled) {
    background-color: #c82333;
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.15);
  }

  /* Active/pressed state */
  .remove-education-button:active {
    transform: translateY(0);
    box-shadow: 0 1px 2px rgba(0,0,0,0.1);
  }

  /* Mobile specific adjustments */
  @media (max-width: 768px) {
    .remove-education-button {
      bottom: 0.75rem;
      right: 0.75rem;
      padding: 0.6rem 1rem;
      font-size: 0.85rem;
      min-width: 80px;
    }
    
    #educations-container .box {
      padding-bottom: 4.5rem;
    }
  }

  /* Very small screens - full width button */
  @media (max-width: 480px) {
    #educations-container .box {
      padding-bottom: 1.5rem;
    }
    
    .remove-education-button {
      position: static;
      width: 100%;
      margin-top: 1rem;
      bottom: auto;
      right: auto;
      display: block;
    }
  }

  /* Success state for confirmation */
  .remove-education-button.removing {
    background-color: #6c757d;
    pointer-events: none;
    opacity: 0.8;
  }

  .remove-education-button.removing::after {
    content: "Removing...";
  }

  /* Disabled state */
  .remove-education-button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .field {border: none;}
</style>

<%# --- SCRIPTS --- %>
<script>
document.addEventListener("turbo:load", function () {
  let cropper;

  const imageInput = document.getElementById("imageInput");
  if (!imageInput) return;

  const imagePreview = document.getElementById("imagePreview"); // modal preview
  const imagePreviewPage = document.getElementById("imagePreviewPage"); // page preview
  const cropModal = document.getElementById("cropModal");
  const confirmCrop = document.getElementById("confirmCrop");
  const cancelCrop = document.getElementById("cancelCrop");
  const closeModal = document.getElementById("closeModal");
  const croppedImageInput = document.getElementById("croppedImageInput");

  imageInput.addEventListener("change", function () {
    const file = this.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = function (e) {
      imagePreview.src = e.target.result;
      cropModal.classList.add("is-active");

      imagePreview.onload = function () {
        if (cropper) cropper.destroy();
        cropper = new Cropper(imagePreview, {
          aspectRatio: 1,
          viewMode: 1,
        });
      };
    };
    reader.readAsDataURL(file);
  });

  [cancelCrop, closeModal].forEach((btn) => {
    btn.addEventListener("click", () => {
      cropModal.classList.remove("is-active");
      if (cropper) cropper.destroy();
    });
  });

  confirmCrop.addEventListener("click", () => {
    cropper.getCroppedCanvas().toBlob((blob) => {
      const file = new File([blob], "cropped_profile.jpg", { type: "image/jpeg" });

      // Update hidden input so Rails gets the cropped image
      const dataTransfer = new DataTransfer();
      dataTransfer.items.add(file);
      croppedImageInput.files = dataTransfer.files;

      // Update preview on the page
      const reader = new FileReader();
      reader.onload = function (e) {
        if (imagePreviewPage) {
          imagePreviewPage.src = e.target.result;
        }
      };
      reader.readAsDataURL(file);

      cropModal.classList.remove("is-active");
      cropper.destroy();
    });
  });
});

document.addEventListener('turbo:load', function() {
    // Dynamic Education Fields Logic
    const addEducationButton = document.getElementById('add-education-button');
    const educationsContainer = document.getElementById('educations-container');
    const educationTemplate = document.getElementById('education-fields-template');

    if (addEducationButton && educationsContainer && educationTemplate) {
        
        // Remove education button handler
        document.addEventListener('click', function(event) {
            const removeButton = event.target.closest('.remove-education-button');
            if (removeButton) {
                event.preventDefault();
                
                // Add removing state
                removeButton.disabled = true;
                removeButton.classList.add('removing');
                removeButton.innerHTML = '<span class="icon"><i class="fas fa-spinner fa-spin"></i></span> Removing...';
                
                // Find the parent education box
                const educationBox = removeButton.closest('.box');
                if (!educationBox) {
                    removeButton.disabled = false;
                    removeButton.classList.remove('removing');
                    return;
                }
                
                // Check if it's an existing record (has destroy field) or new record
                const destroyField = educationBox.querySelector('input[name*="_destroy"]');
                
                if (destroyField) {
                    // Existing record - mark for deletion
                    destroyField.value = '1';
                    setTimeout(() => {
                        educationBox.style.transition = 'opacity 0.3s ease';
                        educationBox.style.opacity = '0.5';
                        educationBox.style.pointerEvents = 'none';
                    }, 100);
                } else {
                    // New record - remove immediately with animation
                    const fadeOut = educationBox.animate([
                        { 
                            opacity: 1, 
                            transform: 'translateX(0) scale(1)',
                            height: educationBox.offsetHeight + 'px'
                        },
                        { 
                            opacity: 0, 
                            transform: 'translateX(10px) scale(0.95)',
                            height: '0px'
                        }
                    ], {
                        duration: 300,
                        easing: 'ease-out'
                    });
                    
                    fadeOut.onfinish = () => {
                        educationBox.remove();
                    };
                }
            }
        });

        // Add new education
        addEducationButton.addEventListener('click', (event) => {
            event.preventDefault();
            const content = educationTemplate.innerHTML.replace(/NEW_RECORD/g, new Date().getTime());
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = content;
            const newEducation = tempDiv.firstElementChild;
            
            // Insert before add button with animation
            educationsContainer.insertBefore(newEducation, addEducationButton);
            
            // Animate in
            newEducation.style.opacity = '0';
            newEducation.style.transform = 'translateY(-20px)';
            requestAnimationFrame(() => {
                newEducation.style.transition = 'all 0.3s ease';
                newEducation.style.opacity = '1';
                newEducation.style.transform = 'translateY(0)';
            });
            
            // Initialize any new form fields
            newEducation.querySelectorAll('input, select, textarea').forEach(field => {
                if (field.tagName === 'INPUT' && field.type === 'checkbox') {
                    field.addEventListener('change', function() {
                        this.closest('.field').classList.toggle('is-checked', this.checked);
                    });
                }
                
                field.addEventListener('focus', function() {
                    this.closest('.field').classList.add('is-focused');
                });
                field.addEventListener('blur', function() {
                    this.closest('.field').classList.remove('is-focused');
                });
            });
        });
    }

    const countrySelect = document.getElementById('country-select');
    const citySelect = document.getElementById('city-select');
    const countryData = <%= raw @countries_with_cities.to_json %>;

    if (countrySelect && citySelect) {
        const updateCities = () => {
            const selectedCountry = countrySelect.value;
            const savedCity = citySelect.dataset.savedCity || '<%= j(@psychologist_profile.city) %>';

            citySelect.innerHTML = '';
            citySelect.disabled = !selectedCountry;

            const placeholder = new Option('<%= t('psychologist_profile.prompts.select_city') %>', '', true, true);
            placeholder.disabled = true;
            citySelect.add(placeholder);

            if (selectedCountry) {
              const country = countryData.find(c => c.name === selectedCountry);
              if (country && country.cities) {
                country.cities.forEach(city => {
                  const option = new Option(city.translated_name || city.name, city.name);
                  if (city.name === savedCity) {
                    option.selected = true;
                    placeholder.selected = false;
                  }
                  citySelect.add(option);
                });
              }
            }
        };

        countrySelect.addEventListener('change', updateCities);

        // Populate cities on page load if country is already selected
        if (countrySelect.value) {
            updateCities();
        }
    }

    // TomSelect Initialization
    const initTomSelect = (selector, config) => {
        document.querySelectorAll(selector).forEach((el) => {
            if (!el.tomselect) {
                new TomSelect(el, config);
            }
        });
    };

    const commonMultiConfig = {
      plugins: ['remove_button'],
      maxItems: null,
      persist: false,
      create: false,
      closeAfterSelect: false,
    };

    initTomSelect('.tom-select-issues, .tom-select-specialties, .tom-select-client-types, .tom-select-languages', commonMultiConfig);

    const timezoneSelectElement = document.getElementById('timezone_select');
    if (timezoneSelectElement && !timezoneSelectElement.tomselect) {
      const tomSelectInstance = new TomSelect(timezoneSelectElement, {
        maxItems: 1,
        persist: false,
        create: false,
        plugins: ['dropdown_input'],
        sortField: { field: "text", direction: "asc" },
        placeholder: timezoneSelectElement.getAttribute('data-placeholder') || "Select your time zone",
        allowEmptyOption: true,
      });

      if (typeof Intl?.DateTimeFormat === 'function') {
        try {
          const browserTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
          tomSelectInstance.setValue(browserTimeZone, true);
        } catch (error) {
          console.error("Error detecting browser time zone:", error);
        }
      }
    }
});

document.addEventListener("turbo:load", () => {
  const input = document.getElementById("profile_url_input");
  const errorEl = document.getElementById("profile_url_error");
  const previewEl = document.getElementById("profile_url_preview");

  if (!input) return;

  const regex = /^[a-z0-9_-]{3,30}$/;
  let timeout;

  const updatePreview = (value) => {
    previewEl.textContent = value || "your-url-here";
  };

  // Initialize preview on page load
  updatePreview(input.value);

  input.addEventListener("input", () => {
    const value = input.value.trim();

    // Clear previous error
    errorEl.style.display = "none";
    errorEl.textContent = "";

    // Update preview (always)
    updatePreview(value);

    // Show format error if invalid
    if (value && !regex.test(value)) {
      errorEl.style.display = "block";
      errorEl.textContent = "URL can only contain 3–30 lowercase letters, numbers, hyphens, underscores";
      return;
    }

    if (value) {
      // Debounce AJAX uniqueness check
      clearTimeout(timeout);
      timeout = setTimeout(() => {
        fetch(`/psychologist_profiles/check_profile_url?profile_url=${encodeURIComponent(value)}`)
          .then(res => res.json())
          .then(data => {
            if (data.taken) {
              errorEl.style.display = "block";
              errorEl.textContent = "This URL is already taken";
            }
          })
          .catch(err => {
            console.error('Error checking URL availability:', err);
          });
      }, 500);
    }
  });
});
</script>