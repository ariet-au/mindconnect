<%= form_with(model: psychologist_profile, local: true, html: { multipart: true, class: 'box' }) do |form| %>
  <% if psychologist_profile.errors.any? %>
    <div class="notification is-danger">
      <h2 class="subtitle"><%= pluralize(psychologist_profile.errors.count, "error") %> prohibited this psychologist_profile from being saved:</h2>

      <ul>
        <% psychologist_profile.errors.each do |error| %>
          <li><%= error.full_message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="columns is-multiline">
    <!-- First Name -->
    <div class="column is-half">
      <div class="field">
        <%= form.label :first_name, class: "label" %>
        <div class="control">
          <%= form.text_field :first_name, class: "input" %>
        </div>
      </div>
    </div>

    <!-- Last Name -->
    <div class="column is-half">
      <div class="field">
        <%= form.label :last_name, class: "label" %>
        <div class="control">
          <%= form.text_field :last_name, class: "input" %>
        </div>
      </div>
    </div>

    <!-- About Me -->
    <div class="column is-full">
      <div class="field">
        <%= form.label :about_me, class: "label" %>
        <div class="control">
          <%= form.text_area :about_me, class: "textarea" %>
        </div>
      </div>
    </div>

        <!-- Image Upload -->
    <div class="column is-full">
      <div class="field">
        <label class="button is-link is-light">
          Upload Profile Image
          <input type="file" id="imageInput" accept="image/*" hidden>
        </label>
        <input type="file" id="croppedImageInput" name="psychologist_profile[profile_img]" hidden>
      </div>
    </div>

   <!-- Gender -->
    <div class="column is-half">
      <div class="field">
        <%= form.label :gender, class: "label" %>
        <div class="control">
          <div class="select">
            <%= form.select :gender, 
                PsychologistProfile.genders.map { |key, value| [key.humanize, key] },
                { selected: 'unspecified' },
                class: "input" %>
          </div>
        </div>
      </div>
    </div>

    <!-- Education -->
    <div class="column is-half">
      <div class="field">
        <%= form.label :education, class: "label" %>
        <div class="control">
          <%= form.text_field :education, class: "input" %>
        </div>
      </div>
    </div>
    <!-- Specialties -->
    <div class="column is-one-third">
      <div class="field">
        <%= form.label :specialty_ids, "Select Specialties", class: "label" %>
        <div class="control">
          <div class="select is-multiple">
            <%= form.collection_select :specialty_ids, Specialty.all, :id, :name, {}, { multiple: true, size: 5, class: "input" } %>
          </div>
        </div>
      </div>
    </div>

    <!-- Client Types -->
    <div class="column is-one-third">
      <div class="field">
        <%= form.label :client_type_ids, "Select Client Types", class: "label" %>
        <div class="control">
          <div class="select is-multiple">
            <%= form.collection_select :client_type_ids, ClientType.all, :id, :name, {}, { multiple: true, size: 5, class: "input" } %>
          </div>
        </div>
      </div>
    </div>




    <!-- Issues -->
    <div class="column is-one-third">
      <div class="field">
        <%= form.label :issue_ids, "Select Issues", class: "label" %>
        <div class="control">
          <div class="select is-multiple">
            <%= form.collection_select :issue_ids, Issue.all, :id, :name, {}, { multiple: true, size: 5, class: "input" } %>
          </div>
        </div>
      </div>
    </div>


    <!-- Standard Rate -->
<div class="column is-one-quarter">
  <div class="field">
    <%= form.label :standard_rate, "Standard Rate", class: "label" %>
    <div class="control">
      <%= form.number_field :standard_rate, step: 0.01, min: 0, class: "input", placeholder: "e.g. 100.00" %>
    </div>
  </div>
</div>

<!-- Currency -->
<div class="column is-one-quarter">
  <div class="field">
    <%= form.label :currency, "Currency", class: "label" %>
    <div class="control">
      <div class="select is-fullwidth">
        <%= form.select :currency, options_for_select(['KGS', 'KZT', 'UZS', 'USD', 'RUB'], selected: @psychologist_profile.currency), { include_blank: 'Select Currency' } %>
      </div>
    </div>
  </div>
</div>

    <!-- Years of Experience -->
    <div class="column is-half">
      <div class="field">
        <%= form.label :years_of_experience, class: "label" %>
        <div class="control">
          <%= form.number_field :years_of_experience, class: "input" %>
        </div>
      </div>
    </div>



    <!-- Country -->
<div class="column is-half">
  <div class="field">
    <%= form.label :country, class: "label" %>
    <div class="control">
      <div class="select is-fullwidth">
        <%= form.select :country,
            options_for_select(
              countries_with_cities.map { |c| c['name'] },
              selected: @psychologist_profile.country
            ),
            { include_blank: 'Select Country' },
            { class: 'input', id: 'country-select' }
        %>
      </div>
    </div>
  </div>
</div>

<!-- City -->
<div class="column is-half">
  <div class="field">
    <%= form.label :city, class: "label" %>
    <div class="control">
      <div class="select is-fullwidth">
        <%= form.select :city,
            options_for_select(
              [], # Empty by default
              selected: @psychologist_profile.city
            ),
            { include_blank: 'Select City' },
            { class: 'input', id: 'city-select', disabled: true }
        %>
      </div>
    </div>
  </div>
</div>



    <!-- Address -->
    <div class="column is-full">
      <div class="field">
        <%= form.label :address, class: "label" %>
        <div class="control">
          <%= form.text_field :address, class: "input" %>
        </div>
      </div>
    </div>

    <!-- Contact Information -->
    <div class="column is-half">
      <div class="field">
        <%= form.label :telegram, class: "label" %>
        <div class="control">
          <%= form.text_field :telegram, class: "input" %>
        </div>
      </div>
    </div>

    <div class="column is-half">
      <div class="field">
        <%= form.label :whatsapp, class: "label" %>
        <div class="control">
          <%= form.text_field :whatsapp, class: "input" %>
        </div>
      </div>
    </div>


    <!-- Additional Phones -->

            <div class="column is-one-third">
      <div class="field">
        <%= form.label :contact_phone, class: "label" %>
        <div class="control">
          <%= form.text_field :contact_phone, class: "input" %>
        </div>
      </div>
    </div>

    <div class="column is-one-third">
      <div class="field">
        <%= form.label :contact_phone2, class: "label" %>
        <div class="control">
          <%= form.text_field :contact_phone2, class: "input" %>
        </div>
      </div>
    </div>

    <div class="column is-one-third">
      <div class="field">
        <%= form.label :contact_phone3, class: "label" %>
        <div class="control">
          <%= form.text_field :contact_phone3, class: "input" %>
        </div>
      </div>
    </div>



 

    <!-- Checkboxes -->
    <div class="column is-half">
      <div class="field">
        <label class="checkbox">
          <%= form.check_box :in_person, class: "checkbox" %>
          <%= form.label :in_person, "In person services", class: "checkbox" %>
        </label>
      </div>
    </div>

    <div class="column is-half">
      <div class="field">
        <label class="checkbox">
          <%= form.check_box :online, class: "checkbox" %>
          <%= form.label :online, "Online Services?", class: "checkbox" %>
        </label>
      </div>
    </div>


    <div class="column is-12">
  <div class="field">
    <div class="control">
      <label class="checkbox">
<%= form.collection_select :language_ids, Language.all, :id, :name,
      { prompt: "Select languages", selected: form.object.language_ids },
      { multiple: true, class: "select is-multiple" } %>
      </label>
    </div>
  </div>
</div>
    <!-- Submit Button -->
    <div class="column is-full">
      <div class="field">
        <div class="control">
          <%= form.submit class: "button is-primary is-fullwidth" %>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal for cropping -->
  <div class="modal" id="cropModal">
    <div class="modal-background"></div>
    <div class="modal-card">
      <header class="modal-card-head">
        <p class="modal-card-title">Crop Your Image</p>
        <button class="delete" id="closeModal" aria-label="close"></button>
      </header>
      <section class="modal-card-body">
        <img id="imagePreview" style="max-width: 100%;">
      </section>
      <footer class="modal-card-foot">
        <button type="button" class="button is-primary" id="confirmCrop">Confirm</button>
        <button type="button" class="button" id="cancelCrop">Cancel</button>
      </footer>
    </div>
  </div>
<% end %>

<script>
document.addEventListener("turbo:load", function () {
  let cropper;

  const imageInput = document.getElementById("imageInput");
  if (!imageInput) return; 

  const imagePreview = document.getElementById("imagePreview");
  const cropModal = document.getElementById("cropModal");
  const confirmCrop = document.getElementById("confirmCrop");
  const cancelCrop = document.getElementById("cancelCrop");
  const closeModal = document.getElementById("closeModal");
  const croppedImageInput = document.getElementById("croppedImageInput");

  imageInput.addEventListener("change", function () {
    const file = this.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = function (e) {
      imagePreview.src = e.target.result;
      cropModal.classList.add("is-active");

      imagePreview.onload = function () {
        if (cropper) cropper.destroy();
        cropper = new Cropper(imagePreview, {
          aspectRatio: 1,
          viewMode: 1,
        });
      };
    };
    reader.readAsDataURL(file);
  });

  [cancelCrop, closeModal].forEach((btn) => {
    btn.addEventListener("click", () => {
      cropModal.classList.remove("is-active");
      if (cropper) cropper.destroy();
    });
  });

  confirmCrop.addEventListener("click", () => {
    cropper.getCroppedCanvas().toBlob((blob) => {
      const file = new File([blob], "cropped_profile.jpg", { type: "image/jpeg" });

      const dataTransfer = new DataTransfer();
      dataTransfer.items.add(file);
      croppedImageInput.files = dataTransfer.files;

      cropModal.classList.remove("is-active");
      cropper.destroy();
    });
  });
});


confirmCrop.addEventListener("click", () => {
  cropper.getCroppedCanvas().toBlob((blob) => {
    const file = new File([blob], "cropped_profile.jpg", { type: "image/jpeg" });

    // Simulate user selecting this file in hidden input
    const dataTransfer = new DataTransfer();
    dataTransfer.items.add(file);
    croppedImageInput.files = dataTransfer.files;

    // Close modal
    cropModal.classList.remove("is-active");
    cropper.destroy();
  });
});





  document.addEventListener('turbo:load', function() {
    const countrySelect = document.getElementById('country-select');
    const citySelect = document.getElementById('city-select');
    const countryData = <%= raw countries_with_cities.to_json %>;

    if (!countrySelect || !citySelect) return;

    countrySelect.addEventListener('change', function() {
      const selectedCountry = this.value;
      citySelect.innerHTML = '<option value="">Select City</option>';
      citySelect.disabled = !selectedCountry;

      if (selectedCountry) {
        const country = countryData.find(c => c.name === selectedCountry);
        if (country && country.cities) {
          country.cities.forEach(city => {
            const option = new Option(city, city);
            citySelect.add(option);
          });

          // Preselect saved value if it matches one of the cities
          const savedCity = '<%= j @psychologist_profile.city %>';
          if (savedCity) {
            citySelect.value = savedCity;
          }
        }
      }
    });

    // Trigger change if country is preselected
    if (countrySelect.value) {
      countrySelect.dispatchEvent(new Event('change'));
    }
  });


</script>