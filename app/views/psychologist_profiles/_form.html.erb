
<%= form_with(model: psychologist_profile, local: true, html: { multipart: true, class: 'box' }) do |form| %>
  <% if psychologist_profile.errors.any? %>
    <div class="notification is-danger">
      <h2 class="subtitle"><%= pluralize(psychologist_profile.errors.count, "error") %> prohibited this psychologist_profile from being saved:</h2>

      <ul>
        <% psychologist_profile.errors.each do |error| %>
          <li><%= error.full_message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

          <!-- Image Upload -->
    <div class="column is-half">
      <div class="field">
        <label class="button is-link is-light">
          Upload Profile Image
          <input type="file" id="imageInput" accept="image/*" hidden>
        </label>
        <input type="file" id="croppedImageInput" name="psychologist_profile[profile_img]" hidden>
      </div>
    </div>

             <!-- Timezone -->
    <div class="column is-half">
      <div class="field">
        <%= form.label :timezone, "Time Zone" %><br>
        <%= form.select :timezone,
          TZInfo::Timezone.all_identifiers.map { |id|
            # Ensure the time zone object is valid before trying to get its current_period
            begin
              tz = TZInfo::Timezone.get(id)
              # Use current_period to get the offset, handling DST
              offset = tz.current_period.offset.utc_total_offset / 3600.0
              formatted_offset = "GMT#{offset >= 0 ? '+' : ''}#{offset.to_i}" # Use .to_i for cleaner integer offset
              ["(#{formatted_offset}) #{id}", id]
            rescue TZInfo::InvalidTimezoneIdentifier # Handle cases where TZInfo might not recognize an ID
              nil # Skip this ID if it's invalid
            end
          }.compact, # Remove any nil entries from the map
          { prompt: "Select your time zone" }, # Options for the select helper
          { id: "timezone_select", class: "w-full rounded-lg border-gray-300 focus:ring-blue-500 focus:border-blue-500" } # HTML attributes for the select tag
        %>
      </div>
    </div>

  <div class="columns is-multiline">
    <!-- First Name -->
    <div class="column is-half">
      <div class="field">
        <%= form.label :first_name, class: "label" %>
        <div class="control">
          <%= form.text_field :first_name, class: "input" %>
        </div>
      </div>
    </div>

    <!-- Last Name -->
    <div class="column is-half">
      <div class="field">
        <%= form.label :last_name, class: "label" %>
        <div class="control">
          <%= form.text_field :last_name, class: "input" %>
        </div>
      </div>
    </div>

    <!-- About Me -->
    <div class="column is-full">
      <div class="field">
        <%= form.label :about_me, class: "label" %>
        <div class="control">
          <%= form.text_area :about_me, class: "textarea" %>
        </div>
      </div>
    </div>



    <!-- Education -->
    <div class="column is-half">
      <div class="field">
        <%= form.label :education, class: "label" %>
        <div class="control">
          <%= form.text_field :education, class: "input" %>
        </div>
      </div>
    </div>

   <!-- Years of Experience -->
    <div class="column is-half">
      <div class="field">
        <%= form.label :years_of_experience, class: "label" %>
        <div class="control">
          <%= form.number_field :years_of_experience, class: "input" %>
        </div>
      </div>
    </div>





<!-- Client Types -->
<div class="column is-full">
  <div class="field">
    <%= form.label :client_type_ids, "Select Client Types", class: "label" %>
    <div class="control">
      <%= form.collection_select :client_type_ids, ClientType.all, :id, :name, 
          { prompt: "Select client types..." }, 
          { multiple: true, class: "tom-select-client-types", data: { tom_select: true } } %>
    </div>
  </div>
</div>

<div class="column is-full">
  <div class="field">
    <%= form.label :about_clients, "About Clients", class: "label" %>
    <div class="control">
      <%= form.text_area :about_clients, class: "textarea" %>
    </div>
  </div>
</div>

<!-- Issues -->
<div class="column is-full">
  <div class="field">
    <%= form.label :issue_ids, "Select Issues", class: "label" %>
    <div class="control">
      <%= form.collection_select :issue_ids, Issue.all, :id, :name, 
          { prompt: "Select issues..." }, 
          { multiple: true, class: "tom-select-issues", data: { tom_select: true } } %>
    </div>
  </div>
</div>

<div class="column is-full">
  <div class="field">
    <%= form.label :about_issues, "About Issues", class: "label" %>
    <div class="control">
      <%= form.text_area :about_issues, class: "textarea" %>
    </div>
  </div>
</div>




<!-- Specialties -->
<div class="column is-full">
  <div class="field">
    <%= form.label :specialty_ids, "Select Specialties", class: "label" %>
    <div class="control">
      <%= form.collection_select :specialty_ids, Specialty.all, :id, :name, 
          { prompt: "Select specialties..." }, 
          { multiple: true, class: "tom-select-specialties", data: { tom_select: true } } %>
    </div>
  </div>
</div>
<div class="column is-full">
  <div class="field">
    <%= form.label :about_specialties, "About Specialties", class: "label" %>
    <div class="control">
      <%= form.text_area :about_specialties, class: "textarea" %>
    </div>
  </div>
</div>




   <!-- Gender -->
<div class="column is-half">
  <div class="field">
    <%= form.label :gender, class: "label" %>
    <div class="control">
      <div class="select">
        <%= form.select :gender,
            PsychologistProfile.genders.map { |key, value| [key.humanize, key] },
            {}, # No explicit 'selected' option needed here
            class: "input" %>
      </div>
    </div>
  </div>
</div>

    <!-- Standard Rate -->
<div class="column is-one-quarter">
  <div class="field">
    <%= form.label :standard_rate, "Standard Rate", class: "label" %>
    <div class="control">
<%= form.number_field :standard_rate, step: 0.01, min: 0, class: "input", placeholder: "e.g. 100.00" %>
      
    </div>
  </div>
</div>

<!-- Currency -->
<div class="column is-one-quarter">
  <div class="field">
    <%= form.label :currency, "Currency", class: "label" %>
    <div class="control">
      <div class="select is-fullwidth">
        <%= form.select :currency, options_for_select(['KGS', 'KZT', 'UZS', 'USD', 'RUB'], selected: @psychologist_profile.currency), { include_blank: 'Select Currency' } %>
      </div>
    </div>
  </div>
</div>

 
  

    <!-- Country -->
<div class="column is-half">
  <div class="field">
    <%= form.label :country, class: "label" %>
    <div class="control">
      <div class="select is-fullwidth">
        <%= form.select :country,
            options_for_select(
              countries_with_cities.map { |c| c['name'] },
              selected: @psychologist_profile.country
            ),
            { include_blank: 'Select Country' },
            { class: 'input', id: 'country-select' }
        %>
      </div>
    </div>
  </div>
</div>

<!-- City -->
<div class="column is-half">
  <div class="field">
    <%= form.label :city, class: "label" %>
    <div class="control">
      <div class="select is-fullwidth">
        <%= form.select :city,
            options_for_select(
              [], # Empty by default
              selected: @psychologist_profile.city
            ),
            { include_blank: 'Select City' },
            { class: 'input', id: 'city-select', disabled: true }
        %>
      </div>
    </div>
  </div>
</div>


    <!-- Address -->
    <div class="column is-full">
      <div class="field">
        <%= form.label :address, class: "label" %>
        <div class="control">
          <%= form.text_field :address, class: "input" %>
        </div>
      </div>
    </div>


    <!-- Contact Information -->
    <div class="column is-half">
      <div class="field">
        <%= form.label :telegram, class: "label" %>
        <div class="control">
          <%= form.text_field :telegram, class: "input" %>
        </div>
      </div>
    </div>

    <div class="column is-half">
      <div class="field">
        <%= form.label :whatsapp, class: "label" %>
        <div class="control">
          <%= form.text_field :whatsapp, class: "input" %>
        </div>
      </div>
    </div>


    <!-- Additional Phones -->

            <div class="column is-one-third">
      <div class="field">
        <%= form.label :contact_phone, class: "label" %>
        <div class="control">
          <%= form.text_field :contact_phone, class: "input" %>
        </div>
      </div>
    </div>

    <div class="column is-one-third">
      <div class="field">
        <%= form.label :contact_phone2, class: "label" %>
        <div class="control">
          <%= form.text_field :contact_phone2, class: "input" %>
        </div>
      </div>
    </div>

    <div class="column is-one-third">
      <div class="field">
        <%= form.label :contact_phone3, class: "label" %>
        <div class="control">
          <%= form.text_field :contact_phone3, class: "input" %>
        </div>
      </div>
    </div>

    <div class="column is-full">
  <div class="field">
    <%= form.label :primary_contact_method, "Primary Contact Method", class: "label" %>
    <div class="control">
      <div class="select is-fullwidth">
        <%= form.select :primary_contact_method,
            options_for_select(
              [['Telegram', 'telegram'], ['WhatsApp', 'whatsapp'], 
               ['Phone 1', 'contact_phone'], ['Phone 2', 'contact_phone2'], 
               ['Phone 3', 'contact_phone3']],
              selected: @psychologist_profile.primary_contact_method
            ),
            { include_blank: 'Select Primary Contact' } %>
      </div>
    </div>
  </div>
</div>



 

    <!-- Checkboxes -->
    <div class="column is-half">
      <div class="field">
        <label class="checkbox">
          <%= form.check_box :in_person, class: "checkbox" %>
          <%= form.label :in_person, "In person services", class: "checkbox" %>
        </label>
      </div>
    </div>

    <div class="column is-half">
      <div class="field">
        <label class="checkbox">
          <%= form.check_box :online, class: "checkbox" %>
          <%= form.label :online, "Online Services?", class: "checkbox" %>
        </label>
      </div>
    </div>








    <div class="column is-12">
  <div class="field">
    <div class="control">
      <label class="checkbox">
 <%= form.collection_select :language_ids, Language.all, :id, :name,
            { prompt: "Select languages" },
            { multiple: true, class: "tom-select-languages", data: { tom_select: true } } %>
    


      
    </div>
  </div>
</div>
    <!-- Submit Button -->
    <div class="column is-full">
      <div class="field">
        <div class="control">
          <%= form.submit class: "button is-primary is-fullwidth" %>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal for cropping -->
  <div class="modal" id="cropModal">
    <div class="modal-background"></div>
    <div class="modal-card">
      <header class="modal-card-head">
        <p class="modal-card-title">Crop Your Image</p>
        <button class="delete" id="closeModal" aria-label="close"></button>
      </header>
      <section class="modal-card-body">
        <img id="imagePreview" style="max-width: 100%;">
      </section>
      <footer class="modal-card-foot">
        <button type="button" class="button is-primary" id="confirmCrop">Confirm</button>
        <button type="button" class="button" id="cancelCrop">Cancel</button>
      </footer>
    </div>
  </div>
<% end %>

<script>
document.addEventListener("turbo:load", function () {
  let cropper;

  const imageInput = document.getElementById("imageInput");
  if (!imageInput) return; 

  const imagePreview = document.getElementById("imagePreview");
  const cropModal = document.getElementById("cropModal");
  const confirmCrop = document.getElementById("confirmCrop");
  const cancelCrop = document.getElementById("cancelCrop");
  const closeModal = document.getElementById("closeModal");
  const croppedImageInput = document.getElementById("croppedImageInput");

  imageInput.addEventListener("change", function () {
    const file = this.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = function (e) {
      imagePreview.src = e.target.result;
      cropModal.classList.add("is-active");

      imagePreview.onload = function () {
        if (cropper) cropper.destroy();
        cropper = new Cropper(imagePreview, {
          aspectRatio: 1,
          viewMode: 1,
        });
      };
    };
    reader.readAsDataURL(file);
  });

  [cancelCrop, closeModal].forEach((btn) => {
    btn.addEventListener("click", () => {
      cropModal.classList.remove("is-active");
      if (cropper) cropper.destroy();
    });
  });

  confirmCrop.addEventListener("click", () => {
    cropper.getCroppedCanvas().toBlob((blob) => {
      const file = new File([blob], "cropped_profile.jpg", { type: "image/jpeg" });

      const dataTransfer = new DataTransfer();
      dataTransfer.items.add(file);
      croppedImageInput.files = dataTransfer.files;

      cropModal.classList.remove("is-active");
      cropper.destroy();
    });
  });
});


confirmCrop.addEventListener("click", () => {
  cropper.getCroppedCanvas().toBlob((blob) => {
    const file = new File([blob], "cropped_profile.jpg", { type: "image/jpeg" });

    // Simulate user selecting this file in hidden input
    const dataTransfer = new DataTransfer();
    dataTransfer.items.add(file);
    croppedImageInput.files = dataTransfer.files;

    // Close modal
    cropModal.classList.remove("is-active");
    cropper.destroy();
  });
});





  document.addEventListener('turbo:load', function() {
    const countrySelect = document.getElementById('country-select');
    const citySelect = document.getElementById('city-select');
    const countryData = <%= raw countries_with_cities.to_json %>;

    if (!countrySelect || !citySelect) return;

   countrySelect.addEventListener('change', function () {
      const selectedCountry = this.value;

      // Clear and reset city select
      citySelect.innerHTML = ''; // clear all
      citySelect.disabled = !selectedCountry;

      // Add 'Select City' placeholder manually
      const placeholder = document.createElement('option');
      placeholder.value = '';
      placeholder.textContent = 'Select City';
      placeholder.disabled = true;
      placeholder.selected = true;
      citySelect.appendChild(placeholder);

      if (selectedCountry) {
        const country = countryData.find(c => c.name === selectedCountry);
        if (country && country.cities) {
          country.cities.forEach(city => {
            const option = new Option(city, city);
            citySelect.add(option);
          });

          // Set saved city if it's valid
          const savedCity = '<%= j @psychologist_profile.city %>';
          if (savedCity && country.cities.includes(savedCity)) {
            citySelect.value = savedCity;
            placeholder.selected = false; // unselect placeholder
          }
        }
      }
    });

    // Trigger change if country is preselected
    if (countrySelect.value) {
      countrySelect.dispatchEvent(new Event('change'));
    }


  const commonConfig = {
    plugins: ['remove_button'],
    maxItems: null,             // allow multiple selections (for these common ones)
    persist: false,
    create: false,
    closeAfterSelect: false,    // keep dropdown open after selection
  };

  // Initialize TomSelect for your existing elements
  document.querySelectorAll('.tom-select-issues, .tom-select-specialties, .tom-select-client-types, .tom-select-languages')
    .forEach((el) => {
      if (!el.tomselect) { // Prevent re-initialization
        new TomSelect(el, {
          ...commonConfig, // Spread the common configuration
          placeholder: el.getAttribute('placeholder') || 'Select...'
        });
      }
    });

  // --- Specific Configuration and Initialization for Time Zone Select ---

  const timezoneSelectElement = document.getElementById('timezone_select');

  if (timezoneSelectElement && !timezoneSelectElement.tomselect) { // Check if element exists and not already initialized
    const timezoneConfig = {
      // Inherit some common settings if desired, or define them specifically
      // For a single select, maxItems should be 1
      maxItems: 1,
      persist: false,
      create: false,
      // Specific plugins for the timezone select
      plugins: ['dropdown_input'], // Ensures the search input is always visible
      sortField: {
        field: "text", // Sort by the displayed text
        direction: "asc"
      },
      placeholder: timezoneSelectElement.getAttribute('data-placeholder') || "Select your time zone", // Use data-placeholder or a default
      allowEmptyOption: true, // Allow the prompt option
    };

    // Initialize Tom Select for the timezone dropdown
    const tomSelectInstance = new TomSelect(timezoneSelectElement, timezoneConfig);

    // Attempt to auto-detect the user's browser timezone and set the dropdown value
    if (typeof Intl !== 'undefined' && typeof Intl.DateTimeFormat !== 'undefined') {
      try {
        const browserTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
        console.log("Detected browser time zone:", browserTimeZone);

        // Set the value using the Tom Select instance's API
        // Tom Select will only set the value if it's a valid option
        tomSelectInstance.setValue(browserTimeZone);
        console.log("Time zone set to browser default:", browserTimeZone);

      } catch (error) {
        console.error("Error detecting browser time zone:", error);
      }
    } else {
      console.warn("Intl.DateTimeFormat API not supported. Cannot auto-detect time zone.");
    }
  }



  });


</script>

