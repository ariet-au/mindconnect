<%= form_with(model: psychologist_profile, local: true, html: { multipart: true, class: 'box' }) do |form| %>
  <% if psychologist_profile.errors.any? %>
    <div class="notification is-danger">
      <h2 class="subtitle"><%= t('psychologist_profile.errors.header', count: psychologist_profile.errors.count) %></h2>
      <ul>
        <% psychologist_profile.errors.each do |error| %>
          <li><%= error.full_message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="columns is-multiline">
    <%# --- Basic Information Section --- %>
    <div class="column is-full">
      <h3 class="title is-4"><%= t('psychologist_profile.sections.basic_information') %></h3>
      <hr>
    </div>

    <div class="column is-half">
      <div class="field">
        <label class="button is-link is-light">
          <%= t('psychologist_profile.labels.upload_profile_image') %>
          <input type="file" id="imageInput" accept="image/*" hidden>
        </label>
        <input type="file" id="croppedImageInput" name="psychologist_profile[profile_img]" hidden>
      </div>
    </div>

    <div class="column is-half">
      <div class="field">
        <%= form.label :timezone, t('psychologist_profile.labels.timezone'), class: "label" %><br>
        <%= form.select :timezone,
          TZInfo::Timezone.all_identifiers.map { |id|
            begin
              tz = TZInfo::Timezone.get(id)
              offset = tz.current_period.offset.utc_total_offset / 3600.0
              formatted_offset = "GMT#{offset >= 0 ? '+' : ''}#{offset.to_i}"
              ["(#{formatted_offset}) #{id}", id]
            rescue TZInfo::InvalidTimezoneIdentifier
              nil
            end
          }.compact,
          { prompt: t('psychologist_profile.prompts.select_timezone') },
          { id: "timezone_select", class: "w-full rounded-lg border-gray-300 focus:ring-blue-500 focus:border-blue-500" }
        %>
      </div>
    </div>

    <div class="column is-half">
      <div class="field">
        <%= form.label :first_name, t('psychologist_profile.labels.first_name'), class: "label" %>
        <div class="control">
          <%= form.text_field :first_name, class: "input" %>
        </div>
      </div>
    </div>

    <div class="column is-half">
      <div class="field">
        <%= form.label :last_name, t('psychologist_profile.labels.last_name'), class: "label" %>
        <div class="control">
          <%= form.text_field :last_name, class: "input" %>
        </div>
      </div>
    </div>

    <div class="column is-full">
      <div class="field">
        <%= form.label :about_me, t('psychologist_profile.labels.about_me'), class: "label" %>
        <div class="control">
          <%= form.text_area :about_me, class: "textarea" %>
        </div>
      </div>

      <div class="field">
        <%= form.label :youtube_video_url, t('psychologist_profile.labels.youtube_video_url'), class: "label" %>
        <div class="control">
          <%= form.text_field :youtube_video_url, class: "input", placeholder: "https://www.youtube.com/watch?v=abc123xyz" %>
        </div>
        <% if form.object.errors[:youtube_video_url].any? %>
          <p class="help is-danger"><%= form.object.errors[:youtube_video_url].first %></p>
        <% end %>
      </div>
    </div>

    <div class="column is-full">
      <h3 class="title is-4"><%= t('psychologist_profile.sections.professional_details') %></h3>
      <hr>
    </div>

    <div class="column is-half">
      <div class="field">
        <%= form.label :years_of_experience, t('psychologist_profile.labels.years_of_experience'), class: "label" %>
        <div class="control">
          <%= form.number_field :years_of_experience, class: "input" %>
        </div>
      </div>
    </div>

    <div class="column is-one-quarter">
      <div class="field">
        <%= form.label :standard_rate, t('psychologist_profile.labels.standard_rate'), class: "label" %>
        <div class="control">
          <%= form.number_field :standard_rate, step: 0.01, min: 0, class: "input", placeholder: t('psychologist_profile.placeholders.standard_rate') %>
        </div>
      </div>
    </div>

    <div class="column is-one-quarter">
      <div class="field">
        <%= form.label :currency, t('psychologist_profile.labels.currency'), class: "label" %>
        <div class="control">
          <div class="select is-fullwidth">
            <%= form.select :currency, options_for_select(['KGS', 'KZT', 'UZS', 'USD', 'RUB'], selected: @psychologist_profile.currency), { include_blank: t('psychologist_profile.prompts.select_currency') } %>
          </div>
        </div>
      </div>
    </div>
<div class="column is-full">
      <h2 class="section-title">
        <i class="fas fa-graduation-cap icon-about"></i>
        <%= t('psychologist_profile.sections.education_history') %>
      </h2>
      <div class="section-content" id="educations-container">
        <%= form.fields_for :educations do |education_fields| %>
          <%= render "educations/form", f: education_fields %>
        <% end %>
      </div>
      <button type="button" class="button is-info is-light mt-4" id="add-education-button">
        <span class="icon"><i class="fas fa-plus"></i></span>
        <span><%= t('psychologist_profile.buttons.add_education') %></span>
      </button>
    </div>


    <div class="column is-full">
      <h3 class="title is-4"><%= t('psychologist_profile.sections.client_issue_details') %></h3>
      <hr>
    </div>



    <div class="column is-full">
      <div class="field">
        <%= form.label :issue_ids, t('psychologist_profile.labels.select_issues'), class: "label" %>
        <div class="control">
          <%= form.collection_select :issue_ids, Issue.all, :id, :name,
            { prompt: t('psychologist_profile.prompts.select_issues') },
            { multiple: true, class: "tom-select-issues", data: { tom_select: true } } %>
        </div>
      </div>
    </div>

    <div class="column is-full">
      <div class="field">
        <%= form.label :about_issues, t('psychologist_profile.labels.about_issues'), class: "label" %>
        <div class="control">
          <%= form.text_area :about_issues, class: "textarea" %>
        </div>
      </div>
    </div>

        <div class="column is-full">
      <div class="field">
        <%= form.label :client_type_ids, t('psychologist_profile.labels.select_client_types'), class: "label" %>
        <div class="control">
          <%= form.collection_select :client_type_ids, ClientType.all, :id, :name,
            { prompt: t('psychologist_profile.prompts.select_client_types') },
            { multiple: true, class: "tom-select-client-types", data: { tom_select: true } } %>
        </div>
      </div>
    </div>

    <div class="column is-full">
      <div class="field">
        <%= form.label :about_clients, t('psychologist_profile.labels.about_clients'), class: "label" %>
        <div class="control">
          <%= form.text_area :about_clients, class: "textarea" %>
        </div>
      </div>
    </div>

    <div class="column is-full">
      <div class="field">
        <%= form.label :specialty_ids, t('psychologist_profile.labels.select_specialties'), class: "label" %>
        <div class="control">
          <%= form.collection_select :specialty_ids, Specialty.all, :id, :name,
            { prompt: t('psychologist_profile.prompts.select_specialties') },
            { multiple: true, class: "tom-select-specialties", data: { tom_select: true } } %>
        </div>
      </div>
    </div>
    <div class="column is-full">
      <div class="field">
        <%= form.label :about_specialties, t('psychologist_profile.labels.about_specialties'), class: "label" %>
        <div class="control">
          <%= form.text_area :about_specialties, class: "textarea" %>
        </div>
      </div>
    </div>

    <div class="column is-full">
      <h3 class="title is-4"><%= t('psychologist_profile.sections.contact_service_details') %></h3>
      <hr>
    </div>
<div class="column is-quarter">
  <div class="field">
    <%= form.label :religion, t('psychologist_profile.labels.religion'), class: "label" %>
    <div class="control">
      <div class="select is-fullwidth">
        <%= form.select :religion,
          options_for_select([
            [t('psychologist_profile.religion_options.non_religious'), 'Non-religious'],
            [t('psychologist_profile.religion_options.muslim'), 'Muslim'],
            [t('psychologist_profile.religion_options.christian'), 'Christian'],
            [t('psychologist_profile.religion_options.other_religions'), 'Other religions']
          ], selected: form.object.religion),
          {},
          class: "input" %>
      </div>
    </div>
  </div>
</div>

    <div class="column is-quarter">
      <div class="field">
        <%= form.label :gender, t('psychologist_profile.labels.gender'), class: "label" %>
        <div class="control">
          <div class="select">
            <%= form.select :gender,
              PsychologistProfile.genders.map { |key, value| [t("psychologist_profile.gender_options.#{key}"), key] },
              {},
              class: "input" %>
          </div>
        </div>
      </div>
    </div>

    <div class="column is-half">
      <div class="field">
        <%= form.label :profile_url, t('psychologist_profile.labels.profile_url'), class: "label" %>
        <div class="control">
          <div >
             <%= form.text_field :profile_url, class: "input", type: "text", pattern: nil %>
          </div>
        </div>
      </div>
    </div>

    <div class="column is-half">
      <div class="field">
        <%= form.label :country, t('psychologist_profile.labels.country'), class: "label" %>
        <div class="control">
          <div class="select is-fullwidth">
            <%= form.select :country,
              options_for_select(
                countries_with_cities.map { |c| c['name'] },
                selected: @psychologist_profile.country
              ),
              { include_blank: t('psychologist_profile.prompts.select_country') },
              { class: 'input', id: 'country-select' }
            %>
          </div>
        </div>
      </div>
    </div>

    <div class="column is-half">
      <div class="field">
        <%= form.label :city, t('psychologist_profile.labels.city'), class: "label" %>
        <div class="control">
          <div class="select is-fullwidth">
            <%= form.select :city,
              options_for_select(
                [],
                selected: @psychologist_profile.city
              ),
              { include_blank: t('psychologist_profile.prompts.select_city') },
              { class: 'input', id: 'city-select', disabled: true }
            %>
          </div>
        </div>
      </div>
    </div>

    <div class="column is-full">
      <div class="field">
        <%= form.label :address, t('psychologist_profile.labels.address'), class: "label" %>
        <div class="control">
          <%= form.text_field :address, class: "input" %>
        </div>
      </div>
    </div>

    <div class="column is-half">
      <div class="field">
        <%= form.label :telegram, t('psychologist_profile.labels.telegram'), class: "label" %>
        <div class="control">
          <%= form.text_field :telegram, class: "input" %>
        </div>
      </div>
    </div>

    <div class="column is-half">
      <div class="field">
        <%= form.label :whatsapp, t('psychologist_profile.labels.whatsapp'), class: "label" %>
        <div class="control">
          <%= form.text_field :whatsapp, class: "input" %>
        </div>
      </div>
    </div>

    <div class="column is-one-third">
      <div class="field">
        <%= form.label :contact_phone, t('psychologist_profile.labels.contact_phone1'), class: "label" %>
        <div class="control">
          <%= form.text_field :contact_phone, class: "input" %>
        </div>
      </div>
    </div>

    <div class="column is-one-third">
      <div class="field">
        <%= form.label :contact_phone2, t('psychologist_profile.labels.contact_phone2'), class: "label" %>
        <div class="control">
          <%= form.text_field :contact_phone2, class: "input" %>
        </div>
      </div>
    </div>

    <div class="column is-one-third">
      <div class="field">
        <%= form.label :contact_phone3, t('psychologist_profile.labels.contact_phone3'), class: "label" %>
        <div class="control">
          <%= form.text_field :contact_phone3, class: "input" %>
        </div>
      </div>
    </div>

    <div class="column is-full">
      <div class="field">
        <%= form.label :primary_contact_method, t('psychologist_profile.labels.primary_contact_method'), class: "label" %>
        <div class="control">
          <div class="select is-fullwidth">
            <%= form.select :primary_contact_method,
              options_for_select(
                [
                  [t('psychologist_profile.contact_methods.telegram'), 'telegram'],
                  [t('psychologist_profile.contact_methods.whatsapp'), 'whatsapp'],
                  [t('psychologist_profile.contact_methods.phone1'), 'contact_phone'],
                  [t('psychologist_profile.contact_methods.phone2'), 'contact_phone2'],
                  [t('psychologist_profile.contact_methods.phone3'), 'contact_phone3']
                ],
                selected: @psychologist_profile.primary_contact_method
              ),
              { include_blank: t('psychologist_profile.prompts.select_primary_contact') } %>
          </div>
        </div>
      </div>
    </div>

    <div class="column is-half">
      <div class="field">
        <label class="checkbox">
          <%= form.check_box :in_person, class: "checkbox" %>
          <%= form.label :in_person, t('psychologist_profile.labels.in_person_services'), class: "checkbox" %>
        </label>
      </div>
    </div>

    <div class="column is-half">
      <div class="field">
        <label class="checkbox">
          <%= form.check_box :online, class: "checkbox" %>
          <%= form.label :online, t('psychologist_profile.labels.online_services'), class: "checkbox" %>
        </label>
      </div>
    </div>

   <div class="column is-12">
    <div class="field">
      <%= form.label :language_ids, t('psychologist_profile.labels.select_languages'), class: "label" %>
      <div class="control">
        <%= form.collection_select :language_ids, Language.all, :id, :name,
          { prompt: t('psychologist_profile.prompts.select_languages') },
          { multiple: true, class: "tom-select-languages", data: { tom_select: true } } %>
      </div>
    </div>
  </div>



<div class="column is-full">
  <div class="field">
    <%= form.label :featured_service_id, t('psychologist_profile.labels.featured_service'), class: "label" %>
    <div class="control">
      <%= form.collection_select :featured_service_id, @psychologist_profile.user.services, :id, :name, { prompt: t('psychologist_profile.prompts.select_featured_service') }, { class: "form-control" } %>
    </div>
  </div>
</div>








  <div class="modal" id="cropModal">
    <div class="modal-background"></div>
    <div class="modal-card">
      <header class="modal-card-head">
        <p class="modal-card-title"><%= t('psychologist_profile.modal.crop_image_title') %></p>
        <button class="delete" id="closeModal" aria-label="<%= t('psychologist_profile.modal.close_button_aria') %>"></button>
      </header>
      <section class="modal-card-body">
        <img id="imagePreview" style="max-width: 100%;">
      </section>
      <footer class="modal-card-foot">
        <button type="button" class="button is-primary" id="confirmCrop"><%= t('psychologist_profile.modal.confirm_button') %></button>
        <button type="button" class="button" id="cancelCrop"><%= t('psychologist_profile.modal.cancel_button') %></button>
      </footer>
    </div>
  </div>

  
  <% education_fields_template_content = capture do %>
    <%= form.fields_for :educations, Education.new, child_index: "NEW_RECORD" do |education_fields| %>
      <%= render "educations/form", f: education_fields %>
    <% end %>
  <% end %>


  <template id="education-fields-template">
    <%= education_fields_template_content %>
  </template>

  <div class="column is-full">
  <div class="field">
    <div class="control">
      <%= form.submit t('psychologist_profile.buttons.submit'), class: "button is-primary is-fullwidth" %>
    </div>
  </div>
</div>

<% end %>




<script>
document.addEventListener("turbo:load", function () {
  let cropper;

  const imageInput = document.getElementById("imageInput");
  if (!imageInput) return; 

  const imagePreview = document.getElementById("imagePreview");
  const cropModal = document.getElementById("cropModal");
  const confirmCrop = document.getElementById("confirmCrop");
  const cancelCrop = document.getElementById("cancelCrop");
  const closeModal = document.getElementById("closeModal");
  const croppedImageInput = document.getElementById("croppedImageInput");

  imageInput.addEventListener("change", function () {
    const file = this.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = function (e) {
      imagePreview.src = e.target.result;
      cropModal.classList.add("is-active");

      imagePreview.onload = function () {
        if (cropper) cropper.destroy();
        cropper = new Cropper(imagePreview, {
          aspectRatio: 1,
          viewMode: 1,
        });
      };
    };
    reader.readAsDataURL(file);
  });

  [cancelCrop, closeModal].forEach((btn) => {
    btn.addEventListener("click", () => {
      cropModal.classList.remove("is-active");
      if (cropper) cropper.destroy();
    });
  });

  confirmCrop.addEventListener("click", () => {
    cropper.getCroppedCanvas().toBlob((blob) => {
      const file = new File([blob], "cropped_profile.jpg", { type: "image/jpeg" });

      const dataTransfer = new DataTransfer();
      dataTransfer.items.add(file);
      croppedImageInput.files = dataTransfer.files;

      cropModal.classList.remove("is-active");
      cropper.destroy();
    });
  });
});


confirmCrop.addEventListener("click", () => {
  cropper.getCroppedCanvas().toBlob((blob) => {
    const file = new File([blob], "cropped_profile.jpg", { type: "image/jpeg" });

    // Simulate user selecting this file in hidden input
    const dataTransfer = new DataTransfer();
    dataTransfer.items.add(file);
    croppedImageInput.files = dataTransfer.files;

    // Close modal
    cropModal.classList.remove("is-active");
    cropper.destroy();
  });
});







  document.addEventListener('turbo:load', function() {

      

    // Dynamic Education Fields Logic
    const addEducationButton = document.getElementById('add-education-button');
    const educationsContainer = document.getElementById('educations-container');
    const educationTemplate = document.getElementById('education-fields-template');


    if (addEducationButton && educationsContainer && educationTemplate) {
      
      // add remove button
      document.addEventListener('click', function(event) {
        if (event.target.closest('.remove-education-button')) {
          event.preventDefault();
          const educationBox = event.target.closest('.box.mb-4');
          if (educationBox) {
            const destroyField = educationBox.querySelector('input[name*="_destroy"]');
            if (destroyField) {
              destroyField.value = '1'; // mark for deletion
              educationBox.style.display = 'none';
            } else {
              educationBox.remove(); // for new records
            }
          }
        }
      });

      //add remove button
      addEducationButton.addEventListener('click', (event) => {
        event.preventDefault(); // Prevent form submission


        // Get the innerHTML from the template, which is already processed ERB
        const content = educationTemplate.innerHTML.replace(/NEW_RECORD/g, new Date().getTime());
        const newDiv = document.createElement('div');
        newDiv.innerHTML = content;
        educationsContainer.appendChild(newDiv);


        // Reinitialize Tom Select for newly added fields if needed
        // (Assuming Tom Select is initialized on '.tom-select-...' classes)
        // If your education partial contains Tom Select fields, you'd need to reinitialize them here.
        // Example: new TomSelect(newDiv.querySelector('.tom-select-education-field'));
      });


      // Event listener for removing education fields (delegated)
      educationsContainer.addEventListener('click', (event) => {
        if (event.target.matches('input[type="checkbox"][name*="_destroy"]')) {
          const checkbox = event.target;
          const educationBox = checkbox.closest('.box.mb-4'); // Find the parent .box for the education
          if (educationBox) {
            if (checkbox.checked) {
              educationBox.style.display = 'none'; // Hide the box when marked for destruction
            } else {
              educationBox.style.display = 'block'; // Show if unchecked
            }
          }
        }
      });
    }


    const countrySelect = document.getElementById('country-select');
    const citySelect = document.getElementById('city-select');
    const countryData = <%= raw countries_with_cities.to_json %>;

    if (!countrySelect || !citySelect) return;

   countrySelect.addEventListener('change', function () {
      const selectedCountry = this.value;

      // Clear and reset city select
      citySelect.innerHTML = ''; // clear all
      citySelect.disabled = !selectedCountry;

      // Add 'Select City' placeholder manually
      const placeholder = document.createElement('option');
      placeholder.value = '';
      placeholder.textContent = 'Select City';
      placeholder.disabled = true;
      placeholder.selected = true;
      citySelect.appendChild(placeholder);

      if (selectedCountry) {
        const country = countryData.find(c => c.name === selectedCountry);
        if (country && country.cities) {
          country.cities.forEach(city => {
            const option = new Option(city, city);
            citySelect.add(option);
          });

          // Set saved city if it's valid
          const savedCity = '<%= j @psychologist_profile.city %>';
          if (savedCity && country.cities.includes(savedCity)) {
            citySelect.value = savedCity;
            placeholder.selected = false; // unselect placeholder
          }
        }
      }
    });

    // Trigger change if country is preselected
    if (countrySelect.value) {
      countrySelect.dispatchEvent(new Event('change'));
    }


  const commonConfig = {
    plugins: ['remove_button'],
    maxItems: null,             // allow multiple selections (for these common ones)
    persist: false,
    create: false,
    closeAfterSelect: false,    // keep dropdown open after selection
  };

  // Initialize TomSelect for your existing elements
  document.querySelectorAll('.tom-select-issues, .tom-select-specialties, .tom-select-client-types, .tom-select-languages')
    .forEach((el) => {
      if (!el.tomselect) { // Prevent re-initialization
        new TomSelect(el, {
          ...commonConfig, // Spread the common configuration
          placeholder: el.getAttribute('placeholder') || 'Select...'
        });
      }
    });

  // --- Specific Configuration and Initialization for Time Zone Select ---

  const timezoneSelectElement = document.getElementById('timezone_select');

  if (timezoneSelectElement && !timezoneSelectElement.tomselect) { // Check if element exists and not already initialized
    const timezoneConfig = {
      // Inherit some common settings if desired, or define them specifically
      // For a single select, maxItems should be 1
      maxItems: 1,
      persist: false,
      create: false,
      // Specific plugins for the timezone select
      plugins: ['dropdown_input'], // Ensures the search input is always visible
      sortField: {
        field: "text", // Sort by the displayed text
        direction: "asc"
      },
      placeholder: timezoneSelectElement.getAttribute('data-placeholder') || "Select your time zone", // Use data-placeholder or a default
      allowEmptyOption: true, // Allow the prompt option
    };

    // Initialize Tom Select for the timezone dropdown
    const tomSelectInstance = new TomSelect(timezoneSelectElement, timezoneConfig);

    // Attempt to auto-detect the user's browser timezone and set the dropdown value
    if (typeof Intl !== 'undefined' && typeof Intl.DateTimeFormat !== 'undefined') {
      try {
        const browserTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
        console.log("Detected browser time zone:", browserTimeZone);

        // Set the value using the Tom Select instance's API
        // Tom Select will only set the value if it's a valid option
        tomSelectInstance.setValue(browserTimeZone);
        console.log("Time zone set to browser default:", browserTimeZone);

      } catch (error) {
        console.error("Error detecting browser time zone:", error);
      }
    } else {
      console.warn("Intl.DateTimeFormat API not supported. Cannot auto-detect time zone.");
    }
  }


  



  });


</script>

