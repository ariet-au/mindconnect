     <% profile.issues.each do |issue| %>
                    <span class="tag is-warning is-light"><%= issue.name %></span>
                  <% end %>


                         <% if profile.languages.any? %>
        <div class="tags are-small mt-2">
          <% profile.languages.each do |language| %>
            <%# Translate the language name using the 'spoken_languages' key %>
            <span class="tag is-info is-light"><%= t("spoken_languages.#{language.name}") %></span> <%# <--- MODIFIED LINE %>
          <% end %>
        </div>
      <% end %>
            

<script>
  document.addEventListener('turbo:load', function () {
    // Toggle contact info
    document.querySelectorAll('.contact-button').forEach(function (button) {
      button.addEventListener('click', function (e) {
        e.preventDefault();
        const targetId = this.getAttribute('data-target');
        const contactInfo = document.getElementById(targetId);
        if (contactInfo) {
          contactInfo.style.display = contactInfo.style.display === 'none' ? 'block' : 'none';
        }
      });
    });

    // Clear filters
    document.getElementById('clear-all-filters')?.addEventListener('click', function (e) {
      e.preventDefault();
      const form = document.querySelector('.search-form');
      const url = new URL(form.action);
      form.reset();
      window.location.href = url.pathname;
    });

    document.querySelectorAll(".tom-select").forEach((el) => {
      // Skip initialization for country and city selects
      if (el.id === 'search-country' || el.id === 'search-city') return;
      
      // Only initialize if not already initialized
      if (!el.classList.contains('tomselected')) {
        new TomSelect(el, {
          plugins: ['remove_button'],
          persist: false,
          create: false,
          placeholder: el.getAttribute('data-placeholder') || 'Выберите...'
        });
      }
    });

    // TomSelect for issues (with duplicate initialization check)
    const issuesSelect = document.getElementById("issues-select");
    if (issuesSelect && !issuesSelect.classList.contains('tomselected')) {
      new TomSelect(issuesSelect, {
        plugins: ['remove_button'],
        persist: false,
        create: false,
        placeholder: 'Выберите проблемы'

      });
    }

    // TomSelect for specialties (with duplicate initialization check)
    const specialtiesSelect = document.getElementById("specialties-select");
    if (specialtiesSelect && !specialtiesSelect.classList.contains('tomselected')) {
      new TomSelect(specialtiesSelect, {
        plugins: ['remove_button'],
        persist: false,
        create: false,
        placeholder: 'Выберите специальности'
      });
    }

    

  });
</script>

















<script>
 document.addEventListener('turbo:load', function () {
  const clientTypeMap = <%= raw(ClientType.pluck(:name, :id).to_h.to_json) %>;
  
  // Get client_type from URL params instead of just the Rails params
  const urlParams = new URLSearchParams(window.location.search);
  const selectedClientTypeId = urlParams.get('client_type') ? parseInt(urlParams.get('client_type')) : null;

  const input = document.getElementById('client-type-input');
  const display = document.getElementById('selection-display');
  const soloIcon = document.getElementById('solo-icon');
  const pairIcon = document.getElementById('pair-icon');
  const soloTrigger = document.getElementById('solo-trigger');
  const pairTrigger = document.getElementById('pair-trigger');

  function getClientTypeNameById(id) {
    return Object.entries(clientTypeMap).find(([_, val]) => val === id)?.[0];
  }

  function resetIcons() {
    soloTrigger.classList.remove('is-info');
    soloIcon.classList.remove('has-text-white');
    pairTrigger.classList.remove('is-success');
    pairIcon.classList.remove('has-text-white');
  }

  function updateSelection(value, text) {
    const mappedId = clientTypeMap[value];
    if (mappedId === undefined) return;

    input.value = mappedId;

    if (value.startsWith("single_")) {
      resetIcons();
      soloTrigger.classList.add('is-info');
      soloIcon.classList.add('has-text-white');
      display.className = "help has-text-info";
    } else {
      resetIcons();
      pairTrigger.classList.add('is-success');
      pairIcon.classList.add('has-text-white');
      display.className = "help has-text-success";
    }

    display.textContent = `Selected: ${text}`;
  }

  // Set up click handlers
  document.querySelectorAll('.client-option').forEach(btn => {
    btn.addEventListener('click', function () {
      const value = this.dataset.value;
      const label = this.textContent.trim();
      updateSelection(value, label);
    });
  });

  // ✅ Restore selection from URL parameters
  if (selectedClientTypeId !== null) {
    const selectedTypeName = getClientTypeNameById(selectedClientTypeId);
    if (selectedTypeName) {
      const selectedButton = document.querySelector(`[data-value="${selectedTypeName}"]`);
      if (selectedButton) {
        const label = selectedButton.textContent.trim();
        updateSelection(selectedTypeName, label);
      }
    }
  }
});

// Also listen for turbo:render to handle cases where only part of the page updates
document.addEventListener('turbo:render', function() {
  // Re-run the initialization logic
  const event = new Event('turbo:load');
  document.dispatchEvent(event);
});
</script>

