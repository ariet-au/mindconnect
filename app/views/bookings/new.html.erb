
<div class="container is-max-desktop">
  <h2 class="title is-2 has-text-centered">New Booking for <%= @service.name %></h2>
  <p class="subtitle is-5 has-text-centered">Duration: <%= @service.duration_minutes %> minutes</p>

  <% if @booking.errors.any? %>
    <div class="notification is-danger">
      <h4 class="title is-4">
        <%= pluralize(@booking.errors.count, "error") %> prevented this booking from saving:
      </h4>
      <ul>
        <% @booking.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

<%= form_with model: [@psychologist_profile, @booking], class: "box" do |f| %>
    <%= f.hidden_field :service_id, value: @service&.id %>
    <%= f.hidden_field :psychologist_profile_id, value: @psychologist_profile&.id %>
    
    <%= f.hidden_field :start_time, id: 'booking_start_time_utc' %>

    <% if current_user.psychologist? %>
      <div class="field">
        <%= f.label :client_profile_id, "Client Profile (if external)", class: "label" %>
        <div class="control">
          <div class="select is-fullwidth">
            <%# Ensure @external_clients is populated in your controller, e.g., @external_clients = ClientProfile.all %>
            <%= f.collection_select :client_profile_id, @external_clients || ClientProfile.all, :id, :full_name, { include_blank: true }, class: "input" %>
          </div>
        </div>
      </div>
      <div class="field">
        <%= f.label :client_info_id, "Internal Client (for notes)", class: "label" %>
        <div class="control">
          <div class="select is-fullwidth">
            <%# Ensure @internal_clients is populated in your controller, e.g., @internal_clients = InternalClientProfile.all %>
            <%= f.collection_select :client_info_id, @internal_clients || ClientInfo.all, :id, :full_name, { include_blank: true }, class: "input" %>
          </div>
        </div>
      </div>
    <% end %>

    <div class="field">
      <label class="label">Select an Available Time Slot</label>
      <p class="help">
        Displaying times in your local timezone: <strong><%= @display_timezone %></strong>
      </p>

      <% if @available_slots.empty? %>
        <div class="notification is-warning">
          <p>We're sorry, but there are no available slots for this service in the next 14 days. Please check back later.</p>
        </div>
      <% else %>
        <div class="slots-container" style="max-height: 400px; overflow-y: auto; border: 1px solid #dbdbdb; padding: 1rem; border-radius: 4px;">
          <% @available_slots.sort.to_h.each do |date, slots| %>
            <fieldset class="mb-4">
              <legend class="title is-6"><%= date.strftime("%A, %B %d, %Y") %></legend>
              <div class="control is-flex is-flex-wrap-wrap">
                <% slots.each do |slot| %>
                  <div class="mr-2 mb-2">
                    <%= f.radio_button :selected_slot, slot.utc.iso8601,
                        id: "slot_#{slot.to_i}",
                        class: "is-checkradio is-info slot-radio",
                        checked: slot.to_i == @next_available_time&.to_i %>
                    <label for="slot_<%= slot.to_i %>" class="button"><%= slot.in_time_zone(@display_timezone).strftime("%H:%M") %></label>
                  </div>
                <% end %>
              </div>
            </fieldset>
          <% end %>
        </div>
      <% end %>
    </div>
    
    <hr>
    
    <div class="field">
        <%= f.label :end_time, "Calculated End Time", class: "label" %>
        <div class="control">
            <p class="input is-static" id="calculated_end_time_display">
                <% if @booking.end_time %>
                    <%= @booking.end_time.in_time_zone(@display_timezone).strftime("%a %b %d at %H:%M") %>
                <% else %>
                    Please select a start time.
                <% end %>
            </p>
        </div>
        <% if @display_timezone != @psychologist_profile.timezone %>
            <p class="help">
                In psychologist's time (<%= @psychologist_profile.timezone %>): <span id="end_time_display_psych_tz"></span>
            </p>
        <% end %>
    </div>

    <div class="field">
      <%= f.label :notes, class: "label" %>
      <div class="control">
        <%= f.text_area :notes, class: "textarea", placeholder: "Any specific notes for this booking?" %>
      </div>
    </div>
  
    <div class="field is-grouped">
      <div class="control">
        <%= f.submit "Create Booking", class: "button is-primary", disabled: @available_slots.empty? %>
      </div>
      <div class="control">
<%= link_to "Cancel", psychologist_profile_bookings_path(@psychologist_profile), class: "button is-link is-light" %>
      </div>
    </div>
  <% end %>
</div>

<script>
document.addEventListener("turbo:load", function () {
  const durationMinutes = parseInt(<%= @service.duration_minutes %>, 10);
  const displayTz = "<%= @display_timezone || 'UTC' %>"; // Added fallback for displayTz
  const psychTz = "<%= @psychologist_profile.timezone || 'UTC' %>"; // Added fallback for psychTz
  
  const $startHidden = document.getElementById('booking_start_time_utc');
  const $endDisplay = document.getElementById('calculated_end_time_display');
  const $endPsychTzDisplay = document.getElementById('end_time_display_psych_tz');
  const $slotRadios = document.querySelectorAll('.slot-radio');

  const formatOptions = { weekday: 'short', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit', hour12: false };

  function formatDateInTimezone(date, tz) {
    try {
      return new Intl.DateTimeFormat('en-US', { ...formatOptions, timeZone: tz }).format(date);
    } catch (e) {
      console.error("Error formatting date:", e);
      return date.toISOString(); // Fallback
    }
  }

  function updateTimes(startTimeUtcString) {
    if (!startTimeUtcString || !$startHidden) return;

    // Update hidden start time field
    $startHidden.value = startTimeUtcString;
    
    const startTimeUtc = new Date(startTimeUtcString);
    const endTimeUtc = new Date(startTimeUtc.getTime() + durationMinutes * 60000);

    // Update end time displays
    if ($endDisplay) {
      $endDisplay.textContent = formatDateInTimezone(endTimeUtc, displayTz);
    }
    if ($endPsychTzDisplay) {
      $endPsychTzDisplay.textContent = formatDateInTimezone(endTimeUtc, psychTz);
    }
  }

  // Add event listener to all radio buttons
  $slotRadios.forEach(radio => {
    radio.addEventListener('change', (event) => {
      if (event.target.checked) {
        updateTimes(event.target.value);
      }
    });
  });

  // Initial update based on the default checked radio
  const initiallyChecked = document.querySelector('.slot-radio:checked');
  if (initiallyChecked) {
    updateTimes(initiallyChecked.value);
  }
});

<%= content_tag :div, '', id: 'browser_timezone_data', data: { timezone: Time.zone.name } %>

<%= javascript_tag do %>
  document.addEventListener('turbo:load', function () {
    const browserTz = Intl.DateTimeFormat().resolvedOptions().timeZone;
    const serverTz = document.getElementById('browser_timezone_data')?.dataset.timezone;

    if (serverTz && serverTz !== browserTz) {
      fetch('/set_timezone', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector("meta[name='csrf-token']").content
        },
        body: JSON.stringify({ timezone: browserTz })
      });
    }
  });
<% end %>
