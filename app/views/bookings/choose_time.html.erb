<div class="container is-max-desktop mt-6">
  <h1 class="title has-text-centered mb-4">Choose a Time</h1>

  <div class="box p-5 has-shadow">
    <p class="has-text-centered has-text-grey-light mb-4">
      Select a date to see available times. Dates with availability are marked.
    </p>

   <div class="calendar-container">
    <% (@time_slots.keys.min..@time_slots.keys.min + 20).each do |date| %>
      <% has_availability = @time_slots[date].present? %>
      <div 
        class="calendar-day py-2 px-1 is-flex is-flex-direction-column is-align-items-center is-justify-content-center
        <%= 'has-availability' if has_availability %>" 
        data-date="<%= date.iso8601 %>"
      >
        <strong class="is-size-7"><%= date.strftime("%a") %></strong>
        <span class="title is-4"><%= date.day %></span>
        <% if has_availability %>
          <div class="availability-dot"></div>
        <% end %>
      </div>
    <% end %>
  </div>
    <div id="time-slots-container" class="mt-5">
      <h2 class="title is-5" id="selected-date-title" style="display: none;"></h2>
      <div class="columns is-multiline is-mobile" id="slots-display">
        </div>
    </div>

    <% if @time_slots.empty? %>
      <p class="has-text-centered has-text-grey-light">No available slots in the next two weeks.</p>
    <% end %>
  </div>
</div>

<style>
  .calendar-container {
    display: flex;
    overflow-x: auto;
    gap: 8px;
    padding-bottom: 8px;
  }
  .calendar-container .column {
    flex: 0 0 auto; /* prevent shrinking */
    width: 80px;    /* fixed width per day */
  }
  .calendar-day {
    cursor: pointer;
    border-radius: 8px;
    transition: background-color 0.2s ease;
    position: relative;
    border: 1px solid transparent;
  }
  .calendar-day:hover {
    background-color: #f5f5f5;
  }
  .calendar-day.is-active {
    background-color: #3273dc;
    color: white;
    border: 1px solid #3273dc;
  }
  .calendar-day.is-active strong, .calendar-day.is-active span {
    color: white;
  }
  .availability-dot {
    position: absolute;
    bottom: 5px;
    width: 6px;
    height: 6px;
    background-color: #3273dc;
    border-radius: 50%;
  }
  .calendar-day.is-active .availability-dot {
    background-color: white;
  }
</style>

<script>
  const timeSlotsData = JSON.parse('<%= @time_slots.to_json.html_safe %>');
  
  function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString(undefined, { weekday: 'long', month: 'long', day: 'numeric' });
  }

  function renderTimeSlots(dateString) {
    const slotsDisplay = document.getElementById('slots-display');
    const selectedDateTitle = document.getElementById('selected-date-title');
    slotsDisplay.innerHTML = '';
    
    selectedDateTitle.textContent = formatDate(dateString);
    selectedDateTitle.style.display = 'block';

    const slotsForDay = timeSlotsData[dateString] || [];
    
    if (slotsForDay.length === 0) {
      slotsDisplay.innerHTML = `<div class="column is-full"><p class="has-text-centered has-text-grey-light">No available slots for this day.</p></div>`;
      return;
    }

    slotsForDay.forEach(utcTime => {
      const column = document.createElement('div');
      column.className = 'column is-one-third-desktop is-half-tablet is-full-mobile';

      // Create a form to submit the booking details
      const form = document.createElement('form');
      form.method = 'post';
      form.action = '<%= assign_client_path %>';
      form.setAttribute('data-turbo', 'false');

      // Add hidden input for authenticity token
      const tokenInput = document.createElement('input');
      tokenInput.type = 'hidden';
      tokenInput.name = 'authenticity_token';
      tokenInput.value = '<%= form_authenticity_token %>';
      form.appendChild(tokenInput);

      // Add hidden inputs for all booking parameters
      const psychologistInput = document.createElement('input');
      psychologistInput.type = 'hidden';
      psychologistInput.name = 'booking[psychologist_id]';
      psychologistInput.value = '<%= @psychologist.id %>';
      form.appendChild(psychologistInput);

      const serviceInput = document.createElement('input');
      serviceInput.type = 'hidden';
      serviceInput.name = 'booking[service_id]';
      serviceInput.value = '<%= @service.id %>';
      form.appendChild(serviceInput);
      
      const timeInput = document.createElement('input');
      timeInput.type = 'hidden';
      timeInput.name = 'booking[start_time]';
      timeInput.value = utcTime;
      form.appendChild(timeInput);

      // Create the button that submits the form
      const button = document.createElement('button');
      button.type = 'submit';
      button.className = 'button is-success is-fullwidth utc-date-time-range';
      button.dataset.utc = utcTime;
      
      const span = document.createElement('span');
      span.className = 'local-time';
      span.textContent = 'Loading...';

      button.appendChild(span);
      form.appendChild(button);
      column.appendChild(form);
      slotsDisplay.appendChild(column);
    });

    updateLocalTimes();
  }

  function updateLocalTimes() {
    document.querySelectorAll(".utc-date-time-range").forEach(function (el) {
      const utcString = el.dataset.utc;
      if (!utcString) return;

      const utcDate = new Date(utcString);
      const localTimeStr = utcDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
      const tzShort = utcDate.toLocaleTimeString([], { timeZoneName: "short" }).split(' ').pop();

      const localTimeSpan = el.querySelector(".local-time");
      if (localTimeSpan) {
        localTimeSpan.textContent = `${localTimeStr} (${tzShort})`;
      }
    });
  }

  document.addEventListener("turbo:load", function () {
    const calendarDays = document.querySelectorAll('.calendar-day');

    calendarDays.forEach(day => {
      day.addEventListener('click', () => {
        const date = day.dataset.date;
        calendarDays.forEach(d => d.classList.remove('is-active'));
        day.classList.add('is-active');
        renderTimeSlots(date);
      });
    });

    const firstAvailableDay = document.querySelector('.calendar-day.has-availability');
    if (firstAvailableDay) {
      firstAvailableDay.click();
    }
  });
</script>