<div class="container is-max-desktop mt-6">
  <h1 class="title has-text-centered mb-4"><%= t('.page_title') %></h1>

  <div class="box p-5 has-shadow">
    <p class="has-text-centered has-text-grey-light mb-4">
      <%= t('.date_selection_instruction') %>
    </p>

    <div class="calendar-container">
      <div class="calendar-header">
        <% I18n.t('date.abbr_day_names').each do |day_name| %>
          <div class="calendar-header-day"><%= day_name %></div>
        <% end %>
      </div>

      <div class="calendar-grid">
        <% start_date = @time_slots.keys.min.beginning_of_week(:sunday) %>
        <% end_date = (start_date + 20.days).end_of_week(:sunday) %>

        <% (start_date..end_date).each do |date| %>
          <% has_availability = @time_slots[date].present? %>
          <div 
            class="calendar-day <%= 'has-availability' if has_availability %> <%= 'is-outside-month' unless date.month == Date.current.month %>"
            data-date="<%= date.iso8601 %>"
          >
            <span class="day-number"><%= date.day %></span>
            <% if has_availability %>
              <div class="availability-indicator"></div>
            <% end %>
          </div>
        <% end %>
      </div>
    </div>

    <div id="time-slots-container" class="mt-5">
      <h2 class="title is-5" id="selected-date-title" style="display: none;"></h2>
      <div class="time-slots-list" id="slots-display">
      </div>
    </div>

    <% if @time_slots.empty? %>
      <p class="has-text-centered has-text-grey-light"><%= t('.no_slots_available') %></p>
    <% end %>
  </div>
</div>

<style>
/* Calendar Container */
.calendar-container {
  max-width: 600px;
  margin: 0 auto;
  background: white;
  border-radius: 12px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

/* Calendar Header */
.calendar-header {
  display: grid;
  grid-template-columns: repeat(7, 1fr);
  background: #043467ea;
  color: white;
}

.calendar-header-day {
  padding: 16px 8px;
  text-align: center;
  font-weight: 600;
  font-size: 0.9rem;
  letter-spacing: 0.5px;
}

/* Calendar Grid */
.calendar-grid {
  display: grid;
  grid-template-columns: repeat(7, 1fr);
  gap: 1px;
  background: #e5e7eb;
}

/* Calendar Day */
.calendar-day {
  background: white;
  min-height: 60px;
  padding: 8px;
  cursor: pointer;
  transition: all 0.2s ease;
  position: relative;
  display: flex;
  align-items: flex-start;
  justify-content: center;
  border: 2px solid transparent;
}

.calendar-day:hover {
  background: #f8fafc;
  transform: translateY(-1px);
}

.calendar-day.is-active {
  background: #3273dc;
  color: white;
  border-color: #2366d1;
}

.calendar-day.is-outside-month {
  background: #f9fafb;
  color: #9ca3af;
}

.calendar-day.is-outside-month:hover {
  background: #f3f4f6;
}

/* Day Number */
.day-number {
  font-weight: 600;
  font-size: 1.1rem;
  z-index: 2;
  position: relative;
}

/* Availability Indicator */
.availability-indicator {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 40px;
  height: 40px;
  border: 3px solid #10b981;
  border-radius: 50%;
  z-index: 1;
  opacity: 0.8;
}

.calendar-day.is-active .availability-indicator {
  border-color: rgba(255, 255, 255, 0.8);
}

.calendar-day.has-availability .day-number {
  color: #065f46;
  font-weight: 700;
}

.calendar-day.has-availability.is-active .day-number {
  color: white;
}

/* Time Slots */
.time-slots-list {
  display: flex;
  flex-direction: column;
  gap: 12px;
  max-width: 400px;
  margin: 0 auto;
}

.time-slot-item {
  width: 100%;
}

.time-slot-button {
  width: 100% !important;
  padding: 16px 24px !important;
  font-size: 1.1rem !important;
  font-weight: 600 !important;
  border-radius: 8px !important;
  transition: all 0.2s ease !important;
  background: transparent !important;
  border: 2px solid #1e40af !important;
  color: #1e40af !important;
  box-shadow: none !important;
}

.time-slot-button:hover {
  transform: translateY(-2px) !important;
  box-shadow: 0 4px 12px rgba(30, 64, 175, 0.15) !important;
  background: rgba(30, 64, 175, 0.05) !important;
  border-color: #1d4ed8 !important;
  color: #1d4ed8 !important;
}

.time-slot-button:active {
  transform: translateY(0) !important;
}

/* Selected Date Title */
#selected-date-title {
  text-align: center;
  color: #374151;
  margin-bottom: 24px;
  font-size: 1.3rem;
  font-weight: 600;
}

/* Responsive Design */
@media (max-width: 768px) {
  .calendar-container {
    margin: 0 -10px;
  }
  
  .calendar-day {
    min-height: 50px;
    padding: 6px;
  }
  
  .availability-indicator {
    width: 35px;
    height: 35px;
    border-width: 2px;
  }
  
  .day-number {
    font-size: 1rem;
  }
  
  .time-slot-button {
    padding: 14px 20px !important;
    font-size: 1rem !important;
  }
}

@media (max-width: 480px) {
  .calendar-header-day {
    padding: 12px 4px;
    font-size: 0.8rem;
  }
  
  .calendar-day {
    min-height: 45px;
    padding: 4px;
  }
  
  .availability-indicator {
    width: 30px;
    height: 30px;
  }
  
  .day-number {
    font-size: 0.9rem;
  }
}
</style>

<script>
  const timeSlotsData = JSON.parse('<%= @time_slots.to_json.html_safe %>');
  
  function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString(undefined, { weekday: 'long', month: 'long', day: 'numeric' });
  }

  function renderTimeSlots(dateString) {
    const slotsDisplay = document.getElementById('slots-display');
    const selectedDateTitle = document.getElementById('selected-date-title');
    slotsDisplay.innerHTML = '';
    
    selectedDateTitle.textContent = formatDate(dateString);
    selectedDateTitle.style.display = 'block';

    const slotsForDay = timeSlotsData[dateString] || [];
    
    if (slotsForDay.length === 0) {
      slotsDisplay.innerHTML = `<div class="time-slot-item"><p class="has-text-centered has-text-grey-light">No available slots for this day.</p></div>`;
      return;
    }

    slotsForDay.forEach(utcTime => {
      const slotItem = document.createElement('div');
      slotItem.className = 'time-slot-item';

      // Create a form to submit the booking details
      const form = document.createElement('form');
      form.method = 'post';
      form.action = '<%= assign_client_path %>';
      form.setAttribute('data-turbo', 'false');

      // Add hidden input for authenticity token
      const tokenInput = document.createElement('input');
      tokenInput.type = 'hidden';
      tokenInput.name = 'authenticity_token';
      tokenInput.value = '<%= form_authenticity_token %>';
      form.appendChild(tokenInput);

      // Add hidden inputs for all booking parameters
      const psychologistInput = document.createElement('input');
      psychologistInput.type = 'hidden';
      psychologistInput.name = 'booking[psychologist_id]';
      psychologistInput.value = '<%= @psychologist.id %>';
      form.appendChild(psychologistInput);

      const serviceInput = document.createElement('input');
      serviceInput.type = 'hidden';
      serviceInput.name = 'booking[service_id]';
      serviceInput.value = '<%= @service.id %>';
      form.appendChild(serviceInput);
      
      const timeInput = document.createElement('input');
      timeInput.type = 'hidden';
      timeInput.name = 'booking[start_time]';
      timeInput.value = utcTime;
      form.appendChild(timeInput);

      // Create the button that submits the form
      const button = document.createElement('button');
      button.type = 'submit';
      button.className = 'button time-slot-button utc-date-time-range';
      button.dataset.utc = utcTime;
      
      const span = document.createElement('span');
      span.className = 'local-time';
      span.textContent = 'Loading...';

      button.appendChild(span);
      form.appendChild(button);
      slotItem.appendChild(form);
      slotsDisplay.appendChild(slotItem);
    });

    updateLocalTimes();
  }

  function updateLocalTimes() {
    document.querySelectorAll(".utc-date-time-range").forEach(function (el) {
      const utcString = el.dataset.utc;
      if (!utcString) return;

      const utcDate = new Date(utcString);
      const localTimeStr = utcDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
      const tzShort = utcDate.toLocaleTimeString([], { timeZoneName: "short" }).split(' ').pop();

      const localTimeSpan = el.querySelector(".local-time");
      if (localTimeSpan) {
        localTimeSpan.textContent = `${localTimeStr} (${tzShort})`;
      }
    });
  }

  document.addEventListener("turbo:load", function () {
    const calendarDays = document.querySelectorAll('.calendar-day');

    calendarDays.forEach(day => {
      day.addEventListener('click', () => {
        const date = day.dataset.date;
        calendarDays.forEach(d => d.classList.remove('is-active'));
        day.classList.add('is-active');
        renderTimeSlots(date);
      });
    });

    const firstAvailableDay = document.querySelector('.calendar-day.has-availability');
    if (firstAvailableDay) {
      firstAvailableDay.click();
    }
  });
</script>