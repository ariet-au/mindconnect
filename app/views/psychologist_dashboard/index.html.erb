  <% if @psychologist_profile %>
  <div class="psychologist-nav">
          <div class="nav-content">
            <h3 class="nav-title">
              <i class="fas fa-user-cog"></i>
              <%= t('psychologist_profiles.show.dashboard') %>
            </h3>
            <div class="nav-actions">
              <%= link_to psychologist_profile_psychologist_availabilities_path(@psychologist_profile.id), class: "button is-primary-blue is-small" do %>
                <span class="icon"><i class="fas fa-calendar-alt"></i></span>
                <span><%= t('psychologist_profiles.show.manage_availability') %></span>
              <% end %>
              <%= link_to psychologist_bookings_psychologist_profile_bookings_path(@psychologist_profile.id), class: "button is-info is-small" do %>
                <span class="icon"><i class="fas fa-calendar-alt"></i></span>
                <span><%= t('psychologist_profiles.show.view_my_bookings') %></span>
              <% end %>
              <%= link_to internal_client_profiles_path, class: "button is-primary-blue is-small" do %>
                <span class="icon"><i class="fas fa-book"></i></span>
                <span><%= t('psychologist_profiles.show.notes') %></span>
              <% end %>
            </div>
          </div>
        </div>



    <div class="columns is-mobile is-multiline">
      <!-- Sidebar -->
      <div class="column is-narrow">
        <aside class="menu" style="background-color: #2C3E50; padding: 20px; height: 100vh; width: 200px; position: fixed; z-index: 100;">
          <p class="menu-label has-text-white">Menu</p>
          <ul class="menu-list">
            <li>
              <a href="<%= psychologist_dashboard_path %>" class="has-text-white <%= 'is-active' if current_page?(psychologist_dashboard_path) %>" style="<%= 'background-color: #34495E;' if current_page?(psychologist_dashboard_path) %>">
                <span class="icon"><i class="fas fa-home"></i></span> Dashboard
              </a>
            </li>
            <li>
              <a href="<%= psychologist_profile_psychologist_availabilities_path(@psychologist_profile) %>" class="has-text-white <%= 'is-active' if current_page?(psychologist_profile_psychologist_availabilities_path(@psychologist_profile)) %>" style="<%= 'background-color: #34495E;' if current_page?(psychologist_profile_psychologist_availabilities_path(@psychologist_profile)) %>">
                <span class="icon"><i class="fas fa-calendar-check"></i></span> Availability
              </a>
            </li>
            <li>
              <a href="<%= psychologist_profile_bookings_path(@psychologist_profile) %>" class="has-text-white <%= 'is-active' if current_page?(psychologist_profile_bookings_path(@psychologist_profile)) %>" style="<%= 'background-color: #34495E;' if current_page?(psychologist_profile_bookings_path(@psychologist_profile)) %>">
                <span class="icon"><i class="fas fa-book"></i></span> Bookings
              </a>
            </li>
            <li>
              <a href="<%= internal_client_profiles_path %>" class="has-text-white <%= 'is-active' if current_page?(internal_client_profiles_path) %>" style="<%= 'background-color: #34495E;' if current_page?(internal_client_profiles_path) %>">
                <span class="icon"><i class="fas fa-users"></i></span> Client Profiles
              </a>
            </li>
            <li>
              <a href="<%= edit_psychologist_profile_path(@psychologist_profile) %>" class="has-text-white <%= 'is-active' if current_page?(edit_psychologist_profile_path(@psychologist_profile)) %>" style="<%= 'background-color: #34495E;' if current_page?(edit_psychologist_profile_path(@psychologist_profile)) %>">
                <span class="icon"><i class="fas fa-user-edit"></i></span> Edit Profile
              </a>
            </li>
          </ul>
        </aside>
      </div>

      <!-- Main Content -->
      <div class="column" style="margin-left: 200px; padding: 20px;">
        <h1 class="title">Welcome, <%= @psychologist_profile.full_name || 'Psychologist' %></h1>

        <!-- Calendar Section -->
        <div class="box calendar">
          <div class="level">
            <div class="level-left">
              <h2 class="subtitle">Your Schedule</h2>
            </div>
            <div class="level-right">
              <button class="button is-primary" onclick="openCreateBookingModal()">
                <span class="icon"><i class="fas fa-plus"></i></span>
                <span>New Booking</span>
              </button>
            </div>

            <div class="level-right">
              <%= link_to "Book a Session", select_service_path(psychologist_id: current_user.psychologist_profile.id), class: "button is-primary" %>
            </div>
          </div>
          <div id="calendar-container"
              data-psychologist-profile-id="<%= @psychologist_profile.id %>"
              data-psychologist-timezone="<%= @psychologist_profile.timezone %>">
            <div class="timezone-info mb-2">
              <small class="text-muted">Calendar displayed in: <span id="displayedTimezone"></span></small>
            </div>
            <div id="calendar"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- Edit Booking Modal -->
    <div class="modal" id="editBookingModal">
      <div class="modal-background"></div>
      <div class="modal-card">
        <header class="modal-card-head">
          <p class="modal-card-title">Edit Booking</p>
          <button class="delete" aria-label="close" onclick="closeModal('editBookingModal')"></button>
        </header>
        <section class="modal-card-body">
          <p class="help">Times are shown in your local timezone (<span id="browserTimezone"></span>).</p>
          <form id="editBookingForm">
            <div class="field">
              <label class="label">Client</label>
              <div class="control">
                <input class="input" type="text" id="bookingClient" readonly>
              </div>
            </div>
            <div class="field">
              <label class="label">Service</label>
              <div class="control">
                <div class="select is-fullwidth">
                  <select id="bookingService" required>
                    <option value="">Select a service...</option>
                    <% current_user.psychologist_profile.user.services.each do |service| %>
                      <option value="<%= service.id %>" data-duration-minutes="<%= service.duration_minutes %>"><%= service.name %> (<%= service.duration_minutes %> min)</option>
                    <% end %>
                  </select>
                </div>
              </div>
            </div>
            <div class="field">
              <label class="label">Date</label>
              <div class="control">
                <input class="input" type="date" id="bookingDate" required>
              </div>
            </div>
            <div class="field">
              <label class="label">Start Time</label>
              <div class="control">
                <input class="input" type="time" id="bookingStartTime" required>
              </div>
            </div>
            <div class="field">
              <label class="label">Status</label>
              <div class="control">
                <div class="select">
                  <select id="bookingStatus">
                    <option value="pending">Pending</option>
                    <option value="confirmed">Confirmed</option>
                    <option value="cancelled">Cancelled</option>
                    <option value="completed">Completed</option>
                  </select>
                </div>
              </div>
            </div>
            <div class="field">
              <label class="label">Notes</label>
              <div class="control">
                <textarea class="textarea" id="bookingNotes" rows="3"></textarea>
              </div>
            </div>
            <div id="confirmationLinkSection" style="display: none;">
              <p><strong>Share this link with the client to confirm the booking:</strong></p>
              <p><a id="confirmationLink" href=""></a></p>
            </div>
          </form>
        </section>
        <footer class="modal-card-foot">
          <button class="button is-success" onclick="saveBookingChanges()">Save Changes</button>
          <button class="button is-danger" onclick="deleteBooking()">Delete Booking</button>
          <button class="button" onclick="closeModal('editBookingModal')">Cancel</button>
        </footer>
      </div>
    </div>

    <!-- Edit Unavailability Modal -->
    <div class="modal" id="editUnavailabilityModal">
      <div class="modal-background"></div>
      <div class="modal-card">
        <header class="modal-card-head">
          <p class="modal-card-title">Edit Unavailability</p>
          <button class="delete" aria-label="close" onclick="closeModal('editUnavailabilityModal')"></button>
        </header>
        <section class="modal-card-body">
          <p class="help">Times are shown in your local timezone (<span id="browserTimezone"></span>).</p>
          <form id="editUnavailabilityForm">
            <div class="field">
              <label class="label">Date</label>
              <div class="control">
                <input class="input" type="date" id="unavailabilityDate" required>
              </div>
            </div>
            <div class="field">
              <label class="label">Start Time</label>
              <div class="control">
                <input class="input" type="time" id="unavailabilityStartTime" step="900" required>
              </div>
            </div>
            <div class="field">
              <label class="label">End Time</label>
              <div class="control">
                <input class="input" type="time" id="unavailabilityEndTime" step="900" required>
              </div>
            </div>
            <div class="field">
              <label class="label">Reason</label>
              <div class="control">
                <textarea class="textarea" id="unavailabilityReason" rows="3" placeholder="Optional reason for unavailability"></textarea>
              </div>
            </div>
          </form>
        </section>
        <footer class="modal-card-foot">
          <button class="button is-success" onclick="saveUnavailabilityChanges()">Save Changes</button>
          <button class="button is-danger" onclick="deleteUnavailability()">Delete</button>
          <button class="button" onclick="closeModal('editUnavailabilityModal')">Cancel</button>
        </footer>
      </div>
    </div>

    <!-- Create New Booking Modal -->
    <div class="modal" id="createBookingModal">
      <div class="modal-background"></div>
      <div class="modal-card">
        <header class="modal-card-head">
          <p class="modal-card-title">Create New Booking</p>
          <button class="delete" aria-label="close" onclick="closeModal('createBookingModal')"></button>
        </header>
        <section class="modal-card-body">
          <p class="help">Times are shown in your local timezone (<span id="browserTimezone"></span>).</p>
          <form id="createBookingForm">
            <div class="field">
              <label class="label">Client</label>
              <div class="control">
                <div class="select is-fullwidth">
                  <select id="newBookingClient" required>
                    <option value="">Select a client...</option>
                    <% current_user.psychologist_profile.internal_client_profiles.each do |client| %>
                      <option value="<%= client.id %>" data-client-type="internal"><%= client.first_name %> (Internal)</option>
                    <% end %>
                    <% current_user.psychologist_profile.bookings.where.not(client_profile_id: nil).distinct.pluck(:client_profile_id).each do |client_id| %>
                      <% client = ClientProfile.find(client_id) %>
                      <option value="<%= client.id %>" data-client-type="external"><%= client.first_name %> (External)</option>
                    <% end %>
                  </select>
                </div>
              </div>
            </div>
            <div class="field">
              <label class="label">Service</label>
              <div class="control">
                <div class="select is-fullwidth">
                  <select id="newBookingService" required>
                    <option value="">Select a service...</option>
                    <% current_user.psychologist_profile.user.services.each do |service| %>
                      <option value="<%= service.id %>" data-duration-minutes="<%= service.duration_minutes %>"><%= service.name %> (<%= service.duration_minutes %> min)</option>
                    <% end %>
                  </select>
                </div>
              </div>
            </div>
            <div class="field">
              <label class="label">Date</label>
              <div class="control">
                <input class="input" type="date" id="newBookingDate" required>
              </div>
            </div>
            <div class="field">
              <label class="label">Start Time</label>
              <div class="control">
                <input class="input" type="time" id="newBookingStartTime" step="900" list="timeOptions" required>
                <datalist id="timeOptions">
                  <% (6..21).each do |hour| %>
                    <option value="<%= sprintf('%02d:00', hour) %>"></option>
                    <option value="<%= sprintf('%02d:30', hour) %>"></option>
                  <% end %>
                  <option value="22:00"></option>
                </datalist>
              </div>
            </div>
            <div class="field">
              <label class="label">Status</label>
              <div class="control">
                <div class="select">
                  <select id="newBookingStatus">
                    <option value="pending">Pending</option>
                    <option value="confirmed">Confirmed</option>
                  </select>
                </div>
              </div>
            </div>
            <div class="field">
              <label class="label">Notes</label>
              <div class="control">
                <textarea class="textarea" id="newBookingNotes" rows="3" placeholder="Optional notes for this booking"></textarea>
              </div>
            </div>
          </form>
        </section>
        <footer class="modal-card-foot">
          <button class="button is-success" onclick="createBooking()">Create Booking</button>
          <button class="button" onclick="closeModal('createBookingModal')">Cancel</button>
        </footer>
      </div>
    </div>

    <!-- Create New Unavailability Modal -->
    <div class="modal" id="createUnavailabilityModal">
      <div class="modal-background"></div>
      <div class="modal-card">
        <header class="modal-card-head">
          <p class="modal-card-title">Create Unavailability</p>
          <button class="delete" aria-label="close" onclick="closeModal('createUnavailabilityModal')"></button>
        </header>
        <section class="modal-card-body">
          <p class="help">Times are shown in your local timezone (<span id="browserTimezone"></span>).</p>
          <form id="createUnavailabilityForm">
            <div class="field">
              <label class="label">Date</label>
              <div class="control">
                <input class="input" type="date" id="newUnavailabilityDate" required>
              </div>
            </div>
            <div class="field">
              <label class="label">Start Time</label>
              <div class="control">
                <input class="input" type="time" id="newUnavailabilityStartTime" step="900" required>
              </div>
            </div>
            <div class="field">
              <label class="label">End Time</label>
              <div class="control">
                <input class="input" type="time" id="newUnavailabilityEndTime" step="900" required>
              </div>
            </div>
            <div class="field">
              <label class="label">Reason</label>
              <div class="control">
                <textarea class="textarea" id="newUnavailabilityReason" rows="3" placeholder="Optional reason for unavailability"></textarea>
              </div>
            </div>
          </form>
        </section>
        <footer class="modal-card-foot">
          <button class="button is-success" onclick="createUnavailability()">Create</button>
          <button class="button" onclick="closeModal('createUnavailabilityModal')">Cancel</button>
        </footer>
      </div>
    </div>





    <style>
      .menu-list a:hover {
        background-color: #34495E !important;
      }
      
      .calendar .fc-event {
        cursor: pointer;
      }
      
      .fc-event-booking {
        border-left: 4px solid #0d6efd;
      }
      
      .fc-event-unavailability {
        border-left: 4px solid #d9534f;
      }
      
      .modal-background {
        background-color: rgba(0, 0, 0, 0.6);
      }
      
      .fc-list-event:hover {
        background-color: #f8f9fa;
      }
    </style>
  <% else %>
    <div class="container">
      <div class="notification is-danger">
        <p>Error: No psychologist profile found. Please contact support.</p>
      </div>
    </div>
  <% end %>
















<script>
  // --- Custom Alert/Confirm Modals ---
  function showCustomAlert(message) {
    const modalId = 'customAlertDialog';
    const modal = document.getElementById(modalId);
    if (modal) {
      document.getElementById('customAlertMessage').textContent = message;
      modal.classList.add('is-active');
      modal.querySelector('.modal-close, .modal-background, .button').onclick = () => modal.classList.remove('is-active');
    } else {
      console.warn('Custom alert modal not found, falling back to browser alert:', message);
      alert(message);
    }
  }

  function showCustomConfirm(message, onConfirm) {
    const modalId = 'customConfirmDialog';
    const modal = document.getElementById(modalId);
    if (modal) {
      document.getElementById('customConfirmMessage').textContent = message;
      modal.classList.add('is-active');
      const confirmBtn = document.getElementById('customConfirmYes');
      const cancelBtn = document.getElementById('customConfirmNo');

      const cleanup = () => {
        modal.classList.remove('is-active');
        confirmBtn.onclick = null;
        cancelBtn.onclick = null;
      };

      confirmBtn.onclick = () => {
        onConfirm();
        cleanup();
      };
      cancelBtn.onclick = () => cleanup();
      modal.querySelector('.modal-close, .modal-background').onclick = () => cleanup();
    } else {
      console.warn('Custom confirm modal not found, falling back to browser confirm:', message);
      if (confirm(message)) {
        onConfirm();
      }
    }
  }
  // --- End Custom Alert/Confirm Modals ---

  // Global calendar variable
  let calendar;
  let currentEditingBookingId = null;
  let currentEditingUnavailabilityId = null;

  document.addEventListener('turbo:load', function () {
    initializeCalendar();
  });

  function initializeCalendar() {
    const calendarEl = document.getElementById('calendar');
    const container = document.getElementById('calendar-container');

    if (!calendarEl || !container) {
      console.error("Missing required elements or data for calendar initialization. Ensure 'calendar' and 'calendar-container' IDs exist.");
      return;
    }

    const psychologistProfileId = container.dataset.psychologistProfileId;
    const psychologistTimezone = container.dataset.psychologistTimezone;
    const displayedTimezoneSpan = document.getElementById('displayedTimezone');
    const browserTimezoneSpans = document.querySelectorAll('#browserTimezone');
    const browserTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;

    if (!psychologistProfileId || !psychologistTimezone) {
      console.error("Missing psychologist profile ID or timezone data from 'calendar-container' dataset.");
      return;
    }

    browserTimezoneSpans.forEach(span => {
      span.textContent = browserTimezone;
    });

    if (displayedTimezoneSpan) {
      displayedTimezoneSpan.textContent = psychologistTimezone;
    }

    console.log(`[DEBUG] Initializing calendar.`);
    console.log(`[DEBUG] Psychologist Profile ID: ${psychologistProfileId}`);
    console.log(`[DEBUG] Psychologist Timezone (for display): ${psychologistTimezone}`);
    console.log(`[DEBUG] Browser Timezone: ${browserTimezone}`);

    calendar = new FullCalendar.Calendar(calendarEl, {
      initialView: 'timeGridWeek',
      slotMinTime: "04:00:00",
      slotMaxTime: "23:00:00",
      allDaySlot: false,
      editable: false,
      selectable: true,
      selectAllow: function(selectInfo) {
        const events = calendar.getEvents().filter(event => event.display === 'background');
        return events.some(event => {
          return selectInfo.start >= event.start && selectInfo.end <= event.end;
        });
      },
      firstDay: 1,
      timeZone: psychologistTimezone,
      displayEventTime: true,
      eventTimeFormat: { hour: 'numeric', minute: '2-digit', meridiem: 'short' },
      slotLabelFormat: { hour: 'numeric', minute: '2-digit', omitZeroMinute: false, meridiem: 'short' },
      headerToolbar: {
        left: 'prev,next today',
        center: 'title',
        right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek'
      },
      views: {
        listWeek: { buttonText: 'List' }
      },
      eventSources: [
        {
          url: `/psychologist_profiles/${psychologistProfileId}/psychologist_unavailabilities/`,
          method: 'GET',
          color: '#d9534f',
          textColor: 'white',
          failure: function(error) {
            console.error('Error fetching unavailabilities:', error);
            showCustomAlert('Error fetching unavailabilities.');
          }
        },
        {
          url: `/psychologist_profiles/${psychologistProfileId}/bookings/calendar_bookings.json`,
          method: 'GET',
          color: '#0d6efd',
          textColor: 'white',
          failure: function(error) {
            console.error('Error loading bookings:', error);
            showCustomAlert('Error loading bookings.');
          }
        },
        {
          url: `/psychologist_profiles/${psychologistProfileId}/psychologist_availabilities/calendar_blocks.json`,
          method: 'GET',
          display: 'background',
          color: '#d4edda',
          eventDataTransform: function(eventData) {
            if (eventData.startTime && eventData.endTime) {
              const psychologistTimezone = calendar.getOption('timeZone');
              const currentDate = moment().format('YYYY-MM-DD');
              const originalStartTime = eventData.startTime;
              const originalEndTime = eventData.endTime;
              const startMomentUTC = moment.tz(`${currentDate}T${originalStartTime}`, 'UTC');
              const endMomentUTC = moment.tz(`${currentDate}T${originalEndTime}`, 'UTC');
              const startMomentLocal = startMomentUTC.clone().tz(psychologistTimezone);
              const endMomentLocal = endMomentUTC.clone().tz(psychologistTimezone);
              eventData.startTime = startMomentLocal.format('HH:mm:ss');
              eventData.endTime = endMomentLocal.format('HH:mm:ss');
              console.log(`[DEBUG] Converted availability: UTC ${originalStartTime} to ${psychologistTimezone} ${eventData.startTime}`);
              console.log(`[DEBUG] Converted availability: UTC ${originalEndTime} to ${psychologistTimezone} ${eventData.endTime}`);
            }
            return eventData;
          },
          success: function(data) {
            console.log('[DEBUG] Availability request successful.');
            console.log('[DEBUG] Raw availability data from server:', data);
            data.forEach(item => {
              console.log(`[DEBUG] Raw Availability Block - Day: ${item.daysOfWeek[0]}, Start: ${item.startTime}, End: ${item.endTime}`);
            });
          },
          failure: function(error) {
            console.error('[DEBUG] Error fetching availability blocks:', error);
            showCustomAlert('Error fetching availability blocks.');
          }
        }
      ],
      eventDidMount: function(info) {
        console.log(`[DEBUG] Event mounted: ${info.event.title || 'Availability Block'}`);
        console.log(`[DEBUG] Received Time (UTC): ${info.event.start.toISOString()} to ${info.event.end.toISOString()}`);
        console.log(`[DEBUG] Displayed Time (${calendar.getOption('timeZone')}): ${info.event.startStr} to ${info.event.endStr}`);
        if (info.event.display === 'background') {
          console.log(`[DEBUG] Availability Block - Day: ${info.event.start.getUTCDay()}, Start: ${info.event.startStr}, End: ${info.event.endStr}`);
        }
        const isBooking = info.event.extendedProps.bookingId || info.event.extendedProps.type === 'booking' ||
                          info.event.extendedProps.clientName || info.event.extendedProps.status;
        if (isBooking) {
          info.el.style.cursor = 'pointer';
          info.el.title = 'Click to edit booking';
          info.el.classList.add('fc-event-booking');
        } else if (info.event.display !== 'background') {
          info.el.style.cursor = 'pointer';
          info.el.title = 'Click to edit unavailability';
          info.el.classList.add('fc-event-unavailability');
        }
      },
      eventClick: function(info) {
        const isBooking = info.event.extendedProps.bookingId || info.event.extendedProps.type === 'booking' ||
                          info.event.extendedProps.clientName || info.event.extendedProps.status;
        if (isBooking) {
          console.log('[DEBUG] Event Clicked (Booking):', info.event);
          openEditBookingModal(info.event);
        } else {
          console.log('[DEBUG] Event Clicked (Unavailability):', info.event);
          openEditUnavailabilityModal(info.event);
        }
      },
      select: function(info) {
        console.log(`[DEBUG] Time slot selected. Start: ${info.startStr}, End: ${info.endStr}`);
        openCreateUnavailabilityModal(info.start, info.end);
        calendar.unselect();
      }
    });

    console.log('[DEBUG] FullCalendar timeZone:', calendar.getOption('timeZone'));
    calendar.render();
  }

  function openEditBookingModal(event) {
    currentEditingBookingId = event.extendedProps.bookingId || event.id;
    const clientName = event.extendedProps.clientName || 'Unknown Client';
    const serviceName = event.extendedProps.service_name || '';

    console.log(`[DEBUG] Opening Edit Booking Modal for ID: ${currentEditingBookingId}`);
    console.log(`[DEBUG] Event Start (UTC): ${event.start.toISOString()}`);

    const eventStart = moment.tz(event.start.toISOString(), calendar.getOption('timeZone'));
    const dateString = eventStart.format('YYYY-MM-DD');
    const startTimeString = eventStart.format('HH:mm');

    console.log(`[DEBUG] Converted to Psychologist Timezone for form: ${dateString} ${startTimeString}`);

    const status = event.extendedProps.status || 'pending';
    const notes = event.extendedProps.notes || '';
    const createdBy = event.extendedProps.created_by || '';
    const confirmationToken = event.extendedProps.confirmation_token || '';

    document.getElementById('bookingClient').value = clientName;
    document.getElementById('bookingService').value = event.extendedProps.service_id || '';
    document.getElementById('bookingDate').value = dateString;
    document.getElementById('bookingStartTime').value = startTimeString;
    document.getElementById('bookingStatus').value = status;
    document.getElementById('bookingNotes').value = notes;

    const confirmationLinkSection = document.getElementById('confirmationLinkSection');
    const confirmationLink = document.getElementById('confirmationLink');
    if (status === 'pending' && createdBy === 'psychologist' && confirmationToken) {
      const link = `/bookings/${currentEditingBookingId}/confirm?token=${confirmationToken}`;
      confirmationLink.href = link;
      confirmationLink.textContent = link;
      confirmationLinkSection.style.display = 'block';
    } else {
      confirmationLinkSection.style.display = 'none';
    }

    document.getElementById('editBookingModal').classList.add('is-active');
  }

  function openEditUnavailabilityModal(event) {
    currentEditingUnavailabilityId = event.id;
    console.log(`[DEBUG] Opening Edit Unavailability Modal for ID: ${currentEditingUnavailabilityId}`);
    console.log(`[DEBUG] Event Start (UTC): ${event.start.toISOString()}, End (UTC): ${event.end.toISOString()}`);

    const eventStart = moment.tz(event.start.toISOString(), calendar.getOption('timeZone'));
    const eventEnd = moment.tz(event.end.toISOString(), calendar.getOption('timeZone'));
    const dateString = eventStart.format('YYYY-MM-DD');
    const startTimeString = eventStart.format('HH:mm');
    const endTimeString = eventEnd.format('HH:mm');

    console.log(`[DEBUG] Converted to Psychologist Timezone for form: ${dateString} ${startTimeString} to ${endTimeString}`);

    document.getElementById('unavailabilityDate').value = dateString;
    document.getElementById('unavailabilityStartTime').value = startTimeString;
    document.getElementById('unavailabilityEndTime').value = endTimeString;
    document.getElementById('unavailabilityReason').value = event.extendedProps.reason || '';

    document.getElementById('editUnavailabilityModal').classList.add('is-active');
  }

  function openCreateUnavailabilityModal(start, end) {
    console.log(`[DEBUG] Opening Create Unavailability Modal from calendar selection`);
    console.log(`[DEBUG] Selected Start (UTC): ${start.toISOString()}, End (UTC): ${end.toISOString()}`);

    const startMoment = moment.tz(start.toISOString(), calendar.getOption('timeZone'));
    const endMoment = moment.tz(end.toISOString(), calendar.getOption('timeZone'));
    const dateString = startMoment.format('YYYY-MM-DD');
    const startTimeString = startMoment.format('HH:mm');
    const endTimeString = endMoment.format('HH:mm');

    console.log(`[DEBUG] Converted to Psychologist Timezone for form: ${dateString} ${startTimeString} to ${endTimeString}`);

    document.getElementById('newUnavailabilityDate').value = dateString;
    document.getElementById('newUnavailabilityStartTime').value = startTimeString;
    document.getElementById('newUnavailabilityEndTime').value = endTimeString;
    document.getElementById('newUnavailabilityReason').value = '';

    document.getElementById('createUnavailabilityModal').classList.add('is-active');
  }

  function openCreateBookingModal() {
    const now = moment().tz(calendar.getOption('timeZone'));
    const minutes = now.minutes();
    let nextHalfHour;
    if (minutes < 30) {
      nextHalfHour = now.startOf('hour').add(30, 'minutes');
    } else {
      nextHalfHour = now.add(1, 'hour').startOf('hour');
    }

    console.log(`[DEBUG] Opening Create Booking Modal, current browser time: ${now.toISOString()}`);
    console.log(`[DEBUG] Converted to Psychologist Timezone for form: ${nextHalfHour.format('YYYY-MM-DD HH:mm')}`);

    document.getElementById('newBookingClient').value = '';
    document.getElementById('newBookingService').value = '';
    document.getElementById('newBookingDate').value = nextHalfHour.format('YYYY-MM-DD');
    document.getElementById('newBookingStartTime').value = nextHalfHour.format('HH:mm');
    document.getElementById('newBookingStatus').value = 'pending';
    document.getElementById('newBookingNotes').value = '';

    document.getElementById('createBookingModal').classList.add('is-active');
  }

  function createBooking() {
    const container = document.getElementById('calendar-container');
    const psychologistProfileId = container ? container.dataset.psychologistProfileId : null;
    const psychologistTimezone = calendar.getOption('timeZone');

    if (!psychologistProfileId) {
      showCustomAlert('Error: Missing psychologist profile ID');
      return;
    }

    const date = document.getElementById('newBookingDate').value;
    const startTime = document.getElementById('newBookingStartTime').value;
    const serviceSelect = document.getElementById('newBookingService');
    const serviceId = serviceSelect.value;
    const durationMinutes = parseInt(serviceSelect.options[serviceSelect.selectedIndex]?.dataset.durationMinutes || '0');
    const clientSelect = document.getElementById('newBookingClient');
    const clientId = clientSelect.value;
    const clientType = clientSelect.options[clientSelect.selectedIndex]?.dataset.clientType;

    if (!clientId) {
      showCustomAlert('Please select a client.');
      return;
    }

    if (!serviceId) {
      showCustomAlert('Please select a service.');
      return;
    }

    const startDateTime = moment.tz(`${date} ${startTime}`, 'YYYY-MM-DD HH:mm', psychologistTimezone).toDate();
    const endDateTime = new Date(startDateTime.getTime() + durationMinutes * 60000);

    console.log(`[DEBUG] Creating new booking.`);
    console.log(`[DEBUG] Form Input (Psychologist TZ): ${date} ${startTime}`);
    console.log(`[DEBUG] Converted to UTC for backend: Start: ${startDateTime.toISOString()}, End: ${endDateTime.toISOString()}`);
    console.log(`[DEBUG] Timezone being sent to backend: ${psychologistTimezone}`);

    const isAvailable = calendar.getEvents().some(event =>
      event.display === 'background' && startDateTime >= event.start && endDateTime <= event.end
    );

    if (!isAvailable) {
      showCustomAlert('The selected time slot is not available. Please choose a different time.');
      return;
    }

    const formData = {
      booking: {
        start_time: startDateTime.toISOString(),
        end_time: endDateTime.toISOString(),
        status: document.getElementById('newBookingStatus').value,
        notes: document.getElementById('newBookingNotes').value,
        psychologist_profile_id: psychologistProfileId,
        service_id: serviceId,
        timezone: psychologistTimezone
      }
    };

    if (clientType === 'internal') {
      formData.booking.internal_client_profile_id = clientId;
    } else if (clientType === 'external') {
      formData.booking.client_profile_id = clientId;
    }

    fetch(`/psychologist_profiles/${psychologistProfileId}/bookings/create_json.json`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector("[name='csrf-token']").content
      },
      body: JSON.stringify(formData)
    })
    .then(response => {
      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
      return response.json();
    })
    .then(data => {
      if (data.success) {
        calendar.refetchEvents();
        closeModal('createBookingModal');
        showCustomAlert('Booking created successfully!');
      } else {
        showCustomAlert('Error creating booking: ' + (data.error || 'Unknown error'));
      }
    })
    .catch(error => {
      console.error('Error:', error);
      showCustomAlert('Error creating booking: ' + error.message);
    });
  }

  function saveBookingChanges() {
    if (!currentEditingBookingId) return;

    const date = document.getElementById('bookingDate').value;
    const startTime = document.getElementById('bookingStartTime').value;
    const serviceSelect = document.getElementById('bookingService');
    const serviceId = serviceSelect.value;
    const durationMinutes = parseInt(serviceSelect.options[serviceSelect.selectedIndex]?.dataset.durationMinutes || '0');
    const container = document.getElementById('calendar-container');
    const psychologistProfileId = container ? container.dataset.psychologistProfileId : null;
    const psychologistTimezone = calendar.getOption('timeZone');

    if (!psychologistProfileId) {
      showCustomAlert('Error: Missing psychologist profile ID');
      return;
    }

    if (!serviceId) {
      showCustomAlert('Please select a service.');
      return;
    }

    const startDateTime = moment.tz(`${date} ${startTime}`, 'YYYY-MM-DD HH:mm', psychologistTimezone).toDate();
    const endDateTime = new Date(startDateTime.getTime() + durationMinutes * 60000);

    console.log(`[DEBUG] Saving booking changes for ID: ${currentEditingBookingId}`);
    console.log(`[DEBUG] Form Input (Psychologist TZ): ${date} ${startTime}`);
    console.log(`[DEBUG] Converted to UTC for backend: Start: ${startDateTime.toISOString()}, End: ${endDateTime.toISOString()}`);
    console.log(`[DEBUG] Timezone being sent to backend: ${psychologistTimezone}`);

    const isAvailable = calendar.getEvents().some(event =>
      event.display === 'background' && startDateTime >= event.start && endDateTime <= event.end
    );

    if (!isAvailable) {
      showCustomAlert('The selected time slot is not available. Please choose a different time.');
      return;
    }

    const formData = {
      booking: {
        start_time: startDateTime.toISOString(),
        end_time: endDateTime.toISOString(),
        status: document.getElementById('bookingStatus').value,
        notes: document.getElementById('bookingNotes').value,
        service_id: serviceId,
        timezone: psychologistTimezone
      }
    };

    fetch(`/psychologist_profiles/${psychologistProfileId}/bookings/${currentEditingBookingId}/update_json`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector("[name='csrf-token']").content
      },
      body: JSON.stringify(formData)
    })
    .then(response => {
      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
      return response.json();
    })
    .then(data => {
      if (data.success) {
        calendar.refetchEvents();
        closeModal('editBookingModal');
        showCustomAlert('Booking updated successfully!');
      } else {
        showCustomAlert('Error updating booking: ' + (data.error || 'Unknown error'));
      }
    })
    .catch(error => {
      console.error('Error:', error);
      showCustomAlert('Error updating booking: ' + error.message);
    });
  }

  function deleteBooking() {
    if (!currentEditingBookingId) return;

    const container = document.getElementById('calendar-container');
    const psychologistProfileId = container ? container.dataset.psychologistProfileId : null;

    if (!psychologistProfileId) {
      showCustomAlert('Error: Missing psychologist profile ID');
      return;
    }

    showCustomConfirm('Are you sure you want to delete this booking?', () => {
      console.log(`[DEBUG] Deleting booking with ID: ${currentEditingBookingId}`);
      fetch(`/psychologist_profiles/${psychologistProfileId}/bookings/${currentEditingBookingId}/destroy_json.json`, {
        method: 'DELETE',
        headers: {
          'X-CSRF-Token': document.querySelector("[name='csrf-token']").content
        }
      })
      .then(response => {
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        return response.json();
      })
      .then(data => {
        if (data.success) {
          calendar.refetchEvents();
          closeModal('editBookingModal');
          showCustomAlert('Booking deleted successfully!');
        } else {
          showCustomAlert('Error deleting booking: ' + (data.error || 'Unknown error'));
        }
      })
      .catch(error => {
        console.error('Error:', error);
        showCustomAlert('Error deleting booking: ' + error.message);
      });
    });
  }

  function saveUnavailabilityChanges() {
    if (!currentEditingUnavailabilityId) return;

    const date = document.getElementById('unavailabilityDate').value;
    const startTime = document.getElementById('unavailabilityStartTime').value;
    const endTime = document.getElementById('unavailabilityEndTime').value;
    const container = document.getElementById('calendar-container');
    const psychologistProfileId = container ? container.dataset.psychologistProfileId : null;
    const psychologistTimezone = calendar.getOption('timeZone');

    if (!psychologistProfileId) {
      showCustomAlert('Error: Missing psychologist profile ID');
      return;
    }

    const startDateTime = moment.tz(`${date} ${startTime}`, 'YYYY-MM-DD HH:mm', psychologistTimezone).toDate();
    const endDateTime = moment.tz(`${date} ${endTime}`, 'YYYY-MM-DD HH:mm', psychologistTimezone).toDate();

    console.log(`[DEBUG] Saving unavailability changes for ID: ${currentEditingUnavailabilityId}`);
    console.log(`[DEBUG] Form Input (Psychologist TZ): ${date} ${startTime} to ${endTime}`);
    console.log(`[DEBUG] Converted to UTC for backend: Start: ${startDateTime.toISOString()}, End: ${endDateTime.toISOString()}`);
    console.log(`[DEBUG] Timezone being sent to backend: ${psychologistTimezone}`);

    const isAvailable = calendar.getEvents().some(event =>
      event.display === 'background' && startDateTime >= event.start && endDateTime <= event.end
    );

    if (!isAvailable) {
      showCustomAlert('The selected time slot is not available. Please choose a different time.');
      return;
    }

    const formData = {
      psychologist_unavailability: {
        id: currentEditingUnavailabilityId,
        start_time: startDateTime.toISOString(),
        end_time: endDateTime.toISOString(),
        reason: document.getElementById('unavailabilityReason').value,
        timezone: psychologistTimezone
      }
    };

    fetch(`/psychologist_profiles/${psychologistProfileId}/psychologist_unavailabilities/${currentEditingUnavailabilityId}/update_json`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector("[name='csrf-token']").content
      },
      body: JSON.stringify(formData)
    })
    .then(response => {
      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
      return response.json();
    })
    .then(data => {
      if (data.success) {
        calendar.refetchEvents();
        closeModal('editUnavailabilityModal');
        showCustomAlert('Unavailability updated successfully!');
      } else {
        showCustomAlert('Error updating unavailability: ' + (data.error || 'Unknown error'));
      }
    })
    .catch(error => {
      console.error('Error:', error);
      showCustomAlert('Error updating unavailability: ' + error.message);
    });
  }

  function deleteUnavailability() {
    if (!currentEditingUnavailabilityId) return;

    const container = document.getElementById('calendar-container');
    const psychologistProfileId = container ? container.dataset.psychologistProfileId : null;

    if (!psychologistProfileId) {
      showCustomAlert('Error: Missing psychologist profile ID');
      return;
    }

    showCustomConfirm('Are you sure you want to delete this unavailability?', () => {
      console.log(`[DEBUG] Deleting unavailability with ID: ${currentEditingUnavailabilityId}`);
      fetch(`/psychologist_profiles/${psychologistProfileId}/psychologist_unavailabilities/${currentEditingUnavailabilityId}/destroy_json.json`, {
        method: 'DELETE',
        headers: {
          'X-CSRF-Token': document.querySelector("[name='csrf-token']").content
        }
      })
      .then(response => {
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        return response.json();
      })
      .then(data => {
        if (data.success) {
          calendar.refetchEvents();
          closeModal('editUnavailabilityModal');
          showCustomAlert('Unavailability deleted successfully!');
        } else {
          showCustomAlert('Error deleting unavailability: ' + (data.error || 'Unknown error'));
        }
      })
      .catch(error => {
        console.error('Error:', error);
        showCustomAlert('Error deleting unavailability: ' + error.message);
      });
    });
  }

  function createUnavailability() {
    const container = document.getElementById('calendar-container');
    const psychologistProfileId = container ? container.dataset.psychologistProfileId : null;
    const psychologistTimezone = calendar.getOption('timeZone');

    if (!psychologistProfileId) {
      showCustomAlert('Error: Missing psychologist profile ID');
      return;
    }

    const date = document.getElementById('newUnavailabilityDate').value;
    const startTime = document.getElementById('newUnavailabilityStartTime').value;
    const endTime = document.getElementById('newUnavailabilityEndTime').value;

    const startDateTime = moment.tz(`${date} ${startTime}`, 'YYYY-MM-DD HH:mm', psychologistTimezone).toDate();
    const endDateTime = moment.tz(`${date} ${endTime}`, 'YYYY-MM-DD HH:mm', psychologistTimezone).toDate();

    console.log(`[DEBUG] Creating new unavailability.`);
    console.log(`[DEBUG] Form Input (Psychologist TZ): ${date} ${startTime} to ${endTime}`);
    console.log(`[DEBUG] Converted to UTC for backend: Start: ${startDateTime.toISOString()}, End: ${endDateTime.toISOString()}`);
    console.log(`[DEBUG] Timezone being sent to backend: ${psychologistTimezone}`);

    const isAvailable = calendar.getEvents().some(event =>
      event.display === 'background' && startDateTime >= event.start && endDateTime <= event.end
    );

    if (!isAvailable) {
      showCustomAlert('The selected time slot is not available. Please choose a different time.');
      return;
    }

    const formData = {
      psychologist_unavailability: {
        start_time: startDateTime.toISOString(),
        end_time: endDateTime.toISOString(),
        reason: document.getElementById('newUnavailabilityReason').value,
        psychologist_profile_id: psychologistProfileId,
        timezone: psychologistTimezone
      }
    };

    fetch(`/psychologist_profiles/${psychologistProfileId}/psychologist_unavailabilities/create_json.json`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector("[name='csrf-token']").content
      },
      body: JSON.stringify(formData)
    })
    .then(response => {
      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
      return response.json();
    })
    .then(data => {
      if (data.success) {
        calendar.refetchEvents();
        closeModal('createUnavailabilityModal');
        showCustomAlert('Unavailability created successfully!');
      } else {
        showCustomAlert('Error creating unavailability: ' + (data.error || 'Unknown error'));
      }
    })
    .catch(error => {
      console.error('Error:', error);
      showCustomAlert('Error creating unavailability: ' + error.message);
    });
  }

  function closeModal(modalId) {
    document.getElementById(modalId).classList.remove('is-active');
    currentEditingBookingId = null;
    currentEditingUnavailabilityId = null;
  }

  document.addEventListener('click', function(event) {
    if (event.target.classList.contains('modal-background')) {
      const modal = event.target.closest('.modal');
      if (modal) {
        modal.classList.remove('is-active');
        currentEditingBookingId = null;
        currentEditingUnavailabilityId = null;
      }
    }
  });
</script>  