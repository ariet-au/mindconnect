  <% if @psychologist_profile %>
  <div class="psychologist-nav">
          <div class="nav-content">
            <h3 class="nav-title">
              <i class="fas fa-user-cog"></i>
              <%= t('psychologist_profiles.show.dashboard') %>
            </h3>
            <div class="nav-actions">
              <%= link_to psychologist_profile_psychologist_availabilities_path(@psychologist_profile.id), class: "button is-primary-blue is-small" do %>
                <span class="icon"><i class="fas fa-calendar-alt"></i></span>
                <span><%= t('psychologist_profiles.show.manage_availability') %></span>
              <% end %>
              <%= link_to psychologist_bookings_psychologist_profile_bookings_path(@psychologist_profile.id), class: "button is-info is-small" do %>
                <span class="icon"><i class="fas fa-calendar-alt"></i></span>
                <span><%= t('psychologist_profiles.show.view_my_bookings') %></span>
              <% end %>
              <%= link_to internal_client_profiles_path, class: "button is-primary-blue is-small" do %>
                <span class="icon"><i class="fas fa-book"></i></span>
                <span><%= t('psychologist_profiles.show.notes') %></span>
              <% end %>
            </div>
          </div>
        </div>



    <div class="columns is-mobile is-multiline">
      <!-- Sidebar -->
      <div class="column is-narrow">
        <aside class="menu" style="background-color: #2C3E50; padding: 20px; height: 100vh; width: 200px; position: fixed; z-index: 100;">
          <p class="menu-label has-text-white">Menu</p>
          <ul class="menu-list">
            <li>
              <a href="<%= psychologist_dashboard_path %>" class="has-text-white <%= 'is-active' if current_page?(psychologist_dashboard_path) %>" style="<%= 'background-color: #34495E;' if current_page?(psychologist_dashboard_path) %>">
                <span class="icon"><i class="fas fa-home"></i></span> Dashboard
              </a>
            </li>
            <li>
              <a href="<%= psychologist_profile_psychologist_availabilities_path(@psychologist_profile) %>" class="has-text-white <%= 'is-active' if current_page?(psychologist_profile_psychologist_availabilities_path(@psychologist_profile)) %>" style="<%= 'background-color: #34495E;' if current_page?(psychologist_profile_psychologist_availabilities_path(@psychologist_profile)) %>">
                <span class="icon"><i class="fas fa-calendar-check"></i></span> Availability
              </a>
            </li>
            <li>
              <a href="<%= psychologist_profile_bookings_path(@psychologist_profile) %>" class="has-text-white <%= 'is-active' if current_page?(psychologist_profile_bookings_path(@psychologist_profile)) %>" style="<%= 'background-color: #34495E;' if current_page?(psychologist_profile_bookings_path(@psychologist_profile)) %>">
                <span class="icon"><i class="fas fa-book"></i></span> Bookings
              </a>
            </li>
            <li>
              <a href="<%= internal_client_profiles_path %>" class="has-text-white <%= 'is-active' if current_page?(internal_client_profiles_path) %>" style="<%= 'background-color: #34495E;' if current_page?(internal_client_profiles_path) %>">
                <span class="icon"><i class="fas fa-users"></i></span> Client Profiles
              </a>
            </li>
            <li>
              <a href="<%= edit_psychologist_profile_path(@psychologist_profile) %>" class="has-text-white <%= 'is-active' if current_page?(edit_psychologist_profile_path(@psychologist_profile)) %>" style="<%= 'background-color: #34495E;' if current_page?(edit_psychologist_profile_path(@psychologist_profile)) %>">
                <span class="icon"><i class="fas fa-user-edit"></i></span> Edit Profile
              </a>
            </li>
          </ul>
        </aside>
      </div>

      <!-- Main Content -->
      <div class="column" >
        <h1 class="title">Welcome, <%= @psychologist_profile.full_name || 'Psychologist' %></h1>

        <!-- Calendar Section -->
        <div class="box calendar">
          <div class="level">
            <div class="level-left">
              
            </div>
            

            <div class="level-right">
              <%= link_to "Book a Session", select_service_path(psychologist_id: current_user.psychologist_profile.id), class: "button is-primary" %>
            </div>
          </div>
          <div id="calendar-container"
              data-psychologist-profile-id="<%= @psychologist_profile.id %>"
              data-psychologist-timezone="<%= @psychologist_profile.timezone %>"
              data-display-timezone="<%= @display_timezone %>">
            <div class="timezone-info mb-2">
              <small class="text-muted">Calendar displayed in: <span id="displayedTimezone"></span></small>
            </div>
            <div id="calendar"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- Edit Booking Modal -->
    <div class="modal" id="editBookingModal">
      <div class="modal-background"></div>
      <div class="modal-card">
        <header class="modal-card-head">
          <p class="modal-card-title">Edit Booking</p>
          <button class="delete" aria-label="close" onclick="closeModal('editBookingModal')"></button>
        </header>
        <section class="modal-card-body">
          <p class="help">Times are shown in your local timezone (<span id="browserTimezone"></span>).</p>
          <form id="editBookingForm">
            <div class="field">
              <label class="label">Client</label>
              <div class="control">
                <input class="input" type="text" id="bookingClient" readonly>
              </div>
            </div>
            <div class="field">
              <label class="label">Service</label>
              <div class="control">
                <div class="select is-fullwidth">
                  <select id="bookingService" required>
                    <option value="">Select a service...</option>
                    <% current_user.psychologist_profile.user.services.each do |service| %>
                      <option value="<%= service.id %>" data-duration-minutes="<%= service.duration_minutes %>"><%= service.name %> (<%= service.duration_minutes %> min)</option>
                    <% end %>
                  </select>
                </div>
              </div>
            </div>
            <div class="field">
              <label class="label">Duration</label>
              <div class="control">
                <input class="input" type="text" id="bookingDuration" readonly>
              </div>
            </div>
            <div class="field">
              <label class="label">Date</label>
              <div class="control">
                <input class="input" type="date" id="bookingDate" required>
              </div>
            </div>
            <div class="field">
              <label class="label">Start Time</label>
              <div class="control">
                <input class="input" type="time" id="bookingStartTime" required>
              </div>
            </div>
            <div class="field">
              <label class="label">Status</label>
              <div class="control">
                <div class="select">
                  <select id="bookingStatus">
                    <option value="pending">Pending</option>
                    <option value="confirmed">Confirmed</option>
                    <option value="declined">Declined</option>
                    <option value="cancelled">Cancelled</option>
                   
                  </select>
                </div>
              </div>
            </div>
            <div class="field">
              <label class="label">Notes</label>
              <div class="control">
                <textarea class="textarea" id="bookingNotes" rows="3"></textarea>
              </div>
            </div>
            <div id="confirmationLinkSection" style="display: none;">
              <p><strong>Share this link with the client to confirm the booking:</strong></p>
              <p><a id="confirmationLink" href=""></a></p>
            </div>
          </form>
        </section>
        <footer class="modal-card-foot">
          <button class="button is-success" onclick="saveBookingChanges()">Save Changes</button>
          <button class="button is-danger" onclick="deleteBooking()">Delete Booking</button>
          <button class="button" onclick="closeModal('editBookingModal')">Cancel</button>
        </footer>
      </div>
    </div>

    


    <!-- Create New Unavailability Modal -->
    <div class="modal" id="createUnavailabilityModal">
      <div class="modal-background"></div>
      <div class="modal-card">
        <header class="modal-card-head">
          <p class="modal-card-title">Create Unavailability</p>
          <button class="delete" aria-label="close" onclick="closeModal('createUnavailabilityModal')"></button>
        </header>
        <section class="modal-card-body">
          <p class="help">Times are shown in your local timezone (<span id="browserTimezone"></span>).</p>
          <form id="createUnavailabilityForm">
            <div class="field">
              <label class="label">Date</label>
              <div class="control">
                <input class="input" type="date" id="newUnavailabilityDate" required>
              </div>
            </div>
            <div class="field">
              <label class="label">Start Time</label>
              <div class="control">
                <input class="input" type="time" id="newUnavailabilityStartTime" step="900" required>
              </div>
            </div>
            <div class="field">
              <label class="label">End Time</label>
              <div class="control">
                <input class="input" type="time" id="newUnavailabilityEndTime" step="900" required>
              </div>
            </div>
            <div class="field">
              <label class="label">Reason</label>
              <div class="control">
                <textarea class="textarea" id="newUnavailabilityReason" rows="3" placeholder="Optional reason for unavailability (required)" required></textarea>
              </div>
            </div>
          </form>
        </section>
        <footer class="modal-card-foot">
          <button class="button is-success" onclick="createUnavailability()">Create</button>
          <button class="button" onclick="closeModal('createUnavailabilityModal')">Cancel</button>
        </footer>
      </div>
    </div>


    <!-- Edit Unavailability Modal -->
    <div class="modal" id="editUnavailabilityModal">
      <div class="modal-background"></div>
      <div class="modal-card">
        <header class="modal-card-head">
          <p class="modal-card-title">Edit Unavailability</p>
          <button class="delete" aria-label="close" onclick="closeModal('editUnavailabilityModal')"></button>
        </header>
        <section class="modal-card-body">
          <p class="help">Times are shown in your local timezone (<span id="browserTimezone"></span>).</p>
          <form id="editUnavailabilityForm">
            <div class="field">
              <label class="label">Date</label>
              <div class="control">
                <input class="input" type="date" id="unavailabilityDate" required>
              </div>
            </div>
            <div class="field">
              <label class="label">Start Time</label>
              <div class="control">
                <input class="input" type="time" id="unavailabilityStartTime" step="900" required>
              </div>
            </div>
            <div class="field">
              <label class="label">End Time</label>
              <div class="control">
                <input class="input" type="time" id="unavailabilityEndTime" step="900" required>
              </div>
            </div>
            <div class="field">
              <label class="label">Reason</label>
              <div class="control">
                <textarea class="textarea" id="unavailabilityReason" rows="3" placeholder="Optional reason for unavailability"></textarea>
              </div>
            </div>
          </form>
        </section>
        <footer class="modal-card-foot">
          <button class="button is-success" onclick="saveUnavailabilityChanges()">Save Changes</button>
          <button class="button is-danger" onclick="deleteUnavailability()">Delete</button>
          <button class="button" onclick="closeModal('editUnavailabilityModal')">Cancel</button>
        </footer>
      </div>
    </div>




    <style>
      .menu-list a:hover {
        background-color: #34495E !important;
      }
      
      .calendar .fc-event {
        cursor: pointer;
      }
      
      .fc-event-booking {
        border-left: 4px solid #0d6efd;
      }
      
      .fc-event-unavailability {
        border-left: 4px solid #d9534f;
      }
      
      .modal-background {
        background-color: rgba(0, 0, 0, 0.6);
      }
      
      .fc-list-event:hover {
        background-color: #f8f9fa;
      }
    </style>
  <% else %>
    <div class="container">
      <div class="notification is-danger">
        <p>Error: No psychologist profile found. Please contact support.</p>
      </div>
    </div>
  <% end %>
















<script>
  // --- Custom Alert/Confirm Modals ---
    function showCustomAlert(message) {
      const modalId = 'customAlertDialog';
      const modal = document.getElementById(modalId);
      if (modal) {
        document.getElementById('customAlertMessage').textContent = message;
        modal.classList.add('is-active');
        modal.querySelector('.modal-close, .modal-background, .button').onclick = () => modal.classList.remove('is-active');
      } else {
        console.warn('Custom alert modal not found, falling back to browser alert:', message);
        alert(message);
      }
    }

    function showCustomConfirm(message, onConfirm) {
      const modalId = 'customConfirmDialog';
      const modal = document.getElementById(modalId);
      if (modal) {
        document.getElementById('customConfirmMessage').textContent = message;
        modal.classList.add('is-active');
        const confirmBtn = document.getElementById('customConfirmYes');
        const cancelBtn = document.getElementById('customConfirmNo');

        const cleanup = () => {
          modal.classList.remove('is-active');
          confirmBtn.onclick = null;
          cancelBtn.onclick = null;
        };

        confirmBtn.onclick = () => {
          onConfirm();
          cleanup();
        };
        cancelBtn.onclick = () => cleanup();
        modal.querySelector('.modal-close, .modal-background').onclick = () => cleanup();
      } else {
        console.warn('Custom confirm modal not found, falling back to browser confirm:', message);
        if (confirm(message)) {
          onConfirm();
        }
      }
    }
    // --- End Custom Alert/Confirm Modals --
</script>
<script>    
  
  let calendar;
  let currentEditingBookingId = null;
  let currentEditingUnavailabilityId = null;

  document.addEventListener('turbo:load', function () {
    initializeCalendar();
  });

  function generateBackgroundEvents(availabilities) {
    // Rails should already send start_iso and end_iso for each block
    // e.g., { start_iso: "2025-08-17T15:00:00+10:00", end_iso: "2025-08-17T18:00:00+10:00" }

    return availabilities.map(av => ({
      start: av.start_iso,
      end: av.end_iso,
      display: 'background',
      color: '#008000'
    }));
  }


  function initializeCalendar() {
    const calendarEl = document.getElementById('calendar');
    const container = document.getElementById('calendar-container');

    if (!calendarEl || !container) {
      console.error("Missing required elements or data for calendar initialization.");
      return;
    }

    const psychologistProfileId = container.dataset.psychologistProfileId;
    const displayedTimezoneSpan = document.getElementById('displayedTimezone');
    const browserTimezoneSpans = document.querySelectorAll('#browserTimezone');
    const browserTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;

    browserTimezoneSpans.forEach(span => span.textContent = browserTimezone);
    if (displayedTimezoneSpan) displayedTimezoneSpan.textContent = browserTimezone;

    console.log(`[DEBUG] Initializing calendar.`);
    console.log(`[DEBUG] Psychologist Profile ID: ${psychologistProfileId}`);
    console.log(`[DEBUG] Browser Timezone: ${browserTimezone}`);

    calendar = new FullCalendar.Calendar(calendarEl, {
      initialView: 'timeGridWeek',
      slotMinTime: "04:00:00",
      slotMaxTime: "23:00:00",
      allDaySlot: false,
      editable: true,
      eventStartEditable: true,
      eventDurationEditable: true,
      selectable: true,
      firstDay: 1,
      timeZone: 'local', // use browser timezone (DST-aware)
      displayEventTime: true,
      eventTimeFormat: { hour: 'numeric', minute: '2-digit', meridiem: 'short' },
      slotLabelFormat: { hour: 'numeric', minute: '2-digit', omitZeroMinute: false, meridiem: 'short' },
      headerToolbar: {
        left: 'prev,next today',
        center: 'title',
        right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek'
      },
      views: { listWeek: { buttonText: 'List' } },
      selectAllow: function(selectInfo) {
        const backgroundEvents = calendar.getEvents().filter(e => e.display === 'background');
        return backgroundEvents.some(event => selectInfo.start >= event.start && selectInfo.end <= event.end);
      },
      eventSources: [
        {
          url: `/psychologist_profiles/${psychologistProfileId}/psychologist_unavailabilities/`,
          method: 'GET',
          color: '#d9534f',
          textColor: 'white',
          failure: error => {
            console.error('Error fetching unavailabilities:', error);
            showCustomAlert('Error fetching unavailabilities.');
          }
        },
        {
          url: `/psychologist_profiles/${psychologistProfileId}/bookings/calendar_bookings.json`,
          method: 'GET',
          color: '#0d6efd',
          textColor: 'white',
          failure: error => {
            console.error('Error loading bookings:', error);
            showCustomAlert('Error loading bookings.');
          }
        },
        {
          url: `/psychologist_profiles/${psychologistProfileId}/psychologist_availabilities/calendar_blocks.json`,
          method: 'GET',
          display: 'background',
          color: '#008000',
          failure: error => {
            console.error('Error fetching availability blocks:', error);
            showCustomAlert('Error fetching availability blocks.');
          }
        }
      ],
      eventDidMount: function(info) {
        const isBooking = info.event.extendedProps.bookingId ||
                          info.event.extendedProps.type === 'booking' ||
                          info.event.extendedProps.clientName ||
                          info.event.extendedProps.status;

        if (isBooking) {
          info.el.style.cursor = 'pointer';
          info.el.title = 'Click to edit booking';
          info.el.classList.add('fc-event-booking');
        } else if (info.event.display !== 'background') {
          info.el.style.cursor = 'pointer';
          info.el.title = 'Click to edit unavailability';
          info.el.classList.add('fc-event-unavailability');
        }

        console.log(`[DEBUG] Event mounted: ${info.event.title || 'Availability Block'}`);
        console.log(`[DEBUG] Event time: ${info.event.startStr} - ${info.event.endStr}`);
      },
      eventClick: function(info) {
        if (!info.event || !info.event.id) return;

        const isBooking = info.event.extendedProps.bookingId ||
                          info.event.extendedProps.type === 'booking' ||
                          info.event.extendedProps.clientName ||
                          info.event.extendedProps.status;

        if (isBooking) {
          console.log('[DEBUG] Booking clicked:', info.event);
          openEditBookingModal(info.event);
        } else if (info.event.display === 'background') {
          console.log('[DEBUG] Background slot clicked → creating unavailability');
          openCreateUnavailabilityModal(info.event.start, info.event.end);
        } else {
          console.log('[DEBUG] Unavailability clicked:', info.event);
          openEditUnavailabilityModal(info.event);
        }
      },
      dateClick: function(info) {
        console.log('[DEBUG] Empty space clicked at:', info.dateStr);
        const start = info.date;
        const end = new Date(start.getTime() + 30 * 60 * 1000);
        openCreateUnavailabilityModal(start, end);
      },
      select: function(info) {
        console.log(`[DEBUG] Time slot selected. Start: ${info.startStr}, End: ${info.endStr}`);
        openCreateUnavailabilityModal(info.start, info.end);
        calendar.unselect();
      }
    });

    calendar.render();
  }


</script>
<script>

   




    document.addEventListener("DOMContentLoaded", () => {
      const zoneName = luxon.DateTime.local().zoneName;
      document.querySelectorAll("#browserTimezone").forEach(el => {
        el.textContent = zoneName;
      });
    });


  function openCreateUnavailabilityModal(start, end) {
        const psychologistTimezone = calendar.getOption('timeZone'); // e.g., "Australia/Sydney"

        console.log("openCreateUnavailabilityModal");

        console.log(`[DEBUG] Opening Create Unavailability Modal from calendar selection`);
        console.log(`[DEBUG] Selected Start (UTC): ${start.toISOString()}, End (UTC): ${end.toISOString()}`);

        // Convert from UTC to the psychologist's timezone
        const startZoned = luxon.DateTime.fromJSDate(start, { zone: 'utc' }).setZone(psychologistTimezone);
        const endZoned = luxon.DateTime.fromJSDate(end, { zone: 'utc' }).setZone(psychologistTimezone);

        const dateString = startZoned.toFormat('yyyy-MM-dd');
        const startTimeString = startZoned.toFormat('HH:mm');
        const endTimeString = endZoned.toFormat('HH:mm');

        console.log(`[DEBUG] Converted to Psychologist Timezone for form: ${dateString} ${startTimeString} to ${endTimeString}`);

        document.getElementById('newUnavailabilityDate').value = dateString;
        document.getElementById('newUnavailabilityStartTime').value = startTimeString;
        document.getElementById('newUnavailabilityEndTime').value = endTimeString;
        document.getElementById('newUnavailabilityReason').value = '';

        document.getElementById('createUnavailabilityModal').classList.add('is-active');
      }

      function createUnavailability() {
    const container = document.getElementById('calendar-container');
    const psychologistProfileId = container ? container.dataset.psychologistProfileId : null;
    const psychologistTimezone = container ? container.dataset.psychologistTimezone : 'UTC';

    if (!psychologistProfileId) {
      showCustomAlert('Error: Missing psychologist profile ID');
      return;
    }

    const date = document.getElementById('newUnavailabilityDate').value;
    const startTime = document.getElementById('newUnavailabilityStartTime').value;
    const endTime = document.getElementById('newUnavailabilityEndTime').value;
    const reason = document.getElementById('newUnavailabilityReason').value;

    if (!date || !startTime || !endTime) {
      showCustomAlert('Please fill in all required fields (date, start time, end time).');
      return;
    }

    // Parse date and time in the psychologist's timezone
    const startDateTime = luxon.DateTime.fromISO(`${date}T${startTime}`, { zone: psychologistTimezone }).toUTC();
    const endDateTime = luxon.DateTime.fromISO(`${date}T${endTime}`, { zone: psychologistTimezone }).toUTC();

    // Validate that end time is after start time
    if (endDateTime <= startDateTime) {
      showCustomAlert('End time must be after start time.');
      return;
    }

    console.log(`[DEBUG] Creating unavailability.`);
    console.log(`[DEBUG] Form Input (Psychologist TZ): ${date} ${startTime} - ${endTime}`);
    console.log(`[DEBUG] Converted to UTC for backend: Start: ${startDateTime.toISO()}, End: ${endDateTime.toISO()}`);
    console.log(`[DEBUG] Timezone being sent to backend: ${psychologistTimezone}`);

    const formData = {
      psychologist_unavailability: {
        psychologist_profile_id: psychologistProfileId,
        start_time: startDateTime.toISO(),
        end_time: endDateTime.toISO(),
        reason: reason || 'Unavailable', // Provide default reason to satisfy validation
        recurring: false, // Assume non-recurring for one-off unavailability
        timezone: psychologistTimezone
      }
    };

    fetch(`/psychologist_profiles/${psychologistProfileId}/psychologist_unavailabilities`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector("[name='csrf-token']").content
      },
      body: JSON.stringify(formData)
    })
      .then(response => {
        if (!response.ok) {
          return response.json().then(errorData => {
            throw new Error(errorData.error || JSON.stringify(errorData) || 'Unknown error');
          });
        }
        return response.json();
      })
      .then(data => {
        calendar.refetchEvents();
        closeModal('createUnavailabilityModal');
        showCustomAlert('Unavailability created successfully!');
      })
      .catch(error => {
        console.error('Error:', error);
        showCustomAlert('Error creating unavailability: ' + error.message);
      });
  }



    function saveUnavailabilityChanges() {
      const tz = luxon.DateTime.local().zoneName;
      const date = document.getElementById('unavailabilityDate').value;
      const startTime = document.getElementById('unavailabilityStartTime').value;
      const endTime = document.getElementById('unavailabilityEndTime').value;
      const reason = document.getElementById('unavailabilityReason').value;

      // Merge date and time in local tz, then convert to UTC for storage
      const start = luxon.DateTime.fromISO(`${date}T${startTime}`, { zone: tz }).toUTC();
      const end = luxon.DateTime.fromISO(`${date}T${endTime}`, { zone: tz }).toUTC();

      fetch(`/psychologist_unavailabilities/${currentEditingUnavailabilityId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          start_time: start.toISO(),
          end_time: end.toISO(),
          reason: reason
        })
      }).then(() => location.reload());
    }






    function createBooking() {
                        console.log("createbooking");

      const container = document.getElementById('calendar-container');
      const psychologistProfileId = container ? container.dataset.psychologistProfileId : null;
      const psychologistTimezone = calendar.getOption('timeZone');

      if (!psychologistProfileId) {
        showCustomAlert('Error: Missing psychologist profile ID');
        return;
      }

      const date = document.getElementById('newBookingDate').value;
      const startTime = document.getElementById('newBookingStartTime').value;
      const serviceSelect = document.getElementById('newBookingService');
      const serviceId = serviceSelect.value;
      const durationMinutes = parseInt(serviceSelect.options[serviceSelect.selectedIndex]?.dataset.durationMinutes || '0');
      const clientSelect = document.getElementById('newBookingClient');
      const clientId = clientSelect.value;
      const clientType = clientSelect.options[clientSelect.selectedIndex]?.dataset.clientType;

      if (!clientId) {
        showCustomAlert('Please select a client.');
        return;
      }

      if (!serviceId) {
        showCustomAlert('Please select a service.');
        return;
      }

      const startDateTime = moment.tz(`${date} ${startTime}`, 'YYYY-MM-DD HH:mm', psychologistTimezone).toDate();
      const endDateTime = new Date(startDateTime.getTime() + durationMinutes * 60000);

      console.log(`[DEBUG] Creating new booking.`);
      console.log(`[DEBUG] Form Input (Psychologist TZ): ${date} ${startTime}`);
      console.log(`[DEBUG] Converted to UTC for backend: Start: ${startDateTime.toISOString()}, End: ${endDateTime.toISOString()}`);
      console.log(`[DEBUG] Timezone being sent to backend: ${psychologistTimezone}`);

      const isAvailable = calendar.getEvents().some(event =>
        event.display === 'background' && startDateTime >= event.start && endDateTime <= event.end
      );

      if (!isAvailable) {
        showCustomAlert('The selected time slot is not available. Please choose a different time.');
        return;
      }

      const formData = {
        booking: {
          start_time: startDateTime.toISOString(),
          end_time: endDateTime.toISOString(),
          status: document.getElementById('newBookingStatus').value,
          notes: document.getElementById('newBookingNotes').value,
          psychologist_profile_id: psychologistProfileId,
          service_id: serviceId,
          timezone: psychologistTimezone
        }
      };

      if (clientType === 'internal') {
        formData.booking.internal_client_profile_id = clientId;
      } else if (clientType === 'external') {
        formData.booking.client_profile_id = clientId;
      }

      fetch(`/psychologist_profiles/${psychologistProfileId}/bookings/create_json.json`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector("[name='csrf-token']").content
        },
        body: JSON.stringify(formData)
      })
      .then(response => {
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        return response.json();
      })
      .then(data => {
        if (data.success) {
          calendar.refetchEvents();
          closeModal('createBookingModal');
          showCustomAlert('Booking created successfully!');
        } else {
          showCustomAlert('Error creating booking: ' + (data.error || 'Unknown error'));
        }
      })
      .catch(error => {
        console.error('Error:', error);
        showCustomAlert('Error creating booking: ' + error.message);
      });
    }

    function saveBookingChanges() {
                        console.log("save booking");

      if (!currentEditingBookingId) return;

      const date = document.getElementById('bookingDate').value;
      const startTime = document.getElementById('bookingStartTime').value;
      const serviceSelect = document.getElementById('bookingService');
      const serviceId = serviceSelect.value;
      const durationMinutes = parseInt(serviceSelect.options[serviceSelect.selectedIndex]?.dataset.durationMinutes || '0');
      const container = document.getElementById('calendar-container');
      const psychologistProfileId = container ? container.dataset.psychologistProfileId : null;
      const psychologistTimezone = calendar.getOption('timeZone');

      if (!psychologistProfileId) {
        showCustomAlert('Error: Missing psychologist profile ID');
        return;
      }

      if (!serviceId) {
        showCustomAlert('Please select a service.');
        return;
      }

      const startDateTime = moment.tz(`${date} ${startTime}`, 'YYYY-MM-DD HH:mm', psychologistTimezone).toDate();
      const endDateTime = new Date(startDateTime.getTime() + durationMinutes * 60000);

      console.log(`[DEBUG] Saving booking changes for ID: ${currentEditingBookingId}`);
      console.log(`[DEBUG] Form Input (Psychologist TZ): ${date} ${startTime}`);
      console.log(`[DEBUG] Converted to UTC for backend: Start: ${startDateTime.toISOString()}, End: ${endDateTime.toISOString()}`);
      console.log(`[DEBUG] Timezone being sent to backend: ${psychologistTimezone}`);

      const isAvailable = calendar.getEvents().some(event =>
        event.display === 'background' && startDateTime >= event.start && endDateTime <= event.end
      );

      if (!isAvailable) {
        showCustomAlert('The selected time slot is not available. Please choose a different time.');
        return;
      }

      const formData = {
        booking: {
          start_time: startDateTime.toISOString(),
          end_time: endDateTime.toISOString(),
          status: document.getElementById('bookingStatus').value,
          notes: document.getElementById('bookingNotes').value,
          service_id: serviceId,
          timezone: psychologistTimezone
        }
      };

      fetch(`/psychologist_profiles/${psychologistProfileId}/bookings/${currentEditingBookingId}/update_json`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector("[name='csrf-token']").content
        },
        body: JSON.stringify(formData)
      })
      .then(response => {
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        return response.json();
      })
      .then(data => {
        if (data.success) {
          calendar.refetchEvents();
          closeModal('editBookingModal');
          showCustomAlert('Booking updated successfully!');
        } else {
          showCustomAlert('Error updating booking: ' + (data.error || 'Unknown error'));
        }
      })
      .catch(error => {
        console.error('Error:', error);
        showCustomAlert('Error updating booking: ' + error.message);
      });
    }
    
    function openEditBookingModal(event) {
      console.log("Edit booking");
      currentEditingBookingId = event.extendedProps.bookingId || event.id;

      const clientName = event.extendedProps.clientName || 'Unknown Client';
      const status = event.extendedProps.status || 'pending';
      const notes = event.extendedProps.notes || '';
      const createdBy = event.extendedProps.created_by || '';
      const confirmationToken = event.extendedProps.confirmation_token || '';

      console.log(`[DEBUG] Opening Edit Booking Modal for ID: ${currentEditingBookingId}`);
      console.log('[DEBUG] service_id:', event.extendedProps.service_id, 'Type:', typeof event.extendedProps.service_id);

      // Time conversion
      const eventStart = moment(event.start).tz(calendar.getOption('timeZone'));
      const dateString = eventStart.format('YYYY-MM-DD');
      const startTimeString = eventStart.format('HH:mm');

      // Fill form fields
      document.getElementById('bookingClient').value = clientName;
      document.getElementById('bookingService').value = String(event.extendedProps.service_id || '');
      document.getElementById('bookingDate').value = dateString;
      document.getElementById('bookingStartTime').value = startTimeString;

      const normalizedStatus = (status || '').toLowerCase();
      document.getElementById('bookingStatus').value = normalizedStatus;
      document.getElementById('bookingNotes').value = notes;

      // Duration handling
      const serviceSelect = document.getElementById('bookingService');
      let durationMinutes = event.extendedProps.duration_minutes;

      if (!durationMinutes) {
        const selectedOption = serviceSelect.querySelector(`option[value="${serviceSelect.value}"]`);
        if (selectedOption) {
          durationMinutes = selectedOption.dataset.durationMinutes;
        }
      }
      const durationField = document.getElementById('bookingDuration');
      if (durationField) {
        durationField.value = durationMinutes || '';
      }

      // Confirmation link
      const confirmationLinkSection = document.getElementById('confirmationLinkSection');
      const confirmationLink = document.getElementById('confirmationLink');
      if (normalizedStatus === 'pending' && createdBy === 'psychologist' && confirmationToken) {
        const link = `/bookings/${currentEditingBookingId}/confirm?token=${confirmationToken}`;
        confirmationLink.href = link;
        confirmationLink.textContent = link;
        confirmationLinkSection.style.display = 'block';
      } else {
        confirmationLinkSection.style.display = 'none';
      }

      // Show modal
      document.getElementById('editBookingModal').classList.add('is-active');
    }

    function deleteBooking() {
                        console.log("delete booking");

      if (!currentEditingBookingId) return;

      const container = document.getElementById('calendar-container');
      const psychologistProfileId = container ? container.dataset.psychologistProfileId : null;

      if (!psychologistProfileId) {
        showCustomAlert('Error: Missing psychologist profile ID');
        return;
      }

      showCustomConfirm('Are you sure you want to delete this booking?', () => {
        console.log(`[DEBUG] Deleting booking with ID: ${currentEditingBookingId}`);
        fetch(`/psychologist_profiles/${psychologistProfileId}/bookings/${currentEditingBookingId}/destroy_json.json`, {
          method: 'DELETE',
          headers: {
            'X-CSRF-Token': document.querySelector("[name='csrf-token']").content
          }
        })
        .then(response => {
          if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
          return response.json();
        })
        .then(data => {
          if (data.success) {
            calendar.refetchEvents();
            closeModal('editBookingModal');
            showCustomAlert('Booking deleted successfully!');
          } else {
            showCustomAlert('Error deleting booking: ' + (data.error || 'Unknown error'));
          }
        })
        .catch(error => {
          console.error('Error:', error);
          showCustomAlert('Error deleting booking: ' + error.message);
        });
      });
    }







  function openEditUnavailabilityModal(event) {
      if (!event) {
        console.warn("[DEBUG] openEditUnavailabilityModal called with no event");
        return;
      }

      console.log("[DEBUG] Opening modal for event:", event);
      console.log("[DEBUG] Event ID:", event.id, "ExtendedProps ID:", event.extendedProps?.id);

      // Store the ID globally
      window.currentEditingUnavailabilityId = event.id || event.extendedProps.id;
      console.log("[DEBUG] Set window.currentEditingUnavailabilityId =", window.currentEditingUnavailabilityId);

      const tz = event.extendedProps.timezone || luxon.DateTime.local().zoneName;

      // Convert JS Date to Luxon DateTime in the event timezone
      const start = luxon.DateTime.fromJSDate(event.start).setZone(tz);
      const end = luxon.DateTime.fromJSDate(event.end).setZone(tz);

      // Fill modal fields
      document.getElementById('unavailabilityDate').value = start.toFormat('yyyy-MM-dd');
      document.getElementById('unavailabilityStartTime').value = start.toFormat('HH:mm');
      document.getElementById('unavailabilityEndTime').value = end.toFormat('HH:mm');
      document.getElementById('unavailabilityReason').value = event.extendedProps.reason || '';

      // Show timezone in modal
      const tzSpan = document.getElementById('browserTimezone');
      if (tzSpan) tzSpan.textContent = tz;

      // Open modal
      const modal = document.getElementById('editUnavailabilityModal');
      if (modal) modal.classList.add('is-active');
  }

  function deleteUnavailability() {
    console.log("[DEBUG] deleteUnavailability() called");

    const id = window.currentEditingUnavailabilityId;
    console.log("[DEBUG] window.currentEditingUnavailabilityId =", id);

    if (!id) {
      console.warn("[DEBUG] No currentEditingUnavailabilityId found, aborting.");
      return;
    }

    const container = document.getElementById('calendar-container');
    console.log("[DEBUG] Container element:", container);

    const psychologistProfileId = container ? container.dataset.psychologistProfileId : null;
    console.log("[DEBUG] Psychologist Profile ID:", psychologistProfileId);

    if (!psychologistProfileId) {
      showCustomAlert('Error: Missing psychologist profile ID');
      return;
    }

    showCustomConfirm('Are you sure you want to delete this unavailability?', () => {
      console.log(`[DEBUG] Confirmed deletion for unavailability ID: ${id}`);

      const url = `/psychologist_profiles/${psychologistProfileId}/psychologist_unavailabilities/${id}.json`;
      console.log("[DEBUG] Fetch URL:", url);

      fetch(url, {
        method: 'DELETE',
        headers: {
          'X-CSRF-Token': document.querySelector("[name='csrf-token']").content
        }
      })
      .then(response => {
        console.log("[DEBUG] Raw response:", response);
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        return response.json();
      })
      .then(data => {
        console.log("[DEBUG] Parsed response JSON:", data);
        if (data.success) {
          console.log("[DEBUG] Delete success → refetching events & closing modal");
          calendar.refetchEvents();
          closeModal('editUnavailabilityModal');
          showCustomAlert('Unavailability deleted successfully!');
        } else {
          console.warn("[DEBUG] Delete failed:", data.error || "Unknown error");
          showCustomAlert('Error deleting unavailability: ' + (data.error || 'Unknown error'));
        }
      })
      .catch(error => {
        console.error("[DEBUG] Fetch error caught:", error);
        showCustomAlert('Error deleting unavailability: ' + error.message);
      });
    });
  }


    function saveUnavailability() {
      const tz = 'Australia/Sydney'; // or get dynamically

      const date       = document.getElementById('unavailabilityDate').value;
      const startTime  = document.getElementById('unavailabilityStartTime').value;
      const endTime    = document.getElementById('unavailabilityEndTime').value;
      const reason     = document.getElementById('unavailabilityReason').value;

      // Merge into DateTime objects
      const startInTz = luxon.DateTime.fromISO(`${date}T${startTime}`, { zone: tz });
      const endInTz   = luxon.DateTime.fromISO(`${date}T${endTime}`, { zone: tz });

      // Convert to UTC for storage
      const startUtc = startInTz.toUTC().toISO();
      const endUtc   = endInTz.toUTC().toISO();

      // Send to server
      fetch(`/psychologist_unavailabilities/${currentEditingUnavailabilityId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          start_time: startUtc,
          end_time: endUtc,
          reason: reason
        })
      });
    }





    function closeModal(modalId) {
                        console.log("close modal");

      document.getElementById(modalId).classList.remove('is-active');
      currentEditingBookingId = null;
      currentEditingUnavailabilityId = null;
    }

    document.addEventListener('click', function(event) {
      if (event.target.classList.contains('modal-background')) {
        const modal = event.target.closest('.modal');
        if (modal) {
          modal.classList.remove('is-active');
          currentEditingBookingId = null;
          currentEditingUnavailabilityId = null;
        }
      }
    });
</script>  