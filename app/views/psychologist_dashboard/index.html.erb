<% if @psychologist_profile %>
  <div class="columns is-mobile is-multiline">
    <!-- Sidebar -->
    <div class="column is-narrow">
      <aside class="menu" style="background-color: #2C3E50; padding: 20px; height: 100vh; width: 200px; position: fixed; z-index: 100;">
        <p class="menu-label has-text-white">Menu</p>
        <ul class="menu-list">
          <li>
            <a href="<%= psychologist_dashboard_path %>" class="has-text-white <%= 'is-active' if current_page?(psychologist_dashboard_path) %>" style="<%= 'background-color: #34495E;' if current_page?(psychologist_dashboard_path) %>">
              <span class="icon"><i class="fas fa-home"></i></span> Dashboard
            </a>
          </li>
          <li>
            <a href="<%= psychologist_profile_psychologist_availabilities_path(@psychologist_profile) %>" class="has-text-white <%= 'is-active' if current_page?(psychologist_profile_psychologist_availabilities_path(@psychologist_profile)) %>" style="<%= 'background-color: #34495E;' if current_page?(psychologist_profile_psychologist_availabilities_path(@psychologist_profile)) %>">
              <span class="icon"><i class="fas fa-calendar-check"></i></span> Availability
            </a>
          </li>
          <li>
            <a href="<%= psychologist_profile_bookings_path(@psychologist_profile) %>" class="has-text-white <%= 'is-active' if current_page?(psychologist_profile_bookings_path(@psychologist_profile)) %>" style="<%= 'background-color: #34495E;' if current_page?(psychologist_profile_bookings_path(@psychologist_profile)) %>">
              <span class="icon"><i class="fas fa-book"></i></span> Bookings
            </a>
          </li>
          <li>
            <a href="<%= internal_client_profiles_path %>" class="has-text-white <%= 'is-active' if current_page?(internal_client_profiles_path) %>" style="<%= 'background-color: #34495E;' if current_page?(internal_client_profiles_path) %>">
              <span class="icon"><i class="fas fa-users"></i></span> Client Profiles
            </a>
          </li>
          <li>
            <a href="<%= edit_psychologist_profile_path(@psychologist_profile) %>" class="has-text-white <%= 'is-active' if current_page?(edit_psychologist_profile_path(@psychologist_profile)) %>" style="<%= 'background-color: #34495E;' if current_page?(edit_psychologist_profile_path(@psychologist_profile)) %>">
              <span class="icon"><i class="fas fa-user-edit"></i></span> Edit Profile
            </a>
          </li>
        </ul>
      </aside>
    </div>

    <!-- Main Content -->
    <div class="column" style="margin-left: 200px; padding: 20px;">
      <h1 class="title">Welcome, <%= @psychologist_profile.full_name || 'Psychologist' %></h1>

      <!-- Calendar Section -->
      <div class="box calendar">
        <div class="level">
          <div class="level-left">
            <h2 class="subtitle">Your Schedule</h2>
          </div>
          <div class="level-right">
            <button class="button is-primary" onclick="openCreateBookingModal()">
              <span class="icon"><i class="fas fa-plus"></i></span>
              <span>New Booking</span>
            </button>
          </div>
        </div>
        <div id="calendar-container"
             data-psychologist-profile-id="<%= @psychologist_profile.id %>"
             data-psychologist-timezone="<%= @psychologist_profile.timezone %>">
          <div class="timezone-info mb-2">
            <small class="text-muted">Calendar displayed in: <span id="displayedTimezone"></span></small>
          </div>
          <div id="calendar"></div>
        </div>
      </div>
    </div>
  </div>

  <!-- Edit Booking Modal -->
  <div class="modal" id="editBookingModal">
    <div class="modal-background"></div>
    <div class="modal-card">
      <header class="modal-card-head">
        <p class="modal-card-title">Edit Booking</p>
        <button class="delete" aria-label="close" onclick="closeModal('editBookingModal')"></button>
      </header>
      <section class="modal-card-body">
        <p class="help">Times are shown in your local timezone (<span id="browserTimezone"></span>).</p>
        <form id="editBookingForm">
          <div class="field">
            <label class="label">Client</label>
            <div class="control">
              <input class="input" type="text" id="bookingClient" readonly>
            </div>
          </div>
          <div class="field">
            <label class="label">Service</label>
            <div class="control">
              <div class="select is-fullwidth">
                <select id="bookingService" required>
                  <option value="">Select a service...</option>
                  <% current_user.psychologist_profile.user.services.each do |service| %>
                    <option value="<%= service.id %>" data-duration-minutes="<%= service.duration_minutes %>"><%= service.name %> (<%= service.duration_minutes %> min)</option>
                  <% end %>
                </select>
              </div>
            </div>
          </div>
          <div class="field">
            <label class="label">Date</label>
            <div class="control">
              <input class="input" type="date" id="bookingDate" required>
            </div>
          </div>
          <div class="field">
            <label class="label">Start Time</label>
            <div class="control">
              <input class="input" type="time" id="bookingStartTime" required>
            </div>
          </div>
          <div class="field">
            <label class="label">Status</label>
            <div class="control">
              <div class="select">
                <select id="bookingStatus">
                  <option value="pending">Pending</option>
                  <option value="confirmed">Confirmed</option>
                  <option value="cancelled">Cancelled</option>
                  <option value="completed">Completed</option>
                </select>
              </div>
            </div>
          </div>
          <div class="field">
            <label class="label">Notes</label>
            <div class="control">
              <textarea class="textarea" id="bookingNotes" rows="3"></textarea>
            </div>
          </div>
          <div id="confirmationLinkSection" style="display: none;">
            <p><strong>Share this link with the client to confirm the booking:</strong></p>
            <p><a id="confirmationLink" href=""></a></p>
          </div>
        </form>
      </section>
      <footer class="modal-card-foot">
        <button class="button is-success" onclick="saveBookingChanges()">Save Changes</button>
        <button class="button is-danger" onclick="deleteBooking()">Delete Booking</button>
        <button class="button" onclick="closeModal('editBookingModal')">Cancel</button>
      </footer>
    </div>
  </div>

  <!-- Edit Unavailability Modal -->
  <div class="modal" id="editUnavailabilityModal">
    <div class="modal-background"></div>
    <div class="modal-card">
      <header class="modal-card-head">
        <p class="modal-card-title">Edit Unavailability</p>
        <button class="delete" aria-label="close" onclick="closeModal('editUnavailabilityModal')"></button>
      </header>
      <section class="modal-card-body">
        <p class="help">Times are shown in your local timezone (<span id="browserTimezone"></span>).</p>
        <form id="editUnavailabilityForm">
          <div class="field">
            <label class="label">Date</label>
            <div class="control">
              <input class="input" type="date" id="unavailabilityDate" required>
            </div>
          </div>
          <div class="field">
            <label class="label">Start Time</label>
            <div class="control">
              <input class="input" type="time" id="unavailabilityStartTime" step="900" required>
            </div>
          </div>
          <div class="field">
            <label class="label">End Time</label>
            <div class="control">
              <input class="input" type="time" id="unavailabilityEndTime" step="900" required>
            </div>
          </div>
          <div class="field">
            <label class="label">Reason</label>
            <div class="control">
              <textarea class="textarea" id="unavailabilityReason" rows="3" placeholder="Optional reason for unavailability"></textarea>
            </div>
          </div>
        </form>
      </section>
      <footer class="modal-card-foot">
        <button class="button is-success" onclick="saveUnavailabilityChanges()">Save Changes</button>
        <button class="button is-danger" onclick="deleteUnavailability()">Delete</button>
        <button class="button" onclick="closeModal('editUnavailabilityModal')">Cancel</button>
      </footer>
    </div>
  </div>

  <!-- Create New Booking Modal -->
  <div class="modal" id="createBookingModal">
    <div class="modal-background"></div>
    <div class="modal-card">
      <header class="modal-card-head">
        <p class="modal-card-title">Create New Booking</p>
        <button class="delete" aria-label="close" onclick="closeModal('createBookingModal')"></button>
      </header>
      <section class="modal-card-body">
        <p class="help">Times are shown in your local timezone (<span id="browserTimezone"></span>).</p>
        <form id="createBookingForm">
          <div class="field">
            <label class="label">Client</label>
            <div class="control">
              <div class="select is-fullwidth">
                <select id="newBookingClient" required>
                  <option value="">Select a client...</option>
                  <% current_user.psychologist_profile.internal_client_profiles.each do |client| %>
                    <option value="<%= client.id %>" data-client-type="internal"><%= client.first_name %> (Internal)</option>
                  <% end %>
                  <% current_user.psychologist_profile.bookings.where.not(client_profile_id: nil).distinct.pluck(:client_profile_id).each do |client_id| %>
                    <% client = ClientProfile.find(client_id) %>
                    <option value="<%= client.id %>" data-client-type="external"><%= client.first_name %> (External)</option>
                  <% end %>
                </select>
              </div>
            </div>
          </div>
          <div class="field">
            <label class="label">Service</label>
            <div class="control">
              <div class="select is-fullwidth">
                <select id="newBookingService" required>
                  <option value="">Select a service...</option>
                  <% current_user.psychologist_profile.user.services.each do |service| %>
                    <option value="<%= service.id %>" data-duration-minutes="<%= service.duration_minutes %>"><%= service.name %> (<%= service.duration_minutes %> min)</option>
                  <% end %>
                </select>
              </div>
            </div>
          </div>
          <div class="field">
            <label class="label">Date</label>
            <div class="control">
              <input class="input" type="date" id="newBookingDate" required>
            </div>
          </div>
          <div class="field">
            <label class="label">Start Time</label>
            <div class="control">
              <input class="input" type="time" id="newBookingStartTime" step="900" list="timeOptions" required>
              <datalist id="timeOptions">
                <% (6..21).each do |hour| %>
                  <option value="<%= sprintf('%02d:00', hour) %>"></option>
                  <option value="<%= sprintf('%02d:30', hour) %>"></option>
                <% end %>
                <option value="22:00"></option>
              </datalist>
            </div>
          </div>
          <div class="field">
            <label class="label">Status</label>
            <div class="control">
              <div class="select">
                <select id="newBookingStatus">
                  <option value="pending">Pending</option>
                  <option value="confirmed">Confirmed</option>
                </select>
              </div>
            </div>
          </div>
          <div class="field">
            <label class="label">Notes</label>
            <div class="control">
              <textarea class="textarea" id="newBookingNotes" rows="3" placeholder="Optional notes for this booking"></textarea>
            </div>
          </div>
        </form>
      </section>
      <footer class="modal-card-foot">
        <button class="button is-success" onclick="createBooking()">Create Booking</button>
        <button class="button" onclick="closeModal('createBookingModal')">Cancel</button>
      </footer>
    </div>
  </div>

  <!-- Create New Unavailability Modal -->
  <div class="modal" id="createUnavailabilityModal">
    <div class="modal-background"></div>
    <div class="modal-card">
      <header class="modal-card-head">
        <p class="modal-card-title">Create Unavailability</p>
        <button class="delete" aria-label="close" onclick="closeModal('createUnavailabilityModal')"></button>
      </header>
      <section class="modal-card-body">
        <p class="help">Times are shown in your local timezone (<span id="browserTimezone"></span>).</p>
        <form id="createUnavailabilityForm">
          <div class="field">
            <label class="label">Date</label>
            <div class="control">
              <input class="input" type="date" id="newUnavailabilityDate" required>
            </div>
          </div>
          <div class="field">
            <label class="label">Start Time</label>
            <div class="control">
              <input class="input" type="time" id="newUnavailabilityStartTime" step="900" required>
            </div>
          </div>
          <div class="field">
            <label class="label">End Time</label>
            <div class="control">
              <input class="input" type="time" id="newUnavailabilityEndTime" step="900" required>
            </div>
          </div>
          <div class="field">
            <label class="label">Reason</label>
            <div class="control">
              <textarea class="textarea" id="newUnavailabilityReason" rows="3" placeholder="Optional reason for unavailability"></textarea>
            </div>
          </div>
        </form>
      </section>
      <footer class="modal-card-foot">
        <button class="button is-success" onclick="createUnavailability()">Create</button>
        <button class="button" onclick="closeModal('createUnavailabilityModal')">Cancel</button>
      </footer>
    </div>
  </div>

  <!-- FullCalendar Initialization Script -->
  <script>
    let calendar;
    let currentEditingBookingId = null;
    let currentEditingUnavailabilityId = null;
    let availabilities = [];

    document.addEventListener('turbo:load', function () {
      initializeCalendar();
      loadAvailabilities();
      const browserTimezoneSpans = document.querySelectorAll('#browserTimezone');
      const browserTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
      browserTimezoneSpans.forEach(span => {
        span.textContent = browserTimezone;
      });
    });

    function initializeCalendar() {
      const calendarEl = document.getElementById('calendar');
      const container = document.getElementById('calendar-container');
      const psychologistProfileId = container ? container.dataset.psychologistProfileId : null;
      const displayedTimezoneSpan = document.getElementById('displayedTimezone');

      if (!calendarEl || !container || !psychologistProfileId) {
        console.error("Missing required elements or data for calendar initialization.");
        return;
      }

      if (displayedTimezoneSpan) {
        displayedTimezoneSpan.textContent = Intl.DateTimeFormat().resolvedOptions().timeZone;
      }

      calendar = new FullCalendar.Calendar(calendarEl, {
        initialView: 'timeGridWeek',
        slotMinTime: "04:00:00",
        slotMaxTime: "23:00:00",
        allDaySlot: false,
        editable: false,
        selectable: true,
        selectAllow: function(selectInfo) {
          return isTimeAvailable(selectInfo.start, selectInfo.end);
        },
        firstDay: 1,
        timeZone: 'local',
        displayEventTime: true,
        eventTimeFormat: { hour: 'numeric', minute: '2-digit', meridiem: 'short' },
        slotLabelFormat: { hour: 'numeric', minute: '2-digit', omitZeroMinute: false, meridiem: 'short' },
        headerToolbar: {
          left: 'prev,next today',
          center: 'title',
          right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek'
        },
        views: {
          listWeek: { buttonText: 'List' }
        },
        eventSources: [
          {
            url: `/psychologist_profiles/${psychologistProfileId}/psychologist_unavailabilities/`,
            method: 'GET',
            color: '#d9534f',
            textColor: 'white',
            failure: function() {
              alert('Error fetching unavailabilities.');
            }
          },
          {
            url: `/psychologist_profiles/${psychologistProfileId}/bookings/calendar_bookings.json`,
            method: 'GET',
            color: '#0d6efd',
            textColor: 'white',
            failure: function() {
              alert('Error loading bookings.');
            }
          },
          {
            url: `/psychologist_profiles/${psychologistProfileId}/psychologist_availabilities/calendar_blocks.json`,
            method: 'GET',
            display: 'background',
            color: '#d4edda',
            success: function(data) {
              console.log('Availability data:', data);
            },
            failure: function() {
              alert('Error fetching availability blocks.');
            }
          }
        ],
        eventClick: function(info) {
          const isBooking = info.event.extendedProps.bookingId || info.event.extendedProps.type === 'booking' ||
                           info.event.extendedProps.clientName || info.event.extendedProps.status;
          if (isBooking) {
            openEditBookingModal(info.event);
          } else {
            openEditUnavailabilityModal(info.event);
          }
        },
        select: function(info) {
          if (isTimeAvailable(info.start, info.end)) {
            openCreateUnavailabilityModal(info.start, info.end);
          } else {
            alert('You can only create unavailabilities within your available hours.');
          }
          calendar.unselect();
        },
        eventDidMount: function(info) {
          const isBooking = info.event.extendedProps.bookingId || info.event.extendedProps.type === 'booking' ||
                           info.event.extendedProps.clientName || info.event.extendedProps.status;
          if (isBooking) {
            info.el.style.cursor = 'pointer';
            info.el.title = 'Click to edit booking';
            info.el.classList.add('fc-event-booking');
          } else {
            info.el.style.cursor = 'pointer';
            info.el.title = 'Click to edit unavailability';
            info.el.classList.add('fc-event-unavailability');
          }
        }
      });

      calendar.render();
    }

    function loadAvailabilities() {
      const container = document.getElementById('calendar-container');
      const psychologistProfileId = container ? container.dataset.psychologistProfileId : null;

      if (!psychologistProfileId) {
        console.error('Missing psychologist profile ID');
        return;
      }

      fetch(`/psychologist_profiles/${psychologistProfileId}/psychologist_availabilities/calendar_blocks.json`)
        .then(response => {
          if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
          return response.json();
        })
        .then(data => {
          availabilities = data;
          console.log('Availabilities loaded:', availabilities);
          if (availabilities.length === 0) {
            console.warn('No availabilities found for psychologist');
          }
        })
        .catch(error => {
          console.error('Error loading calendar blocks:', error);
          availabilities = [];
        });
    }

    function isTimeAvailable(start, end) {
      const container = document.getElementById('calendar-container');
      const psychologistProfileId = container ? container.dataset.psychologistProfileId : null;
      const psychologistTimeZone = container ? container.dataset.psychologistTimezone : 'UTC';

      if (!psychologistProfileId) {
        console.error('Missing psychologist profile ID');
        return false;
      }

      console.log('Checking availability for:', { start, end, availabilities });

      const formatter = new Intl.DateTimeFormat('en-US', {
        timeZone: psychologistTimeZone,
        weekday: 'long',
        hour: 'numeric',
        minute: 'numeric',
        hour12: false
      });

      const startParts = formatter.formatToParts(start);
      const startDay = startParts.find(p => p.type === 'weekday').value;
      const startHour = parseInt(startParts.find(p => p.type === 'hour').value);
      const startMinute = parseInt(startParts.find(p => p.type === 'minute').value);
      const startTime = startHour * 60 + startMinute;

      const endParts = formatter.formatToParts(end);
      const endHour = parseInt(endParts.find(p => p.type === 'hour').value);
      const endMinute = parseInt(endParts.find(p => p.type === 'minute').value);
      const endTime = endHour * 60 + endMinute;

      const dayOfWeekMap = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

      if (availabilities.length === 0) {
        console.warn('No availabilities loaded, allowing selection');
        return true; // Allow selection if no availabilities are set
      }

      const isWithinAvailability = availabilities.some(availability => {
        const availDay = dayOfWeekMap[availability.daysOfWeek[0]];
        const availStartTime = parseTime(availability.startTime);
        const availEndTime = parseTime(availability.endTime);
        const isAvailable = availDay.toLowerCase() === startDay.toLowerCase() &&
                            startTime >= availStartTime &&
                            endTime <= availEndTime;
        console.log('Checking availability:', { availDay, startDay, startTime, availStartTime, endTime, availEndTime, isAvailable });
        return isAvailable;
      });

      return isWithinAvailability;
    }

    function parseTime(timeString) {
      const [hours, minutes] = timeString.split(':').map(Number);
      return hours * 60 + minutes;
    }

    function openEditBookingModal(event) {
      currentEditingBookingId = event.extendedProps.bookingId || event.id;
      const clientName = event.extendedProps.clientName || 'Unknown Client';
      const serviceName = event.extendedProps.service_name || '';
      const dateString = event.start.toLocaleDateString('en-CA');
      const startTimeString = event.start.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: false });
      const status = event.extendedProps.status || 'pending';
      const notes = event.extendedProps.notes || '';
      const createdBy = event.extendedProps.created_by || '';
      const confirmationToken = event.extendedProps.confirmation_token || '';

      document.getElementById('bookingClient').value = clientName;
      document.getElementById('bookingService').value = event.extendedProps.service_id || '';
      document.getElementById('bookingDate').value = dateString;
      document.getElementById('bookingStartTime').value = startTimeString;
      document.getElementById('bookingStatus').value = status;
      document.getElementById('bookingNotes').value = notes;

      const confirmationLinkSection = document.getElementById('confirmationLinkSection');
      const confirmationLink = document.getElementById('confirmationLink');
      if (status === 'pending' && createdBy === 'psychologist' && confirmationToken) {
        const link = `/bookings/${currentEditingBookingId}/confirm?token=${confirmationToken}`;
        confirmationLink.href = link;
        confirmationLink.textContent = link;
        confirmationLinkSection.style.display = 'block';
      } else {
        confirmationLinkSection.style.display = 'none';
      }

      document.getElementById('editBookingModal').classList.add('is-active');
    }

    function openEditUnavailabilityModal(event) {
      currentEditingUnavailabilityId = event.id;
      const dateString = event.start.toLocaleDateString('en-CA');
      const startTimeString = event.start.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: false });
      const endTimeString = event.end.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: false });

      document.getElementById('unavailabilityDate').value = dateString;
      document.getElementById('unavailabilityStartTime').value = startTimeString;
      document.getElementById('unavailabilityEndTime').value = endTimeString;
      document.getElementById('unavailabilityReason').value = event.extendedProps.reason || '';

      document.getElementById('editUnavailabilityModal').classList.add('is-active');
    }

    function openCreateUnavailabilityModal(start, end) {
      const dateString = start.toLocaleDateString('en-CA');
      const startTimeString = start.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: false });
      const endTimeString = end.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: false });

      document.getElementById('newUnavailabilityDate').value = dateString;
      document.getElementById('newUnavailabilityStartTime').value = startTimeString;
      document.getElementById('newUnavailabilityEndTime').value = endTimeString;
      document.getElementById('newUnavailabilityReason').value = '';

      document.getElementById('createUnavailabilityModal').classList.add('is-active');
    }

    function openCreateBookingModal() {
      const now = new Date();
      const minutes = now.getMinutes();
      let nextHalfHour;
      if (minutes < 30) {
        nextHalfHour = new Date(now.setMinutes(30, 0, 0));
      } else {
        nextHalfHour = new Date(now.setHours(now.getHours() + 1, 0, 0));
      }
      const dateString = nextHalfHour.toLocaleDateString('en-CA');
      const timeString = nextHalfHour.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: false });

      document.getElementById('newBookingClient').value = '';
      document.getElementById('newBookingService').value = '';
      document.getElementById('newBookingDate').value = dateString;
      document.getElementById('newBookingStartTime').value = timeString;
      document.getElementById('newBookingStatus').value = 'pending';
      document.getElementById('newBookingNotes').value = '';

      document.getElementById('createBookingModal').classList.add('is-active');
    }

    function createBooking() {
      const container = document.getElementById('calendar-container');
      const psychologistProfileId = container ? container.dataset.psychologistProfileId : null;

      if (!psychologistProfileId) {
        alert('Error: Missing psychologist profile ID');
        return;
      }

      const date = document.getElementById('newBookingDate').value;
      const startTime = document.getElementById('newBookingStartTime').value;
      const serviceSelect = document.getElementById('newBookingService');
      const serviceId = serviceSelect.value;
      const durationMinutes = parseInt(serviceSelect.options[serviceSelect.selectedIndex]?.dataset.durationMinutes || '0');
      const clientSelect = document.getElementById('newBookingClient');
      const clientId = clientSelect.value;
      const clientType = clientSelect.options[clientSelect.selectedIndex]?.dataset.clientType;

      if (!clientId) {
        alert('Please select a client.');
        return;
      }

      if (!serviceId) {
        alert('Please select a service.');
        return;
      }

      const startDateTime = new Date(`${date}T${startTime}`);
      const endDateTime = new Date(startDateTime.getTime() + durationMinutes * 60 * 1000);

      if (!isTimeAvailable(startDateTime, endDateTime)) {
        alert('The selected time slot is not available. Please choose a different time.');
        return;
      }

      const startUTC = startDateTime.toISOString();
      const endUTC = endDateTime.toISOString();

      const formData = {
        booking: {
          start_time: startUTC,
          end_time: endUTC,
          status: document.getElementById('newBookingStatus').value,
          notes: document.getElementById('newBookingNotes').value,
          psychologist_profile_id: psychologistProfileId,
          service_id: serviceId,
          timezone: Intl.DateTimeFormat().resolvedOptions().timeZone
        }
      };

      if (clientType === 'internal') {
        formData.booking.internal_client_profile_id = clientId;
      } else if (clientType === 'external') {
        formData.booking.client_profile_id = clientId;
      }

      fetch(`/psychologist_profiles/${psychologistProfileId}/bookings/create_json.json`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector("[name='csrf-token']").content
        },
        body: JSON.stringify(formData)
      })
      .then(response => {
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        return response.json();
      })
      .then(data => {
        if (data.success) {
          calendar.refetchEvents();
          closeModal('createBookingModal');
          alert('Booking created successfully!');
        } else {
          alert('Error creating booking: ' + (data.error || 'Unknown error'));
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('Error creating booking: ' + error.message);
      });
    }

    function saveBookingChanges() {
      if (!currentEditingBookingId) return;

      const date = document.getElementById('bookingDate').value;
      const startTime = document.getElementById('bookingStartTime').value;
      const serviceSelect = document.getElementById('bookingService');
      const serviceId = serviceSelect.value;
      const durationMinutes = parseInt(serviceSelect.options[serviceSelect.selectedIndex]?.dataset.durationMinutes || '0');
      const container = document.getElementById('calendar-container');
      const psychologistProfileId = container ? container.dataset.psychologistProfileId : null;

      if (!psychologistProfileId) {
        alert('Error: Missing psychologist profile ID');
        return;
      }

      if (!serviceId) {
        alert('Please select a service.');
        return;
      }

      const startDateTime = new Date(`${date}T${startTime}`);
      const endDateTime = new Date(startDateTime.getTime() + durationMinutes * 60 * 1000);
      const startUTC = startDateTime.toISOString();
      const endUTC = endDateTime.toISOString();

      if (!isTimeAvailable(startDateTime, endDateTime)) {
        alert('The selected time slot is not available. Please choose a different time.');
        return;
      }

      const formData = {
        booking: {
          start_time: startUTC,
          end_time: endUTC,
          status: document.getElementById('bookingStatus').value,
          notes: document.getElementById('bookingNotes').value,
          service_id: serviceId
        }
      };

      fetch(`/psychologist_profiles/${psychologistProfileId}/bookings/${currentEditingBookingId}/update_json`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector("[name='csrf-token']").content
        },
        body: JSON.stringify(formData)
      })
      .then(response => {
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        return response.json();
      })
      .then(data => {
        if (data.success) {
          calendar.refetchEvents();
          closeModal('editBookingModal');
          alert('Booking updated successfully!');
        } else {
          alert('Error updating booking: ' + (data.error || 'Unknown error'));
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('Error updating booking: ' + error.message);
      });
    }

    function deleteBooking() {
      if (!currentEditingBookingId) return;

      const container = document.getElementById('calendar-container');
      const psychologistProfileId = container ? container.dataset.psychologistProfileId : null;

      if (!psychologistProfileId) {
        alert('Error: Missing psychologist profile ID');
        return;
      }

      if (confirm('Are you sure you want to delete this booking?')) {
        fetch(`/psychologist_profiles/${psychologistProfileId}/bookings/${currentEditingBookingId}/destroy_json.json`, {
          method: 'DELETE',
          headers: {
            'X-CSRF-Token': document.querySelector("[name='csrf-token']").content
          }
        })
        .then(response => {
          if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
          return response.json();
        })
        .then(data => {
          if (data.success) {
            calendar.refetchEvents();
            closeModal('editBookingModal');
            alert('Booking deleted successfully!');
          } else {
            alert('Error deleting booking: ' + (data.error || 'Unknown error'));
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Error deleting booking: ' + error.message);
        });
      }
    }

    function saveUnavailabilityChanges() {
      if (!currentEditingUnavailabilityId) return;

      const date = document.getElementById('unavailabilityDate').value;
      const startTime = document.getElementById('unavailabilityStartTime').value;
      const endTime = document.getElementById('unavailabilityEndTime').value;
      const container = document.getElementById('calendar-container');
      const psychologistProfileId = container ? container.dataset.psychologistProfileId : null;

      if (!psychologistProfileId) {
        alert('Error: Missing psychologist profile ID');
        return;
      }

      const startDateTime = new Date(`${date}T${startTime}`);
      const endDateTime = new Date(`${date}T${endTime}`);
      const startUTC = startDateTime.toISOString();
      const endUTC = endDateTime.toISOString();

      const formData = {
        psychologist_unavailability: {
          id: currentEditingUnavailabilityId,
          start_time: startUTC,
          end_time: endUTC,
          reason: document.getElementById('unavailabilityReason').value,
          timezone: Intl.DateTimeFormat().resolvedOptions().timeZone
        }
      };

      fetch(`/psychologist_profiles/${psychologistProfileId}/psychologist_unavailabilities/${currentEditingUnavailabilityId}/update_json`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector("[name='csrf-token']").content
        },
        body: JSON.stringify(formData)
      })
      .then(response => {
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        return response.json();
      })
      .then(data => {
        if (data.success) {
          calendar.refetchEvents();
          closeModal('editUnavailabilityModal');
          alert('Unavailability updated successfully!');
        } else {
          alert('Error updating unavailability: ' + (data.error || 'Unknown error'));
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('Error updating unavailability: ' + error.message);
      });
    }

    function deleteUnavailability() {
      if (!currentEditingUnavailabilityId) return;

      const container = document.getElementById('calendar-container');
      const psychologistProfileId = container ? container.dataset.psychologistProfileId : null;

      if (!psychologistProfileId) {
        alert('Error: Missing psychologist profile ID');
        return;
      }

      if (confirm('Are you sure you want to delete this unavailability?')) {
        fetch(`/psychologist_profiles/${psychologistProfileId}/psychologist_unavailabilities/${currentEditingUnavailabilityId}/destroy_json.json`, {
          method: 'DELETE',
          headers: {
            'X-CSRF-Token': document.querySelector("[name='csrf-token']").content
          }
        })
        .then(response => {
          if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
          return response.json();
        })
        .then(data => {
          if (data.success) {
            calendar.refetchEvents();
            closeModal('editUnavailabilityModal');
            alert('Unavailability deleted successfully!');
          } else {
            alert('Error deleting unavailability: ' + (data.error || 'Unknown error'));
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Error deleting unavailability: ' + error.message);
        });
      }
    }

    function createUnavailability() {
      const container = document.getElementById('calendar-container');
      const psychologistProfileId = container ? container.dataset.psychologistProfileId : null;

      if (!psychologistProfileId) {
        alert('Error: Missing psychologist profile ID');
        return;
      }

      const date = document.getElementById('newUnavailabilityDate').value;
      const startTime = document.getElementById('newUnavailabilityStartTime').value;
      const endTime = document.getElementById('newUnavailabilityEndTime').value;

      const startDateTime = new Date(`${date}T${startTime}`);
      const endDateTime = new Date(`${date}T${endTime}`);
      const startUTC = startDateTime.toISOString();
      const endUTC = endDateTime.toISOString();

      if (!isTimeAvailable(startDateTime, endDateTime)) {
        alert('The selected time slot is not available. Please choose a different time.');
        return;
      }

      const formData = {
        psychologist_unavailability: {
          start_time: startUTC,
          end_time: endUTC,
          reason: document.getElementById('newUnavailabilityReason').value,
          psychologist_profile_id: psychologistProfileId,
          timezone: Intl.DateTimeFormat().resolvedOptions().timeZone
        }
      };

      fetch(`/psychologist_profiles/${psychologistProfileId}/psychologist_unavailabilities/create_json.json`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector("[name='csrf-token']").content
        },
        body: JSON.stringify(formData)
      })
      .then(response => {
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        return response.json();
      })
      .then(data => {
        if (data.success) {
          calendar.refetchEvents();
          closeModal('createUnavailabilityModal');
          alert('Unavailability created successfully!');
        } else {
          alert('Error creating unavailability: ' + (data.error || 'Unknown error'));
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('Error creating unavailability: ' + error.message);
      });
    }

    function closeModal(modalId) {
      document.getElementById(modalId).classList.remove('is-active');
      currentEditingBookingId = null;
      currentEditingUnavailabilityId = null;
    }

    document.addEventListener('click', function(event) {
      if (event.target.classList.contains('modal-background')) {
        const modal = event.target.closest('.modal');
        if (modal) {
          modal.classList.remove('is-active');
          currentEditingBookingId = null;
          currentEditingUnavailabilityId = null;
        }
      }
    });
  </script>

  <style>
    .menu-list a:hover {
      background-color: #34495E !important;
    }
    
    .calendar .fc-event {
      cursor: pointer;
    }
    
    .fc-event-booking {
      border-left: 4px solid #0d6efd;
    }
    
    .fc-event-unavailability {
      border-left: 4px solid #d9534f;
    }
    
    .modal-background {
      background-color: rgba(0, 0, 0, 0.6);
    }
    
    .fc-list-event:hover {
      background-color: #f8f9fa;
    }
  </style>
<% else %>
  <div class="container">
    <div class="notification is-danger">
      <p>Error: No psychologist profile found. Please contact support.</p>
    </div>
  </div>
<% end %>