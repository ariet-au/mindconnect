<div id="network-graph" style="margin-bottom:20px;"></div>

<h3>Page Views</h3>
<button id="clear-filter" style="padding:8px 16px; margin-bottom:10px; background-color:#f0f0f0; border:1px solid #ccc; border-radius:4px; cursor:pointer;">
  Clear Filter
</button>

<div style="overflow-x:auto;">
  <table id="page-views-table" border="1" style="width:100%; margin-top:10px; border-collapse: collapse;">
    <thead>
      <tr>
        <th style="padding:6px; text-align:left;">URL</th>
        <th style="padding:6px; text-align:right;">Visits</th>
      </tr>
    </thead>
    <tbody>
      <% @all_pages_sorted.each do |page| %>
        <tr>
          <td style="padding:6px;"><%= page[:url] %></td>
          <td style="padding:6px; text-align:right;"><%= page[:visits] %></td>
        </tr>
      <% end %>
    </tbody>
  </table>
</div>

<script src="https://d3js.org/d3.v7.min.js"></script>
<script>
document.addEventListener("turbo:load", () => {
  const container = document.getElementById("network-graph");
  container.innerHTML = "";

  const data = <%= @graph_data.to_json.html_safe %>;
  if(!data.nodes.length){ container.innerHTML = "<p>No data available</p>"; return; }

  const width = Math.min(1400, window.innerWidth - 20), 
        height = 800;

  const svg = d3.select("#network-graph").append("svg")
    .attr("width", width)
    .attr("height", height);

  const tooltip = d3.select("body").append("div")
    .attr("class","tooltip")
    .style("position","absolute")
    .style("padding","8px")
    .style("background","rgba(0,0,0,0.8)")
    .style("color","#fff")
    .style("border-radius","4px")
    .style("pointer-events","none")
    .style("opacity",0)
    .style("font-size","14px");

  let selectedNode = null;

  // Node size scale by total page views
  const maxViews = d3.max(data.nodes, d => d3.sum(Object.values(d.pages_count)));
  const nodeSize = d3.scaleSqrt().domain([0,maxViews]).range([15,50]);

  // Edge color scale (darker = more transitions)
  const maxCount = d3.max(data.links, d => d.count);
  const edgeColor = d3.scaleLinear().domain([0, maxCount]).range(["#bbb", "#222"]);

  const simulation = d3.forceSimulation(data.nodes)
    .force("link", d3.forceLink(data.links).id(d=>d.id).distance(200))
    .force("charge", d3.forceManyBody().strength(-600))
    .force("center", d3.forceCenter(width/2, height/2));

  const link = svg.append("g").attr("stroke-opacity",0.6)
    .selectAll("line").data(data.links).join("line")
    .attr("stroke-width", d=>Math.sqrt(d.count)+1)
    .attr("stroke", d=>edgeColor(d.count))
    .on("mouseover", (event, d) => {
      tooltip.transition().duration(200).style("opacity",0.95);
      tooltip.html(`<strong>${d.source.id} â†’ ${d.target.id}</strong><br/>Transitions: ${d.count}`);
    })
    .on("mousemove", (event) => {
      tooltip.style("left",(event.pageX+10)+"px").style("top",(event.pageY+10)+"px");
    })
    .on("mouseout", () => tooltip.transition().duration(200).style("opacity",0));

  const node = svg.append("g").attr("stroke","#fff").attr("stroke-width",1.5)
    .selectAll("circle").data(data.nodes).join("circle")
    .attr("r", d=>nodeSize(d3.sum(Object.values(d.pages_count))))
    .attr("fill","steelblue")
    .on("mouseover",(event,d)=>{
    const totalViews = d3.sum(Object.values(d.pages_count)); // sum of all pages in this node
    tooltip.transition().duration(200).style("opacity",0.95);
    tooltip.html(`<strong>${d.label}</strong><br/>Total Page Views: ${totalViews}<br/>Pages:<br>${d.pages.join("<br/>")}`)
            .style("left",(event.pageX+10)+"px")
            .style("top",(event.pageY+10)+"px");
    })

    .on("mouseout",()=>tooltip.transition().duration(200).style("opacity",0))
    .on("click",(event,d)=>{
      if(selectedNode) selectedNode.attr("fill","steelblue");
      selectedNode = d3.select(event.currentTarget);
      selectedNode.attr("fill","green");

      const tbody = document.querySelector("#page-views-table tbody");
      tbody.innerHTML = "";
      const pages = Object.entries(d.pages_count).sort((a,b)=>b[1]-a[1]);
      pages.forEach(([url,count])=>{
        const row = document.createElement("tr");
        row.innerHTML = `<td style="padding:6px;">${url}</td><td style="padding:6px; text-align:right;">${count}</td>`;
        tbody.appendChild(row);
      });
    })
    .call(d3.drag()
      .on("start",d=>{if(!d.active) simulation.alphaTarget(0.3).restart(); d.fx=d.x; d.fy=d.y;})
      .on("drag",d=>{d.fx=d3.event?.x ?? d.x; d.fy=d3.event?.y ?? d.y;})
      .on("end",d=>{if(!d.active) simulation.alphaTarget(0); d.fx=null; d.fy=null;}));

  const label = svg.append("g")
    .selectAll("text").data(data.nodes).join("text")
    .text(d=>d.label)
    .attr("x",30)
    .attr("y",5)
    .style("font-size","14px")
    .style("font-weight","bold")
    .style("pointer-events","none");

  simulation.on("tick",()=>{
    link.attr("x1",d=>d.source.x).attr("y1",d=>d.source.y)
        .attr("x2",d=>d.target.x).attr("y2",d=>d.target.y);
    node.attr("cx",d=>d.x).attr("cy",d=>d.y);
    label.attr("x",d=>d.x+30).attr("y",d=>d.y+5);
  });

  document.getElementById("clear-filter").addEventListener("click",()=>{
    if(selectedNode) selectedNode.attr("fill","steelblue");
    selectedNode = null;

    const tbody = document.querySelector("#page-views-table tbody");
    tbody.innerHTML = "";
    const all_pages = <%= @all_pages_sorted.to_json.html_safe %>;
    all_pages.forEach(page=>{
      const row = document.createElement("tr");
      row.innerHTML = `<td style="padding:6px;">${page.url}</td><td style="padding:6px; text-align:right;">${page.visits}</td>`;
      tbody.appendChild(row);
    });
  });
});

document.addEventListener("turbo:load", () => {
  const graph = document.getElementById("network-graph");
  if(graph) graph.scrollIntoView({ behavior: "smooth" });
});
</script>

<style>
#network-graph svg { border:1px solid #ccc; }
.tooltip { font-family:sans-serif; }
table { font-size:14px; }
@media(max-width:768px){
  table { width:100%; font-size:12px; }
  th, td { padding:4px; }
}
</style>
