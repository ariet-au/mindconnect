<div class="container">
  <div class="columns is-centered">
    <div class="column is-12-mobile is-10-tablet is-8-desktop is-6-widescreen">
      <div class="form-card">
        <div class="mb-4">
          <h2 class="section-title"><%= t('client_infos.form.personal_information') %></h2>
          <div class="form-grid">
            <div class="form-group">
              <label class="form-label"><%= t('client_infos.form.placeholder.first_name') %></label>
              <%= f.text_field :first_name, class: "form-input", placeholder: t('client_infos.form.placeholder.first_name') %>
            </div>
            <div class="form-group">
              <label class="form-label"><%= t('client_infos.form.placeholder.last_name') %></label>
              <%= f.text_field :last_name, class: "form-input", placeholder: t('client_infos.form.placeholder.last_name') %>
            </div>
          </div>

          <% max_year = Time.current.year - 16 %>
          <% min_year = 1930 %>

          <div class="form-group">
            <label class="form-label"><%= t('client_infos.form.placeholder.year_of_birth') %></label>
            <%= f.select :year_of_birth,
                  (max_year).downto(min_year).to_a,
                  { prompt: t('client_infos.form.placeholder.year_of_birth') },
                  { class: "form-input" } %>
          </div>
        </div>

        <div class="mb-4">
          <h2 class="section-title"><%= t('client_infos.form.location_information') %></h2>
          <div class="form-group">
            <label class="form-label"><%= t('client_infos.form.placeholder.city') %></label>
            <%= f.text_field :city,
                  id: "city_input",
                  class: "form-input",
                  placeholder: t('client_infos.form.placeholder.city'),
                  value: @current_city.presence %>
            <p class="form-help"><%= t('client_infos.form.help_text.location_detection') %></p>
          </div>

          <div class="form-group">
            <label class="form-label"><%= t('client_infos.form.placeholder.timezone') %></label>
            <%= f.select :timezone,
                  TZInfo::Timezone.all_identifiers.map { |id|
                    begin
                      tz = TZInfo::Timezone.get(id)
                      offset = tz.current_period.offset.utc_total_offset / 3600.0
                      formatted_offset = "GMT#{offset >= 0 ? '+' : ''}#{offset.to_i}"
                      ["(#{formatted_offset}) #{id}", id]
                    rescue TZInfo::InvalidTimezoneIdentifier
                      nil
                    end
                  }.compact,
                  { prompt: t('client_infos.form.placeholder.timezone') },
                  { id: "timezone_select", class: "form-input" } %>
            <p class="form-help"><%= t('client_infos.form.help_text.timezone_detection') %></p>
          </div>
        </div>

        <div class="mb-4">
          <h2 class="section-title"><%= t('client_infos.form.therapy_information') %></h2>
          <div class="form-group">
            <label class="form-label"><%= t('client_infos.form.placeholder.reason_for_therapy') %></label>
            <%= f.text_area :reason_for_therapy, class: "form-textarea", rows: "3", placeholder: t('client_infos.form.placeholder.reason_for_therapy') %>
          </div>
        </div>

        <div class="mb-4">
          <h2 class="section-title"><%= t('client_infos.form.contact_information') %></h2>
          <div id="contacts-list" class="mb-3">
            <%= f.fields_for :client_contacts do |contact_form| %>
              <%= render "client_infos/client_contact_fields", f: contact_form %>
            <% end %>
          </div>

          <template id="contact-template">
            <%= f.fields_for(:client_contacts, ClientContact.new, child_index: "NEW_RECORD") do |cf| %>
              <%= render "client_infos/client_contact_fields", f: cf %>
            <% end %>
          </template>

          <button type="button" id="add-contact" class="add-contact-btn">
            <span>+ <%= t('client_infos.form.add_contact') %></span>
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .form-card {
    background: #fff;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    padding: 2rem;
  }

  .mb-4 {
    margin-bottom: 1.75rem;
  }

  .mb-3 {
    margin-bottom: 1rem;
  }

  .section-title {
    font-size: 0.875rem;
    font-weight: 600;
    color: #374151;
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid #e5e7eb;
    text-transform: uppercase;
    letter-spacing: 0.025em;
  }

  .form-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .form-group {
    margin-bottom: 1rem;
  }

  .form-label {
    display: block;
    font-size: 0.875rem;
    font-weight: 500;
    color: #374151;
    margin-bottom: 0.375rem;
  }

  .form-input,
  .form-textarea {
    width: 100%;
    padding: 0.625rem 0.875rem;
    font-size: 0.9375rem;
    color: #111827;
    background: #fff;
    border: 1px solid #d1d5db;
    border-radius: 6px;
    transition: border-color 0.15s;
  }

  .form-input { height: 2.75rem; }
  .form-textarea { min-height: 120px; resize: vertical; }

  .form-input:focus,
  .form-textarea:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59,130,246,0.1);
  }

  .form-help {
    font-size: 0.75rem;
    color: #6b7280;
    margin: 0.375rem 0 0 0;
  }

  .add-contact-btn {
    width: 100%;
    padding: 0.75rem;
    background: #fff;
    border: 1.5px dashed #d1d5db;
    border-radius: 6px;
    color: #6b7280;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.15s;
  }

  .add-contact-btn:hover {
    background: #f9fafb;
    border-color: #9ca3af;
    color: #374151;
  }

  @media (max-width: 768px) {
    .form-card {
      padding: 1.5rem;
      border-radius: 0;
    }
    
    .form-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  document.addEventListener("turbo:load", function () {
    // ----- City auto-fill -----
    const cityInput = document.getElementById("city_input");
    if (cityInput && navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(function (position) {
        fetch(`https://nominatim.openstreetmap.org/reverse?lat=${position.coords.latitude}&lon=${position.coords.longitude}&format=json`)
          .then(res => res.json())
          .then(data => {
            if (data.address) {
              const city = data.address.city || data.address.town || data.address.village || "";
              const country = data.address.country || "";
              if (city && country && !cityInput.value) {
                cityInput.value = `${city}, ${country}`;
              }
            }
          }).catch(err => console.error("Location lookup failed", err));
      });
    }

    // ----- Timezone auto-select -----
    const tzSelect = document.getElementById("timezone_select");
    if (tzSelect && !tzSelect.value) {
      const browserTz = Intl.DateTimeFormat().resolvedOptions().timeZone;
      if (browserTz) {
        const option = tzSelect.querySelector(`option[value="${browserTz}"]`);
        if (option) tzSelect.value = browserTz;
      }
    }

    // ----- Dynamic contacts -----
    const addBtn = document.getElementById("add-contact");
    const template = document.getElementById("contact-template")?.innerHTML;
    const list = document.getElementById("contacts-list");

    if (addBtn && template && list) {
      addBtn.addEventListener("click", function () {
        const newId = new Date().getTime();
        const content = template.replace(/NEW_RECORD/g, newId);
        list.insertAdjacentHTML("beforeend", content);
      });

      // Event delegation for remove buttons
      list.addEventListener("click", function (e) {
        if (e.target.classList.contains("remove-contact")) {
          e.preventDefault();
          const row = e.target.closest(".contact-row");
          const destroyField = row.querySelector("input[name*='_destroy']");
          if (destroyField) {
            destroyField.value = 1;  // mark for deletion
            row.style.display = "none";
          } else {
            row.remove();
          }
        }
      });
    }

    // ----- Error notification close functionality -----
    const deleteButtons = document.querySelectorAll('.notification .delete');
    deleteButtons.forEach(function(button) {
      button.addEventListener('click', function() {
        button.parentNode.style.display = 'none';
      });
    });
  });
</script>