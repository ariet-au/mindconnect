class TimezoneAwareSlotFinder
  def initialize(psychologist_profile_id, duration_minutes, user_timezone = 'UTC')
    @psychologist = PsychologistProfile.find(psychologist_profile_id)
    @duration = duration_minutes.minutes
    @user_timezone = user_timezone.presence || 'UTC'
    @psychologist_timezone_name = @psychologist.timezone.presence || 'UTC'
    @psych_tz = ActiveSupport::TimeZone[@psychologist_timezone_name] || ActiveSupport::TimeZone['UTC']
  end

  # Returns an array of TimeWithZone objects in @user_timezone for all available slots within 14 days.
  def available_slots(from_time = Time.current)
    slots = []
    from_time_in_psych_tz = from_time.in_time_zone(@psych_tz) rescue Time.current.in_time_zone(@psych_tz)

    # Round up to the next 15-minute interval in the psychologist's timezone
    current_min_rounded = (from_time_in_psych_tz.min / 15.0).ceil * 15
    initial_check_time_psych_tz = from_time_in_psych_tz.change(min: current_min_rounded, sec: 0)
    initial_check_time_psych_tz += 1.hour if current_min_rounded >= 60

    # Check the next 14 days for availability
    (0..13).each do |day_offset|
      target_date_in_psych_tz = (initial_check_time_psych_tz + day_offset.days).to_date
      day_of_week = target_date_in_psych_tz.wday

      @psychologist.psychologist_availabilities
                   .where(day_of_week: day_of_week)
                   .order(:start_time_of_day)
                   .each do |availability|
        availability_period_start_utc = combine_date_and_time_to_utc(target_date_in_psych_tz, availability.start_time_of_day)
        availability_period_end_utc = combine_date_and_time_to_utc(target_date_in_psych_tz, availability.end_time_of_day)

        next unless availability_period_start_utc && availability_period_end_utc

        slot_search_start_utc = [
          availability_period_start_utc,
          initial_check_time_psych_tz.beginning_of_minute.utc
        ].max

        next if slot_search_start_utc >= availability_period_end_utc

        # Collect all valid slots within this availability period
        slots += find_all_available_slots(slot_search_start_utc, availability_period_end_utc)
      end
    end

    # Convert slots to user's timezone
    slots.map { |slot_utc| slot_utc.in_time_zone(@user_timezone) }
  end

  # Existing next_available_slot method (unchanged)
  def next_available_slot(from_time = Time.current)
    from_time_in_psych_tz = from_time.in_time_zone(@psych_tz) rescue Time.current.in_time_zone(@psych_tz)
    current_min_rounded = (from_time_in_psych_tz.min / 15.0).ceil * 15
    initial_check_time_psych_tz = from_time_in_psych_tz.change(min: current_min_rounded, sec: 0)
    initial_check_time_psych_tz += 1.hour if current_min_rounded >= 60

    (0..13).each do |day_offset|
      target_date_in_psych_tz = (initial_check_time_psych_tz + day_offset.days).to_date
      day_of_week = target_date_in_psych_tz.wday

      @psychologist.psychologist_availabilities
                   .where(day_of_week: day_of_week)
                   .order(:start_time_of_day)
                   .each do |availability|
        availability_period_start_utc = combine_date_and_time_to_utc(target_date_in_psych_tz, availability.start_time_of_day)
        availability_period_end_utc = combine_date_and_time_to_utc(target_date_in_psych_tz, availability.end_time_of_day)

        next unless availability_period_start_utc && availability_period_end_utc

        slot_search_start_utc = [
          availability_period_start_utc,
          initial_check_time_psych_tz.beginning_of_minute.utc
        ].max

        next if slot_search_start_utc >= availability_period_end_utc

        if found_slot_utc = find_first_available_slot(slot_search_start_utc, availability_period_end_utc)
          return found_slot_utc.in_time_zone(@user_timezone)
        end
      end
    end

    nil
  end

  private

  # New method to find all available slots in a period
  def find_all_available_slots(period_start_utc, period_end_utc)
    slots = []
    slot_start_utc = period_start_utc.beginning_of_minute

    while slot_start_utc + @duration <= period_end_utc
      slot_end_utc = slot_start_utc + @duration

      unless time_slot_unavailable?(slot_start_utc, slot_end_utc) || booking_overlaps?(slot_start_utc, slot_end_utc)
        slots << slot_start_utc
      end

      slot_start_utc += 15.minutes
    end

    slots
  end

  def combine_date_and_time_to_utc(date_obj, time_of_day_obj)
    return nil unless date_obj.is_a?(Date) && time_of_day_obj.respond_to?(:hour) && time_of_day_obj.respond_to?(:min)
    @psych_tz.local(date_obj.year, date_obj.month, date_obj.day,
                    time_of_day_obj.hour, time_of_day_obj.min, time_of_day_obj.sec || 0).utc
  rescue ArgumentError, NoMethodError => e
    Rails.logger.error "Error combining date and time for psychologist_id #{@psychologist.id}: #{e.message}"
    nil
  end

  def find_first_available_slot(period_start_utc, period_end_utc)
    slot_start_utc = period_start_utc.beginning_of_minute
    while slot_start_utc + @duration <= period_end_utc
      slot_end_utc = slot_start_utc + @duration
      unless time_slot_unavailable?(slot_start_utc, slot_end_utc) || booking_overlaps?(slot_start_utc, slot_end_utc)
        return slot_start_utc
      end
      slot_start_utc += 15.minutes
    end
    nil
  end

  def time_slot_unavailable?(start_time_utc, end_time_utc)
    start_time_in_psych_tz = start_time_utc.in_time_zone(@psych_tz)
    @psychologist.psychologist_unavailabilities.exists?([
      "(recurring = true AND day_of_week = ? AND (recurring_until IS NULL OR recurring_until >= ?)) OR
       (recurring = false AND (start_time, end_time) OVERLAPS (?, ?))",
      start_time_in_psych_tz.wday,
      start_time_in_psych_tz.to_date,
      start_time_utc,
      end_time_utc
    ])
  end

  def booking_overlaps?(start_time_utc, end_time_utc)
    Rails.logger.debug "  Checking booking overlap for proposed slot: #{start_time_utc.iso8601} to #{end_time_utc.iso8601}"
    overlap = @psychologist.bookings.where(status: ['confirmed', 'pending']).exists?(
      ["start_time < ? AND end_time > ?", end_time_utc, start_time_utc]
    )
    Rails.logger.debug "  Overlap found: #{overlap}"
    overlap
  end
end